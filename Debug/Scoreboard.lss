
Scoreboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00005070  00005124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005070  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040c  0080010e  0080010e  00005132  2**0
                  ALLOC
  3 .eeprom       0000001d  00810000  00810000  00005132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000514f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005180  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000388  00000000  00000000  000051c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005657  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ecb  00000000  00000000  0000ab9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000041e3  00000000  00000000  0000ba6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c60  00000000  00000000  0000fc50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011b2  00000000  00000000  000108b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000449b  00000000  00000000  00011a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000368  00000000  00000000  00015efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 02 	jmp	0x408	; 0x408 <__ctors_end>
       4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
       8:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
       c:	0c 94 7c 20 	jmp	0x40f8	; 0x40f8 <__vector_3>
      10:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      14:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      18:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      1c:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <__vector_7>
      20:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      24:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      28:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      2c:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__vector_11>
      30:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      34:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      38:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      3c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      40:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      44:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      48:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__vector_18>
      4c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      50:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__vector_20>
      54:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__vector_21>
      58:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_22>
      5c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      60:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      64:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      68:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      6c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      70:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_28>
      74:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_29>
      78:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_30>
      7c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      80:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      84:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      88:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      8c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      90:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      94:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      98:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      9c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      a0:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      a4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      a8:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      ac:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      b0:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      b4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      b8:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_46>
      bc:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      c0:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      c4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      c8:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      cc:	91 03       	fmuls	r17, r17
      ce:	91 03       	fmuls	r17, r17
      d0:	93 03       	fmuls	r17, r19
      d2:	95 03       	fmuls	r17, r21
      d4:	9e 03       	fmulsu	r17, r22
      d6:	9e 03       	fmulsu	r17, r22
      d8:	91 03       	fmuls	r17, r17
      da:	9e 03       	fmulsu	r17, r22
      dc:	9e 03       	fmulsu	r17, r22
      de:	9e 03       	fmulsu	r17, r22
      e0:	9e 03       	fmulsu	r17, r22
      e2:	9e 03       	fmulsu	r17, r22
      e4:	9e 03       	fmulsu	r17, r22
      e6:	9e 03       	fmulsu	r17, r22
      e8:	9e 03       	fmulsu	r17, r22
      ea:	9e 03       	fmulsu	r17, r22
      ec:	a0 03       	fmuls	r18, r16
      ee:	9e 03       	fmulsu	r17, r22
      f0:	9e 03       	fmulsu	r17, r22
      f2:	97 03       	fmuls	r17, r23
      f4:	9e 03       	fmulsu	r17, r22
      f6:	9e 03       	fmulsu	r17, r22
      f8:	99 03       	fmulsu	r17, r17
      fa:	9e 03       	fmulsu	r17, r22
      fc:	9e 03       	fmulsu	r17, r22
      fe:	9e 03       	fmulsu	r17, r22
     100:	9e 03       	fmulsu	r17, r22
     102:	9e 03       	fmulsu	r17, r22
     104:	9e 03       	fmulsu	r17, r22
     106:	9e 03       	fmulsu	r17, r22
     108:	9e 03       	fmulsu	r17, r22
     10a:	9e 03       	fmulsu	r17, r22
     10c:	9e 03       	fmulsu	r17, r22
     10e:	9e 03       	fmulsu	r17, r22
     110:	9e 03       	fmulsu	r17, r22
     112:	9e 03       	fmulsu	r17, r22
     114:	9e 03       	fmulsu	r17, r22
     116:	9e 03       	fmulsu	r17, r22
     118:	9e 03       	fmulsu	r17, r22
     11a:	9e 03       	fmulsu	r17, r22
     11c:	9e 03       	fmulsu	r17, r22
     11e:	9e 03       	fmulsu	r17, r22
     120:	9e 03       	fmulsu	r17, r22
     122:	9e 03       	fmulsu	r17, r22
     124:	9e 03       	fmulsu	r17, r22
     126:	9e 03       	fmulsu	r17, r22
     128:	9e 03       	fmulsu	r17, r22
     12a:	9e 03       	fmulsu	r17, r22
     12c:	a0 03       	fmuls	r18, r16
     12e:	9e 03       	fmulsu	r17, r22
     130:	9e 03       	fmulsu	r17, r22
     132:	9e 03       	fmulsu	r17, r22
     134:	9e 03       	fmulsu	r17, r22
     136:	9e 03       	fmulsu	r17, r22
     138:	9e 03       	fmulsu	r17, r22
     13a:	9e 03       	fmulsu	r17, r22
     13c:	9e 03       	fmulsu	r17, r22
     13e:	9e 03       	fmulsu	r17, r22
     140:	9e 03       	fmulsu	r17, r22
     142:	9e 03       	fmulsu	r17, r22
     144:	9e 03       	fmulsu	r17, r22
     146:	9e 03       	fmulsu	r17, r22
     148:	9e 03       	fmulsu	r17, r22
     14a:	9b 03       	fmulsu	r17, r19
     14c:	64 17       	cp	r22, r20
     14e:	bb 1c       	adc	r11, r11
     150:	bb 1c       	adc	r11, r11
     152:	64 19       	sub	r22, r4
     154:	1e 18       	sub	r1, r14
     156:	51 18       	sub	r5, r1
     158:	84 18       	sub	r8, r4
     15a:	bb 1c       	adc	r11, r11
     15c:	c3 19       	sub	r28, r3
     15e:	bb 1c       	adc	r11, r11
     160:	bb 1c       	adc	r11, r11
     162:	bb 1c       	adc	r11, r11
     164:	bb 1c       	adc	r11, r11
     166:	bb 1c       	adc	r11, r11
     168:	bb 1c       	adc	r11, r11
     16a:	cd 17       	cp	r28, r29
     16c:	f4 17       	cp	r31, r20
     16e:	a3 17       	cp	r26, r19
     170:	bb 1c       	adc	r11, r11
     172:	bb 1c       	adc	r11, r11
     174:	bb 1c       	adc	r11, r11
     176:	bb 1c       	adc	r11, r11
     178:	b1 1c       	adc	r11, r1
     17a:	e3 18       	sub	r14, r3
     17c:	29 19       	sub	r18, r9
     17e:	bb 1c       	adc	r11, r11
     180:	bb 1c       	adc	r11, r11
     182:	bb 1c       	adc	r11, r11
     184:	bb 1c       	adc	r11, r11
     186:	bb 1c       	adc	r11, r11
     188:	bb 1c       	adc	r11, r11
     18a:	ed 19       	sub	r30, r13
     18c:	0d 1b       	sub	r16, r29
     18e:	bb 18       	sub	r11, r11
     190:	bb 1c       	adc	r11, r11
     192:	d6 1b       	sub	r29, r22
     194:	10 1c       	adc	r1, r0
     196:	46 1c       	adc	r4, r6
     198:	7c 1c       	adc	r7, r12
     19a:	8e 19       	sub	r24, r14
     19c:	bb 1c       	adc	r11, r11
     19e:	bb 1c       	adc	r11, r11
     1a0:	bb 1c       	adc	r11, r11
     1a2:	bb 1c       	adc	r11, r11
     1a4:	bb 1c       	adc	r11, r11
     1a6:	bb 1c       	adc	r11, r11
     1a8:	bb 1c       	adc	r11, r11
     1aa:	bb 1c       	adc	r11, r11
     1ac:	bb 1c       	adc	r11, r11
     1ae:	bb 1c       	adc	r11, r11
     1b0:	bb 1c       	adc	r11, r11
     1b2:	bb 1c       	adc	r11, r11
     1b4:	bb 1c       	adc	r11, r11
     1b6:	bb 1c       	adc	r11, r11
     1b8:	bb 1c       	adc	r11, r11
     1ba:	bb 1c       	adc	r11, r11
     1bc:	bb 1c       	adc	r11, r11
     1be:	bb 1c       	adc	r11, r11
     1c0:	bb 1c       	adc	r11, r11
     1c2:	bb 1c       	adc	r11, r11
     1c4:	bb 1c       	adc	r11, r11
     1c6:	bb 1c       	adc	r11, r11
     1c8:	bb 1c       	adc	r11, r11
     1ca:	bb 1c       	adc	r11, r11
     1cc:	bb 1c       	adc	r11, r11
     1ce:	bb 1c       	adc	r11, r11
     1d0:	bb 1c       	adc	r11, r11
     1d2:	bb 1c       	adc	r11, r11
     1d4:	bb 1c       	adc	r11, r11
     1d6:	bb 1c       	adc	r11, r11
     1d8:	bb 1c       	adc	r11, r11
     1da:	bb 1c       	adc	r11, r11
     1dc:	bb 1c       	adc	r11, r11
     1de:	bb 1c       	adc	r11, r11
     1e0:	bb 1c       	adc	r11, r11
     1e2:	bb 1c       	adc	r11, r11
     1e4:	bb 1c       	adc	r11, r11
     1e6:	bb 1c       	adc	r11, r11
     1e8:	bb 1c       	adc	r11, r11
     1ea:	bb 1c       	adc	r11, r11
     1ec:	bb 1c       	adc	r11, r11
     1ee:	bb 1c       	adc	r11, r11
     1f0:	bb 1c       	adc	r11, r11
     1f2:	bb 1c       	adc	r11, r11
     1f4:	bb 1c       	adc	r11, r11
     1f6:	bb 1c       	adc	r11, r11
     1f8:	bb 1c       	adc	r11, r11
     1fa:	bb 1c       	adc	r11, r11
     1fc:	bb 1c       	adc	r11, r11
     1fe:	bb 1c       	adc	r11, r11
     200:	bb 1c       	adc	r11, r11
     202:	bb 1c       	adc	r11, r11
     204:	bb 1c       	adc	r11, r11
     206:	bb 1c       	adc	r11, r11
     208:	bb 1c       	adc	r11, r11
     20a:	bb 1c       	adc	r11, r11
     20c:	3b 1a       	sub	r3, r27
     20e:	6f 1a       	sub	r6, r31
     210:	a4 1a       	sub	r10, r20
     212:	d8 1a       	sub	r13, r24
     214:	40 1b       	sub	r20, r16
     216:	72 1b       	sub	r23, r18
     218:	a4 1b       	sub	r26, r20
     21a:	ea 1f       	adc	r30, r26
     21c:	6c 20       	and	r6, r12
     21e:	6c 20       	and	r6, r12
     220:	6c 20       	and	r6, r12
     222:	6c 20       	and	r6, r12
     224:	35 1f       	adc	r19, r21
     226:	6c 20       	and	r6, r12
     228:	6c 20       	and	r6, r12
     22a:	6c 20       	and	r6, r12
     22c:	6c 20       	and	r6, r12
     22e:	6c 20       	and	r6, r12
     230:	6c 20       	and	r6, r12
     232:	6c 20       	and	r6, r12
     234:	6c 20       	and	r6, r12
     236:	6c 20       	and	r6, r12
     238:	6c 20       	and	r6, r12
     23a:	6c 20       	and	r6, r12
     23c:	6c 20       	and	r6, r12
     23e:	6c 20       	and	r6, r12
     240:	6c 20       	and	r6, r12
     242:	6c 20       	and	r6, r12
     244:	6c 20       	and	r6, r12
     246:	6c 20       	and	r6, r12
     248:	6c 20       	and	r6, r12
     24a:	85 1f       	adc	r24, r21
     24c:	6c 20       	and	r6, r12
     24e:	6c 20       	and	r6, r12
     250:	6c 20       	and	r6, r12
     252:	6c 20       	and	r6, r12
     254:	6c 20       	and	r6, r12
     256:	6c 20       	and	r6, r12
     258:	f9 1e       	adc	r15, r25
     25a:	6c 20       	and	r6, r12
     25c:	0d 1f       	adc	r16, r29
     25e:	af 1f       	adc	r26, r31
     260:	6c 20       	and	r6, r12
     262:	e7 1e       	adc	r14, r23
     264:	de 1f       	adc	r29, r30
     266:	6c 20       	and	r6, r12
     268:	6c 20       	and	r6, r12
     26a:	6c 20       	and	r6, r12
     26c:	6c 20       	and	r6, r12
     26e:	6c 20       	and	r6, r12
     270:	6c 20       	and	r6, r12
     272:	6c 20       	and	r6, r12
     274:	6c 20       	and	r6, r12
     276:	5d 1f       	adc	r21, r29
     278:	71 1f       	adc	r23, r17
     27a:	6c 20       	and	r6, r12
     27c:	6c 20       	and	r6, r12
     27e:	21 1f       	adc	r18, r17
     280:	6c 20       	and	r6, r12
     282:	49 1f       	adc	r20, r25
     284:	49 20       	and	r4, r9
     286:	55 20       	and	r5, r5
     288:	61 20       	and	r6, r1
     28a:	6c 20       	and	r6, r12
     28c:	6c 20       	and	r6, r12
     28e:	6c 20       	and	r6, r12
     290:	6c 20       	and	r6, r12
     292:	6c 20       	and	r6, r12
     294:	6c 20       	and	r6, r12
     296:	0f 20       	and	r0, r15
     298:	1d 20       	and	r1, r13
     29a:	6c 20       	and	r6, r12
     29c:	6c 20       	and	r6, r12
     29e:	6c 20       	and	r6, r12
     2a0:	6c 20       	and	r6, r12
     2a2:	6c 20       	and	r6, r12
     2a4:	6c 20       	and	r6, r12
     2a6:	6c 20       	and	r6, r12
     2a8:	6c 20       	and	r6, r12
     2aa:	6c 20       	and	r6, r12
     2ac:	6c 20       	and	r6, r12
     2ae:	6c 20       	and	r6, r12
     2b0:	6c 20       	and	r6, r12
     2b2:	6c 20       	and	r6, r12
     2b4:	6c 20       	and	r6, r12
     2b6:	2c 20       	and	r2, r12
     2b8:	3a 20       	and	r3, r10
     2ba:	0f 24       	eor	r0, r15
     2bc:	19 24       	eor	r1, r9
     2be:	3a 24       	eor	r3, r10
     2c0:	2e 24       	eor	r2, r14
     2c2:	37 24       	eor	r3, r7
     2c4:	34 24       	eor	r3, r4
     2c6:	4d 24       	eor	r4, r13
     2c8:	4d 24       	eor	r4, r13
     2ca:	4d 24       	eor	r4, r13
     2cc:	4d 24       	eor	r4, r13
     2ce:	4d 24       	eor	r4, r13
     2d0:	4d 24       	eor	r4, r13
     2d2:	4d 24       	eor	r4, r13
     2d4:	4d 24       	eor	r4, r13
     2d6:	31 24       	eor	r3, r1
     2d8:	4d 24       	eor	r4, r13
     2da:	4d 24       	eor	r4, r13
     2dc:	4d 24       	eor	r4, r13
     2de:	2b 24       	eor	r2, r11
     2e0:	4d 24       	eor	r4, r13
     2e2:	23 24       	eor	r2, r3

000002e4 <__trampolines_end>:
     2e4:	00 40       	sbci	r16, 0x00	; 0
     2e6:	7a 10       	cpse	r7, r10
     2e8:	f3 5a       	subi	r31, 0xA3	; 163
     2ea:	00 a0       	ldd	r0, Z+32	; 0x20
     2ec:	72 4e       	sbci	r23, 0xE2	; 226
     2ee:	18 09       	sbc	r17, r8
     2f0:	00 10       	cpse	r0, r0
     2f2:	a5 d4       	rcall	.+2378   	; 0xc3e <DS18x20_TemperatureValue+0x12a>
     2f4:	e8 00       	.word	0x00e8	; ????
     2f6:	00 e8       	ldi	r16, 0x80	; 128
     2f8:	76 48       	sbci	r23, 0x86	; 134
     2fa:	17 00       	.word	0x0017	; ????
     2fc:	00 e4       	ldi	r16, 0x40	; 64
     2fe:	0b 54       	subi	r16, 0x4B	; 75
     300:	02 00       	.word	0x0002	; ????
     302:	00 ca       	rjmp	.-3072   	; 0xfffff704 <__eeprom_end+0xff7ef6e7>
     304:	9a 3b       	cpi	r25, 0xBA	; 186
     306:	00 00       	nop
     308:	00 e1       	ldi	r16, 0x10	; 16
     30a:	f5 05       	cpc	r31, r5
     30c:	00 00       	nop
     30e:	80 96       	adiw	r24, 0x20	; 32
     310:	98 00       	.word	0x0098	; ????
     312:	00 00       	nop
     314:	40 42       	sbci	r20, 0x20	; 32
     316:	0f 00       	.word	0x000f	; ????
     318:	00 00       	nop
     31a:	a0 86       	std	Z+8, r10	; 0x08
     31c:	01 00       	.word	0x0001	; ????
     31e:	00 00       	nop
     320:	10 27       	eor	r17, r16
     322:	00 00       	nop
     324:	00 00       	nop
     326:	e8 03       	fmulsu	r22, r16
     328:	00 00       	nop
     32a:	00 00       	nop
     32c:	64 00       	.word	0x0064	; ????
     32e:	00 00       	nop
     330:	00 00       	nop
     332:	0a 00       	.word	0x000a	; ????
     334:	00 00       	nop
     336:	00 00       	nop
     338:	01 00       	.word	0x0001	; ????
     33a:	00 00       	nop
     33c:	00 00       	nop
     33e:	2c 76       	andi	r18, 0x6C	; 108
     340:	d8 88       	ldd	r13, Y+16	; 0x10
     342:	dc 67       	ori	r29, 0x7C	; 124
     344:	4f 08       	sbc	r4, r15
     346:	23 df       	rcall	.-442    	; 0x18e <__SREG__+0x14f>
     348:	c1 df       	rcall	.-126    	; 0x2cc <__SREG__+0x28d>
     34a:	ae 59       	subi	r26, 0x9E	; 158
     34c:	e1 b1       	in	r30, 0x01	; 1
     34e:	b7 96       	adiw	r30, 0x27	; 39
     350:	e5 e3       	ldi	r30, 0x35	; 53
     352:	e4 53       	subi	r30, 0x34	; 52
     354:	c6 3a       	cpi	r28, 0xA6	; 166
     356:	e6 51       	subi	r30, 0x16	; 22
     358:	99 76       	andi	r25, 0x69	; 105
     35a:	96 e8       	ldi	r25, 0x86	; 134
     35c:	e6 c2       	rjmp	.+1484   	; 0x92a <DS18x20_ReadROM+0x1a>
     35e:	84 26       	eor	r8, r20
     360:	eb 89       	ldd	r30, Y+19	; 0x13
     362:	8c 9b       	sbis	0x11, 4	; 17
     364:	62 ed       	ldi	r22, 0xD2	; 210
     366:	40 7c       	andi	r20, 0xC0	; 192
     368:	6f fc       	.word	0xfc6f	; ????
     36a:	ef bc       	out	0x2f, r14	; 47
     36c:	9c 9f       	mul	r25, r28
     36e:	40 f2       	brcs	.-112    	; 0x300 <__trampolines_end+0x1c>
     370:	ba a5       	ldd	r27, Y+42	; 0x2a
     372:	6f a5       	ldd	r22, Y+47	; 0x2f
     374:	f4 90       	lpm	r15, Z
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	2a f7       	brpl	.-54     	; 0x344 <__trampolines_end+0x60>
     37a:	5c 93       	st	X, r21
     37c:	6b 6c       	ori	r22, 0xCB	; 203
     37e:	f9 67       	ori	r31, 0x79	; 121
     380:	6d c1       	rjmp	.+730    	; 0x65c <RC5_Init>
     382:	1b fc       	.word	0xfc1b	; ????
     384:	e0 e4       	ldi	r30, 0x40	; 64
     386:	0d 47       	sbci	r16, 0x7D	; 125
     388:	fe f5       	brtc	.+126    	; 0x408 <__ctors_end>
     38a:	20 e6       	ldi	r18, 0x60	; 96
     38c:	b5 00       	.word	0x00b5	; ????
     38e:	d0 ed       	ldi	r29, 0xD0	; 208
     390:	90 2e       	mov	r9, r16
     392:	03 00       	.word	0x0003	; ????
     394:	94 35       	cpi	r25, 0x54	; 84
     396:	77 05       	cpc	r23, r7
     398:	00 80       	ld	r0, Z
     39a:	84 1e       	adc	r8, r20
     39c:	08 00       	.word	0x0008	; ????
     39e:	00 20       	and	r0, r0
     3a0:	4e 0a       	sbc	r4, r30
     3a2:	00 00       	nop
     3a4:	00 c8       	rjmp	.-4096   	; 0xfffff3a6 <__eeprom_end+0xff7ef389>
     3a6:	0c 33       	cpi	r16, 0x3C	; 60
     3a8:	33 33       	cpi	r19, 0x33	; 51
     3aa:	33 0f       	add	r19, r19
     3ac:	98 6e       	ori	r25, 0xE8	; 232
     3ae:	12 83       	std	Z+2, r17	; 0x02
     3b0:	11 41       	sbci	r17, 0x11	; 17
     3b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     3b4:	21 14       	cp	r2, r1
     3b6:	89 3b       	cpi	r24, 0xB9	; 185
     3b8:	e6 55       	subi	r30, 0x56	; 86
     3ba:	16 cf       	rjmp	.-468    	; 0x1e8 <__SREG__+0x1a9>
     3bc:	fe e6       	ldi	r31, 0x6E	; 110
     3be:	db 18       	sub	r13, r11
     3c0:	d1 84       	ldd	r13, Z+9	; 0x09
     3c2:	4b 38       	cpi	r20, 0x8B	; 139
     3c4:	1b f7       	brvc	.-58     	; 0x38c <__trampolines_end+0xa8>
     3c6:	7c 1d       	adc	r23, r12
     3c8:	90 1d       	adc	r25, r0
     3ca:	a4 bb       	out	0x14, r26	; 20
     3cc:	e4 24       	eor	r14, r4
     3ce:	20 32       	cpi	r18, 0x20	; 32
     3d0:	84 72       	andi	r24, 0x24	; 36
     3d2:	5e 22       	and	r5, r30
     3d4:	81 00       	.word	0x0081	; ????
     3d6:	c9 f1       	breq	.+114    	; 0x44a <Init_MBI+0x4>
     3d8:	24 ec       	ldi	r18, 0xC4	; 196
     3da:	a1 e5       	ldi	r26, 0x51	; 81
     3dc:	3d 27       	eor	r19, r29

000003de <flash_Device_ID>:
     3de:	53 43 4f 52 45 42 4f 41 52 44 5f 56 2e 31 2e 32     SCOREBOARD_V.1.2
	...

000003ef <flash_fonts>:
     3ef:	ee 06 7c 3e 96 ba fa 26 fe be e8 10 b4 00 f4 da     ..|>...&........
     3ff:	01 f0 5a 52 f6 d8 c8 f8 00                          ..ZR.....

00000408 <__ctors_end>:
     408:	11 24       	eor	r1, r1
     40a:	1f be       	out	0x3f, r1	; 63
     40c:	cf ef       	ldi	r28, 0xFF	; 255
     40e:	d8 e0       	ldi	r29, 0x08	; 8
     410:	de bf       	out	0x3e, r29	; 62
     412:	cd bf       	out	0x3d, r28	; 61

00000414 <__do_copy_data>:
     414:	11 e0       	ldi	r17, 0x01	; 1
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b1 e0       	ldi	r27, 0x01	; 1
     41a:	e0 e7       	ldi	r30, 0x70	; 112
     41c:	f0 e5       	ldi	r31, 0x50	; 80
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__do_copy_data+0x10>
     420:	05 90       	lpm	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	ae 30       	cpi	r26, 0x0E	; 14
     426:	b1 07       	cpc	r27, r17
     428:	d9 f7       	brne	.-10     	; 0x420 <__do_copy_data+0xc>

0000042a <__do_clear_bss>:
     42a:	25 e0       	ldi	r18, 0x05	; 5
     42c:	ae e0       	ldi	r26, 0x0E	; 14
     42e:	b1 e0       	ldi	r27, 0x01	; 1
     430:	01 c0       	rjmp	.+2      	; 0x434 <.do_clear_bss_start>

00000432 <.do_clear_bss_loop>:
     432:	1d 92       	st	X+, r1

00000434 <.do_clear_bss_start>:
     434:	aa 31       	cpi	r26, 0x1A	; 26
     436:	b2 07       	cpc	r27, r18
     438:	e1 f7       	brne	.-8      	; 0x432 <.do_clear_bss_loop>
     43a:	0e 94 85 23 	call	0x470a	; 0x470a <main>
     43e:	0c 94 36 28 	jmp	0x506c	; 0x506c <_exit>

00000442 <__bad_interrupt>:
     442:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000446 <Init_MBI>:
			last_temperature[3]=CHR_C;
		}
		
	}
	//sei();
}
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	82 b9       	out	0x02, r24	; 2
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	81 b9       	out	0x01, r24	; 1
     44e:	08 95       	ret

00000450 <byte_out>:
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	11 c0       	rjmp	.+34     	; 0x476 <byte_out+0x26>
     454:	80 ff       	sbrs	r24, 0
     456:	04 c0       	rjmp	.+8      	; 0x460 <byte_out+0x10>
     458:	92 b1       	in	r25, 0x02	; 2
     45a:	91 60       	ori	r25, 0x01	; 1
     45c:	92 b9       	out	0x02, r25	; 2
     45e:	03 c0       	rjmp	.+6      	; 0x466 <byte_out+0x16>
     460:	92 b1       	in	r25, 0x02	; 2
     462:	9e 7f       	andi	r25, 0xFE	; 254
     464:	92 b9       	out	0x02, r25	; 2
     466:	92 b1       	in	r25, 0x02	; 2
     468:	92 60       	ori	r25, 0x02	; 2
     46a:	92 b9       	out	0x02, r25	; 2
     46c:	92 b1       	in	r25, 0x02	; 2
     46e:	9d 7f       	andi	r25, 0xFD	; 253
     470:	92 b9       	out	0x02, r25	; 2
     472:	85 95       	asr	r24
     474:	2f 5f       	subi	r18, 0xFF	; 255
     476:	28 30       	cpi	r18, 0x08	; 8
     478:	68 f3       	brcs	.-38     	; 0x454 <byte_out+0x4>
     47a:	08 95       	ret

0000047c <do_rclk>:
     47c:	82 b1       	in	r24, 0x02	; 2
     47e:	88 60       	ori	r24, 0x08	; 8
     480:	82 b9       	out	0x02, r24	; 2
     482:	82 b1       	in	r24, 0x02	; 2
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	82 b9       	out	0x02, r24	; 2
     488:	08 95       	ret

0000048a <DoLEDtest>:
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	c0 e0       	ldi	r28, 0x00	; 0
     490:	04 c0       	rjmp	.+8      	; 0x49a <DoLEDtest+0x10>
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
     498:	cf 5f       	subi	r28, 0xFF	; 255
     49a:	2c 2f       	mov	r18, r28
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
     4a2:	08 2e       	mov	r0, r24
     4a4:	00 0c       	add	r0, r0
     4a6:	99 0b       	sbc	r25, r25
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	94 f3       	brlt	.-28     	; 0x492 <DoLEDtest+0x8>
     4ae:	0e 94 3e 02 	call	0x47c	; 0x47c <do_rclk>
     4b2:	a8 95       	wdr
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	83 ec       	ldi	r24, 0xC3	; 195
     4b8:	99 e0       	ldi	r25, 0x09	; 9
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <DoLEDtest+0x30>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <DoLEDtest+0x3a>
     4c4:	00 00       	nop
     4c6:	d0 e8       	ldi	r29, 0x80	; 128
     4c8:	1d c0       	rjmp	.+58     	; 0x504 <DoLEDtest+0x7a>
     4ca:	8d 2f       	mov	r24, r29
     4cc:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
     4d0:	cf 5f       	subi	r28, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <DoLEDtest+0x4c>
     4d4:	c0 e0       	ldi	r28, 0x00	; 0
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
     4de:	08 2e       	mov	r0, r24
     4e0:	00 0c       	add	r0, r0
     4e2:	99 0b       	sbc	r25, r25
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	84 f3       	brlt	.-32     	; 0x4ca <DoLEDtest+0x40>
     4ea:	0e 94 3e 02 	call	0x47c	; 0x47c <do_rclk>
     4ee:	a8 95       	wdr
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	83 ec       	ldi	r24, 0xC3	; 195
     4f4:	99 e0       	ldi	r25, 0x09	; 9
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <DoLEDtest+0x6c>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <DoLEDtest+0x76>
     500:	00 00       	nop
     502:	d6 95       	lsr	r29
     504:	d1 11       	cpse	r29, r1
     506:	e6 cf       	rjmp	.-52     	; 0x4d4 <DoLEDtest+0x4a>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <TLC_special_mode>:
     50e:	82 b1       	in	r24, 0x02	; 2
     510:	84 60       	ori	r24, 0x04	; 4
     512:	82 b9       	out	0x02, r24	; 2
     514:	82 b1       	in	r24, 0x02	; 2
     516:	87 7f       	andi	r24, 0xF7	; 247
     518:	82 b9       	out	0x02, r24	; 2
     51a:	82 b1       	in	r24, 0x02	; 2
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	82 b9       	out	0x02, r24	; 2
     520:	82 b1       	in	r24, 0x02	; 2
     522:	8d 7f       	andi	r24, 0xFD	; 253
     524:	82 b9       	out	0x02, r24	; 2
     526:	82 b1       	in	r24, 0x02	; 2
     528:	8b 7f       	andi	r24, 0xFB	; 251
     52a:	82 b9       	out	0x02, r24	; 2
     52c:	82 b1       	in	r24, 0x02	; 2
     52e:	82 60       	ori	r24, 0x02	; 2
     530:	82 b9       	out	0x02, r24	; 2
     532:	82 b1       	in	r24, 0x02	; 2
     534:	8d 7f       	andi	r24, 0xFD	; 253
     536:	82 b9       	out	0x02, r24	; 2
     538:	82 b1       	in	r24, 0x02	; 2
     53a:	84 60       	ori	r24, 0x04	; 4
     53c:	82 b9       	out	0x02, r24	; 2
     53e:	82 b1       	in	r24, 0x02	; 2
     540:	82 60       	ori	r24, 0x02	; 2
     542:	82 b9       	out	0x02, r24	; 2
     544:	82 b1       	in	r24, 0x02	; 2
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	82 b9       	out	0x02, r24	; 2
     54a:	82 b1       	in	r24, 0x02	; 2
     54c:	88 60       	ori	r24, 0x08	; 8
     54e:	82 b9       	out	0x02, r24	; 2
     550:	82 b1       	in	r24, 0x02	; 2
     552:	82 60       	ori	r24, 0x02	; 2
     554:	82 b9       	out	0x02, r24	; 2
     556:	82 b1       	in	r24, 0x02	; 2
     558:	8d 7f       	andi	r24, 0xFD	; 253
     55a:	82 b9       	out	0x02, r24	; 2
     55c:	82 b1       	in	r24, 0x02	; 2
     55e:	87 7f       	andi	r24, 0xF7	; 247
     560:	82 b9       	out	0x02, r24	; 2
     562:	82 b1       	in	r24, 0x02	; 2
     564:	82 60       	ori	r24, 0x02	; 2
     566:	82 b9       	out	0x02, r24	; 2
     568:	82 b1       	in	r24, 0x02	; 2
     56a:	8d 7f       	andi	r24, 0xFD	; 253
     56c:	82 b9       	out	0x02, r24	; 2
     56e:	08 95       	ret

00000570 <TLC_normal_mode>:
     570:	82 b1       	in	r24, 0x02	; 2
     572:	84 60       	ori	r24, 0x04	; 4
     574:	82 b9       	out	0x02, r24	; 2
     576:	82 b1       	in	r24, 0x02	; 2
     578:	87 7f       	andi	r24, 0xF7	; 247
     57a:	82 b9       	out	0x02, r24	; 2
     57c:	82 b1       	in	r24, 0x02	; 2
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	82 b9       	out	0x02, r24	; 2
     582:	82 b1       	in	r24, 0x02	; 2
     584:	8d 7f       	andi	r24, 0xFD	; 253
     586:	82 b9       	out	0x02, r24	; 2
     588:	82 b1       	in	r24, 0x02	; 2
     58a:	8b 7f       	andi	r24, 0xFB	; 251
     58c:	82 b9       	out	0x02, r24	; 2
     58e:	82 b1       	in	r24, 0x02	; 2
     590:	82 60       	ori	r24, 0x02	; 2
     592:	82 b9       	out	0x02, r24	; 2
     594:	82 b1       	in	r24, 0x02	; 2
     596:	8d 7f       	andi	r24, 0xFD	; 253
     598:	82 b9       	out	0x02, r24	; 2
     59a:	82 b1       	in	r24, 0x02	; 2
     59c:	84 60       	ori	r24, 0x04	; 4
     59e:	82 b9       	out	0x02, r24	; 2
     5a0:	82 b1       	in	r24, 0x02	; 2
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	82 b9       	out	0x02, r24	; 2
     5a6:	82 b1       	in	r24, 0x02	; 2
     5a8:	8d 7f       	andi	r24, 0xFD	; 253
     5aa:	82 b9       	out	0x02, r24	; 2
     5ac:	82 b1       	in	r24, 0x02	; 2
     5ae:	82 60       	ori	r24, 0x02	; 2
     5b0:	82 b9       	out	0x02, r24	; 2
     5b2:	82 b1       	in	r24, 0x02	; 2
     5b4:	8d 7f       	andi	r24, 0xFD	; 253
     5b6:	82 b9       	out	0x02, r24	; 2
     5b8:	82 b1       	in	r24, 0x02	; 2
     5ba:	82 60       	ori	r24, 0x02	; 2
     5bc:	82 b9       	out	0x02, r24	; 2
     5be:	82 b1       	in	r24, 0x02	; 2
     5c0:	8d 7f       	andi	r24, 0xFD	; 253
     5c2:	82 b9       	out	0x02, r24	; 2
     5c4:	82 b1       	in	r24, 0x02	; 2
     5c6:	8b 7f       	andi	r24, 0xFB	; 251
     5c8:	82 b9       	out	0x02, r24	; 2
     5ca:	08 95       	ret

000005cc <TLC_config_byte>:
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	d8 2f       	mov	r29, r24
     5d2:	c6 2f       	mov	r28, r22
     5d4:	0e 94 87 02 	call	0x50e	; 0x50e <TLC_special_mode>
     5d8:	80 e1       	ldi	r24, 0x10	; 16
     5da:	d8 9f       	mul	r29, r24
     5dc:	a0 01       	movw	r20, r0
     5de:	11 24       	eor	r1, r1
     5e0:	4f 3f       	cpi	r20, 0xFF	; 255
     5e2:	51 05       	cpc	r21, r1
     5e4:	19 f1       	breq	.+70     	; 0x62c <TLC_config_byte+0x60>
     5e6:	10 f1       	brcs	.+68     	; 0x62c <TLC_config_byte+0x60>
     5e8:	4f ef       	ldi	r20, 0xFF	; 255
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	1f c0       	rjmp	.+62     	; 0x62c <TLC_config_byte+0x60>
     5ee:	24 2f       	mov	r18, r20
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	16 c0       	rjmp	.+44     	; 0x620 <TLC_config_byte+0x54>
     5f4:	87 30       	cpi	r24, 0x07	; 7
     5f6:	19 f4       	brne	.+6      	; 0x5fe <TLC_config_byte+0x32>
     5f8:	92 b1       	in	r25, 0x02	; 2
     5fa:	98 60       	ori	r25, 0x08	; 8
     5fc:	92 b9       	out	0x02, r25	; 2
     5fe:	20 ff       	sbrs	r18, 0
     600:	04 c0       	rjmp	.+8      	; 0x60a <TLC_config_byte+0x3e>
     602:	92 b1       	in	r25, 0x02	; 2
     604:	91 60       	ori	r25, 0x01	; 1
     606:	92 b9       	out	0x02, r25	; 2
     608:	03 c0       	rjmp	.+6      	; 0x610 <TLC_config_byte+0x44>
     60a:	92 b1       	in	r25, 0x02	; 2
     60c:	9e 7f       	andi	r25, 0xFE	; 254
     60e:	92 b9       	out	0x02, r25	; 2
     610:	92 b1       	in	r25, 0x02	; 2
     612:	92 60       	ori	r25, 0x02	; 2
     614:	92 b9       	out	0x02, r25	; 2
     616:	92 b1       	in	r25, 0x02	; 2
     618:	9d 7f       	andi	r25, 0xFD	; 253
     61a:	92 b9       	out	0x02, r25	; 2
     61c:	26 95       	lsr	r18
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	40 f3       	brcs	.-48     	; 0x5f4 <TLC_config_byte+0x28>
     624:	82 b1       	in	r24, 0x02	; 2
     626:	87 7f       	andi	r24, 0xF7	; 247
     628:	82 b9       	out	0x02, r24	; 2
     62a:	c1 50       	subi	r28, 0x01	; 1
     62c:	c1 11       	cpse	r28, r1
     62e:	df cf       	rjmp	.-66     	; 0x5ee <TLC_config_byte+0x22>
     630:	0e 94 b8 02 	call	0x570	; 0x570 <TLC_normal_mode>
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <RC5_Reset>:
     63a:	a8 95       	wdr
     63c:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <has_new>
     640:	8e e0       	ldi	r24, 0x0E	; 14
     642:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <ccounter>
     646:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <command+0x1>
     64a:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <command>
     64e:	85 e0       	ldi	r24, 0x05	; 5
     650:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
     654:	8d b3       	in	r24, 0x1d	; 29
     656:	84 60       	ori	r24, 0x04	; 4
     658:	8d bb       	out	0x1d, r24	; 29
     65a:	08 95       	ret

0000065c <RC5_Init>:
     65c:	e9 e6       	ldi	r30, 0x69	; 105
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	80 61       	ori	r24, 0x10	; 16
     664:	80 83       	st	Z, r24
     666:	84 b1       	in	r24, 0x04	; 4
     668:	8b 7f       	andi	r24, 0xFB	; 251
     66a:	84 b9       	out	0x04, r24	; 4
     66c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     676:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
     67a:	08 95       	ret

0000067c <RC5_NewCommandReceived>:
     67c:	fc 01       	movw	r30, r24
     67e:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <has_new>
     682:	99 23       	and	r25, r25
     684:	31 f0       	breq	.+12     	; 0x692 <RC5_NewCommandReceived+0x16>
     686:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <command>
     68a:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <command+0x1>
     68e:	91 83       	std	Z+1, r25	; 0x01
     690:	80 83       	st	Z, r24
     692:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <has_new>
     696:	08 95       	ret

00000698 <Reset_Modbus_Timeout>:
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	99 bb       	out	0x19, r25	; 25
     69c:	2e b1       	in	r18, 0x0e	; 14
     69e:	80 e4       	ldi	r24, 0x40	; 64
     6a0:	82 27       	eor	r24, r18
     6a2:	8e b9       	out	0x0e, r24	; 14
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e8       	ldi	r19, 0x80	; 128
     6a8:	30 93 a5 00 	sts	0x00A5, r19	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
     6ac:	20 93 a4 00 	sts	0x00A4, r18	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
     6b6:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <__TEXT_REGION_LENGTH__+0x7f8072>
     6ba:	08 95       	ret

000006bc <Put_CRC>:
     6bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6c4:	28 27       	eor	r18, r24
     6c6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6ca:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     6ce:	28 e0       	ldi	r18, 0x08	; 8
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	19 c0       	rjmp	.+50     	; 0x706 <Put_CRC+0x4a>
     6d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6dc:	80 ff       	sbrs	r24, 0
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <Put_CRC+0x3a>
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	84 27       	eor	r24, r20
     6e8:	40 ea       	ldi	r20, 0xA0	; 160
     6ea:	94 27       	eor	r25, r20
     6ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <Put_CRC+0x46>
     6f6:	96 95       	lsr	r25
     6f8:	87 95       	ror	r24
     6fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     702:	21 50       	subi	r18, 0x01	; 1
     704:	31 09       	sbc	r19, r1
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	21 f7       	brne	.-56     	; 0x6d4 <Put_CRC+0x18>
     70c:	08 95       	ret

0000070e <Check_MDdata_Length>:
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	71 97       	sbiw	r30, 0x11	; 17
     714:	e0 34       	cpi	r30, 0x40	; 64
     716:	f1 05       	cpc	r31, r1
     718:	88 f4       	brcc	.+34     	; 0x73c <Check_MDdata_Length+0x2e>
     71a:	ea 59       	subi	r30, 0x9A	; 154
     71c:	ff 4f       	sbci	r31, 0xFF	; 255
     71e:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	08 95       	ret
     726:	83 e0       	ldi	r24, 0x03	; 3
     728:	08 95       	ret
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	08 95       	ret
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	08 95       	ret
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	08 95       	ret
     736:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
     73a:	08 95       	ret
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	08 95       	ret
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	08 95       	ret

00000744 <OWReset>:
     744:	fc 01       	movw	r30, r24
     746:	a0 81       	ld	r26, Z
     748:	b1 81       	ldd	r27, Z+1	; 0x01
     74a:	4e 91       	ld	r20, -X
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	c9 01       	movw	r24, r18
     752:	02 80       	ldd	r0, Z+2	; 0x02
     754:	02 c0       	rjmp	.+4      	; 0x75a <OWReset+0x16>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	0a 94       	dec	r0
     75c:	e2 f7       	brpl	.-8      	; 0x756 <OWReset+0x12>
     75e:	84 2b       	or	r24, r20
     760:	8c 93       	st	X, r24
     762:	8f eb       	ldi	r24, 0xBF	; 191
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <OWReset+0x22>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <OWReset+0x28>
     76c:	00 00       	nop
     76e:	a0 81       	ld	r26, Z
     770:	b1 81       	ldd	r27, Z+1	; 0x01
     772:	9e 91       	ld	r25, -X
     774:	a9 01       	movw	r20, r18
     776:	02 80       	ldd	r0, Z+2	; 0x02
     778:	02 c0       	rjmp	.+4      	; 0x77e <OWReset+0x3a>
     77a:	44 0f       	add	r20, r20
     77c:	55 1f       	adc	r21, r21
     77e:	0a 94       	dec	r0
     780:	e2 f7       	brpl	.-8      	; 0x77a <OWReset+0x36>
     782:	84 2f       	mov	r24, r20
     784:	80 95       	com	r24
     786:	89 23       	and	r24, r25
     788:	8c 93       	st	X, r24
     78a:	95 ed       	ldi	r25, 0xD5	; 213
     78c:	9a 95       	dec	r25
     78e:	f1 f7       	brne	.-4      	; 0x78c <OWReset+0x48>
     790:	00 00       	nop
     792:	a0 81       	ld	r26, Z
     794:	b1 81       	ldd	r27, Z+1	; 0x01
     796:	12 97       	sbiw	r26, 0x02	; 2
     798:	8c 91       	ld	r24, X
     79a:	02 80       	ldd	r0, Z+2	; 0x02
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <OWReset+0x5e>
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <OWReset+0x5a>
     7a6:	82 23       	and	r24, r18
     7a8:	ef e1       	ldi	r30, 0x1F	; 31
     7aa:	f3 e0       	ldi	r31, 0x03	; 3
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <OWReset+0x68>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <OWReset+0x6e>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <OWWriteBit>:
     7b6:	fc 01       	movw	r30, r24
     7b8:	a0 81       	ld	r26, Z
     7ba:	b1 81       	ldd	r27, Z+1	; 0x01
     7bc:	8e 91       	ld	r24, -X
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	02 80       	ldd	r0, Z+2	; 0x02
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <OWWriteBit+0x14>
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <OWWriteBit+0x10>
     7ce:	28 2b       	or	r18, r24
     7d0:	2c 93       	st	X, r18
     7d2:	66 23       	and	r22, r22
     7d4:	a9 f0       	breq	.+42     	; 0x800 <__DATA_REGION_LENGTH__>
     7d6:	88 e2       	ldi	r24, 0x28	; 40
     7d8:	8a 95       	dec	r24
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <OWWriteBit+0x22>
     7dc:	a0 81       	ld	r26, Z
     7de:	b1 81       	ldd	r27, Z+1	; 0x01
     7e0:	2e 91       	ld	r18, -X
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	02 80       	ldd	r0, Z+2	; 0x02
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <OWWriteBit+0x38>
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	0a 94       	dec	r0
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <OWWriteBit+0x34>
     7f2:	80 95       	com	r24
     7f4:	82 23       	and	r24, r18
     7f6:	8c 93       	st	X, r24
     7f8:	88 e7       	ldi	r24, 0x78	; 120
     7fa:	8a 95       	dec	r24
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <OWWriteBit+0x44>
     7fe:	08 95       	ret
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	8a 95       	dec	r24
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	a0 81       	ld	r26, Z
     808:	b1 81       	ldd	r27, Z+1	; 0x01
     80a:	2e 91       	ld	r18, -X
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	02 80       	ldd	r0, Z+2	; 0x02
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	0a 94       	dec	r0
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	80 95       	com	r24
     81e:	82 23       	and	r24, r18
     820:	8c 93       	st	X, r24
     822:	08 95       	ret

00000824 <OWReadBit>:
     824:	fc 01       	movw	r30, r24
     826:	a0 81       	ld	r26, Z
     828:	b1 81       	ldd	r27, Z+1	; 0x01
     82a:	4e 91       	ld	r20, -X
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	9c 01       	movw	r18, r24
     832:	02 80       	ldd	r0, Z+2	; 0x02
     834:	02 c0       	rjmp	.+4      	; 0x83a <OWReadBit+0x16>
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <OWReadBit+0x12>
     83e:	24 2b       	or	r18, r20
     840:	2c 93       	st	X, r18
     842:	2a e0       	ldi	r18, 0x0A	; 10
     844:	2a 95       	dec	r18
     846:	f1 f7       	brne	.-4      	; 0x844 <OWReadBit+0x20>
     848:	00 c0       	rjmp	.+0      	; 0x84a <OWReadBit+0x26>
     84a:	a0 81       	ld	r26, Z
     84c:	b1 81       	ldd	r27, Z+1	; 0x01
     84e:	2e 91       	ld	r18, -X
     850:	02 80       	ldd	r0, Z+2	; 0x02
     852:	02 c0       	rjmp	.+4      	; 0x858 <OWReadBit+0x34>
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	0a 94       	dec	r0
     85a:	e2 f7       	brpl	.-8      	; 0x854 <OWReadBit+0x30>
     85c:	80 95       	com	r24
     85e:	82 23       	and	r24, r18
     860:	8c 93       	st	X, r24
     862:	85 e1       	ldi	r24, 0x15	; 21
     864:	8a 95       	dec	r24
     866:	f1 f7       	brne	.-4      	; 0x864 <OWReadBit+0x40>
     868:	00 00       	nop
     86a:	a0 81       	ld	r26, Z
     86c:	b1 81       	ldd	r27, Z+1	; 0x01
     86e:	12 97       	sbiw	r26, 0x02	; 2
     870:	8c 91       	ld	r24, X
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	02 80       	ldd	r0, Z+2	; 0x02
     876:	02 c0       	rjmp	.+4      	; 0x87c <OWReadBit+0x58>
     878:	95 95       	asr	r25
     87a:	87 95       	ror	r24
     87c:	0a 94       	dec	r0
     87e:	e2 f7       	brpl	.-8      	; 0x878 <OWReadBit+0x54>
     880:	80 fd       	sbrc	r24, 0
     882:	02 c0       	rjmp	.+4      	; 0x888 <OWReadBit+0x64>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	01 c0       	rjmp	.+2      	; 0x88a <OWReadBit+0x66>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e8       	ldi	r25, 0x80	; 128
     88c:	9a 95       	dec	r25
     88e:	f1 f7       	brne	.-4      	; 0x88c <OWReadBit+0x68>
     890:	08 95       	ret

00000892 <OWWriteByte>:
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	8c 01       	movw	r16, r24
     89c:	d6 2f       	mov	r29, r22
     89e:	c1 e0       	ldi	r28, 0x01	; 1
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <OWWriteByte+0x1c>
     8a2:	6c 2f       	mov	r22, r28
     8a4:	6d 23       	and	r22, r29
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OWWriteBit>
     8ac:	cc 0f       	add	r28, r28
     8ae:	c1 11       	cpse	r28, r1
     8b0:	f8 cf       	rjmp	.-16     	; 0x8a2 <OWWriteByte+0x10>
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <OWReadByte>:
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	8c 01       	movw	r16, r24
     8c6:	c1 e0       	ldi	r28, 0x01	; 1
     8c8:	d0 e0       	ldi	r29, 0x00	; 0
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <OWReadByte+0x1c>
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 12 04 	call	0x824	; 0x824 <OWReadBit>
     8d2:	81 11       	cpse	r24, r1
     8d4:	dc 2b       	or	r29, r28
     8d6:	cc 0f       	add	r28, r28
     8d8:	c1 11       	cpse	r28, r1
     8da:	f8 cf       	rjmp	.-16     	; 0x8cc <OWReadByte+0x10>
     8dc:	8d 2f       	mov	r24, r29
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <OWCheckCRC>:
     8e8:	ac 01       	movw	r20, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xb>
     8f0:	fa 01       	movw	r30, r20
     8f2:	e2 0f       	add	r30, r18
     8f4:	f1 1d       	adc	r31, r1
     8f6:	90 81       	ld	r25, Z
     8f8:	89 27       	eor	r24, r25
     8fa:	98 e0       	ldi	r25, 0x08	; 8
     8fc:	3c e8       	ldi	r19, 0x8C	; 140
     8fe:	86 95       	lsr	r24
     900:	08 f4       	brcc	.+2      	; 0x904 <__stack+0x5>
     902:	83 27       	eor	r24, r19
     904:	9a 95       	dec	r25
     906:	d9 f7       	brne	.-10     	; 0x8fe <OWCheckCRC+0x16>
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	26 17       	cp	r18, r22
     90c:	88 f3       	brcs	.-30     	; 0x8f0 <OWCheckCRC+0x8>
     90e:	08 95       	ret

00000910 <DS18x20_ReadROM>:
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	7c 01       	movw	r14, r24
     91c:	63 e3       	ldi	r22, 0x33	; 51
     91e:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	0a c0       	rjmp	.+20     	; 0x93a <DS18x20_ReadROM+0x2a>
     926:	0c 2f       	mov	r16, r28
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	c7 01       	movw	r24, r14
     92c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <OWReadByte>
     930:	f7 01       	movw	r30, r14
     932:	e0 0f       	add	r30, r16
     934:	f1 1f       	adc	r31, r17
     936:	83 83       	std	Z+3, r24	; 0x03
     938:	cf 5f       	subi	r28, 0xFF	; 255
     93a:	c8 30       	cpi	r28, 0x08	; 8
     93c:	a0 f3       	brcs	.-24     	; 0x926 <DS18x20_ReadROM+0x16>
     93e:	67 e0       	ldi	r22, 0x07	; 7
     940:	c7 01       	movw	r24, r14
     942:	03 96       	adiw	r24, 0x03	; 3
     944:	0e 94 74 04 	call	0x8e8	; 0x8e8 <OWCheckCRC>
     948:	f7 01       	movw	r30, r14
     94a:	92 85       	ldd	r25, Z+10	; 0x0a
     94c:	89 13       	cpse	r24, r25
     94e:	02 c0       	rjmp	.+4      	; 0x954 <DS18x20_ReadROM+0x44>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	01 c0       	rjmp	.+2      	; 0x956 <DS18x20_ReadROM+0x46>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	08 95       	ret

00000962 <DS18x20_Init>:
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	79 83       	std	Y+1, r23	; 0x01
     96c:	68 83       	st	Y, r22
     96e:	4a 83       	std	Y+2, r20	; 0x02
     970:	fb 01       	movw	r30, r22
     972:	30 81       	ld	r19, Z
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	02 c0       	rjmp	.+4      	; 0x980 <DS18x20_Init+0x1e>
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	4a 95       	dec	r20
     982:	e2 f7       	brpl	.-8      	; 0x97c <DS18x20_Init+0x1a>
     984:	2e 2f       	mov	r18, r30
     986:	20 95       	com	r18
     988:	23 23       	and	r18, r19
     98a:	fb 01       	movw	r30, r22
     98c:	20 83       	st	Z, r18
     98e:	e8 81       	ld	r30, Y
     990:	f9 81       	ldd	r31, Y+1	; 0x01
     992:	22 91       	ld	r18, -Z
     994:	0a 80       	ldd	r0, Y+2	; 0x02
     996:	02 c0       	rjmp	.+4      	; 0x99c <DS18x20_Init+0x3a>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <DS18x20_Init+0x36>
     9a0:	80 95       	com	r24
     9a2:	82 23       	and	r24, r18
     9a4:	80 83       	st	Z, r24
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     9ac:	18 2f       	mov	r17, r24
     9ae:	81 11       	cpse	r24, r1
     9b0:	11 c0       	rjmp	.+34     	; 0x9d4 <DS18x20_Init+0x72>
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 88 04 	call	0x910	; 0x910 <DS18x20_ReadROM>
     9b8:	88 23       	and	r24, r24
     9ba:	71 f0       	breq	.+28     	; 0x9d8 <DS18x20_Init+0x76>
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	80 31       	cpi	r24, 0x10	; 16
     9c0:	39 f0       	breq	.+14     	; 0x9d0 <DS18x20_Init+0x6e>
     9c2:	88 32       	cpi	r24, 0x28	; 40
     9c4:	59 f4       	brne	.+22     	; 0x9dc <DS18x20_Init+0x7a>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	8c 8b       	std	Y+20, r24	; 0x14
     9ca:	8f e7       	ldi	r24, 0x7F	; 127
     9cc:	8f 87       	std	Y+15, r24	; 0x0f
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <DS18x20_Init+0x7c>
     9d0:	1c 8a       	std	Y+20, r1	; 0x14
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <DS18x20_Init+0x7c>
     9d4:	11 e0       	ldi	r17, 0x01	; 1
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <DS18x20_Init+0x7c>
     9d8:	11 e0       	ldi	r17, 0x01	; 1
     9da:	01 c0       	rjmp	.+2      	; 0x9de <DS18x20_Init+0x7c>
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	81 2f       	mov	r24, r17
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	08 95       	ret

000009e8 <DS18x20_ReadScratchPad>:
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	7c 01       	movw	r14, r24
     9f4:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     9f8:	6c ec       	ldi	r22, 0xCC	; 204
     9fa:	c7 01       	movw	r24, r14
     9fc:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a00:	6e eb       	ldi	r22, 0xBE	; 190
     a02:	c7 01       	movw	r24, r14
     a04:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <DS18x20_ReadScratchPad+0x38>
     a0c:	0c 2f       	mov	r16, r28
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	c7 01       	movw	r24, r14
     a12:	0e 94 5e 04 	call	0x8bc	; 0x8bc <OWReadByte>
     a16:	f7 01       	movw	r30, r14
     a18:	e0 0f       	add	r30, r16
     a1a:	f1 1f       	adc	r31, r17
     a1c:	83 87       	std	Z+11, r24	; 0x0b
     a1e:	cf 5f       	subi	r28, 0xFF	; 255
     a20:	c9 30       	cpi	r28, 0x09	; 9
     a22:	a0 f3       	brcs	.-24     	; 0xa0c <DS18x20_ReadScratchPad+0x24>
     a24:	68 e0       	ldi	r22, 0x08	; 8
     a26:	c7 01       	movw	r24, r14
     a28:	0b 96       	adiw	r24, 0x0b	; 11
     a2a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <OWCheckCRC>
     a2e:	f7 01       	movw	r30, r14
     a30:	93 89       	ldd	r25, Z+19	; 0x13
     a32:	89 13       	cpse	r24, r25
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DS18x20_ReadScratchPad+0x52>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <DS18x20_ReadScratchPad+0x54>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	08 95       	ret

00000a48 <DS18x20_MeasureTemperature>:
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
     a4e:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     a52:	6c ec       	ldi	r22, 0xCC	; 204
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a5a:	64 e4       	ldi	r22, 0x44	; 68
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	8f 33       	cpi	r24, 0x3F	; 63
     a66:	71 f0       	breq	.+28     	; 0xa84 <DS18x20_MeasureTemperature+0x3c>
     a68:	8f 35       	cpi	r24, 0x5F	; 95
     a6a:	b1 f0       	breq	.+44     	; 0xa98 <DS18x20_MeasureTemperature+0x50>
     a6c:	8f 31       	cpi	r24, 0x1F	; 31
     a6e:	f1 f4       	brne	.+60     	; 0xaac <DS18x20_MeasureTemperature+0x64>
     a70:	2f e7       	ldi	r18, 0x7F	; 127
     a72:	8b e4       	ldi	r24, 0x4B	; 75
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <DS18x20_MeasureTemperature+0x2e>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <DS18x20_MeasureTemperature+0x38>
     a80:	00 00       	nop
     a82:	1d c0       	rjmp	.+58     	; 0xabe <DS18x20_MeasureTemperature+0x76>
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	86 e9       	ldi	r24, 0x96	; 150
     a88:	94 e0       	ldi	r25, 0x04	; 4
     a8a:	21 50       	subi	r18, 0x01	; 1
     a8c:	80 40       	sbci	r24, 0x00	; 0
     a8e:	90 40       	sbci	r25, 0x00	; 0
     a90:	e1 f7       	brne	.-8      	; 0xa8a <DS18x20_MeasureTemperature+0x42>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <DS18x20_MeasureTemperature+0x4c>
     a94:	00 00       	nop
     a96:	13 c0       	rjmp	.+38     	; 0xabe <DS18x20_MeasureTemperature+0x76>
     a98:	2f eb       	ldi	r18, 0xBF	; 191
     a9a:	87 e2       	ldi	r24, 0x27	; 39
     a9c:	99 e0       	ldi	r25, 0x09	; 9
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <DS18x20_MeasureTemperature+0x56>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <DS18x20_MeasureTemperature+0x60>
     aa8:	00 00       	nop
     aaa:	09 c0       	rjmp	.+18     	; 0xabe <DS18x20_MeasureTemperature+0x76>
     aac:	2f e7       	ldi	r18, 0x7F	; 127
     aae:	8f e4       	ldi	r24, 0x4F	; 79
     ab0:	92 e1       	ldi	r25, 0x12	; 18
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <DS18x20_MeasureTemperature+0x6a>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <DS18x20_MeasureTemperature+0x74>
     abc:	00 00       	nop
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DS18x20_ReadScratchPad>
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <DS18x20_SetResolution>:
     aca:	fc 01       	movw	r30, r24
     acc:	24 89       	ldd	r18, Z+20	; 0x14
     ace:	21 30       	cpi	r18, 0x01	; 1
     ad0:	09 f4       	brne	.+2      	; 0xad4 <DS18x20_SetResolution+0xa>
     ad2:	67 87       	std	Z+15, r22	; 0x0f
     ad4:	08 95       	ret

00000ad6 <DS18x20_WriteScratchpad>:
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24
     adc:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     ae0:	6c ec       	ldi	r22, 0xCC	; 204
     ae2:	ce 01       	movw	r24, r28
     ae4:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     ae8:	6e e4       	ldi	r22, 0x4E	; 78
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     af0:	6d 85       	ldd	r22, Y+13	; 0x0d
     af2:	ce 01       	movw	r24, r28
     af4:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     af8:	6e 85       	ldd	r22, Y+14	; 0x0e
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     b00:	8c 89       	ldd	r24, Y+20	; 0x14
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	21 f4       	brne	.+8      	; 0xb0e <DS18x20_WriteScratchpad+0x38>
     b06:	6f 85       	ldd	r22, Y+15	; 0x0f
     b08:	ce 01       	movw	r24, r28
     b0a:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <DS18x20_TemperatureValue>:
     b14:	fc 01       	movw	r30, r24
     b16:	64 85       	ldd	r22, Z+12	; 0x0c
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	76 2f       	mov	r23, r22
     b1c:	66 27       	eor	r22, r22
     b1e:	83 85       	ldd	r24, Z+11	; 0x0b
     b20:	68 2b       	or	r22, r24
     b22:	77 23       	and	r23, r23
     b24:	14 f0       	brlt	.+4      	; 0xb2a <DS18x20_TemperatureValue+0x16>
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <DS18x20_TemperatureValue+0x18>
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	84 89       	ldd	r24, Z+20	; 0x14
     b2e:	81 11       	cpse	r24, r1
     b30:	0d c0       	rjmp	.+26     	; 0xb4c <DS18x20_TemperatureValue+0x38>
     b32:	07 2e       	mov	r0, r23
     b34:	00 0c       	add	r0, r0
     b36:	88 0b       	sbc	r24, r24
     b38:	99 0b       	sbc	r25, r25
     b3a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__floatsisf>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	5f e3       	ldi	r21, 0x3F	; 63
     b46:	0e 94 8f 24 	call	0x491e	; 0x491e <__mulsf3>
     b4a:	08 95       	ret
     b4c:	87 85       	ldd	r24, Z+15	; 0x0f
     b4e:	8f 33       	cpi	r24, 0x3F	; 63
     b50:	59 f0       	breq	.+22     	; 0xb68 <DS18x20_TemperatureValue+0x54>
     b52:	20 f4       	brcc	.+8      	; 0xb5c <DS18x20_TemperatureValue+0x48>
     b54:	8f 31       	cpi	r24, 0x1F	; 31
     b56:	09 f4       	brne	.+2      	; 0xb5a <DS18x20_TemperatureValue+0x46>
     b58:	56 c0       	rjmp	.+172    	; 0xc06 <DS18x20_TemperatureValue+0xf2>
     b5a:	79 c0       	rjmp	.+242    	; 0xc4e <DS18x20_TemperatureValue+0x13a>
     b5c:	8f 35       	cpi	r24, 0x5F	; 95
     b5e:	31 f1       	breq	.+76     	; 0xbac <DS18x20_TemperatureValue+0x98>
     b60:	8f 37       	cpi	r24, 0x7F	; 127
     b62:	09 f4       	brne	.+2      	; 0xb66 <DS18x20_TemperatureValue+0x52>
     b64:	43 c0       	rjmp	.+134    	; 0xbec <DS18x20_TemperatureValue+0xd8>
     b66:	73 c0       	rjmp	.+230    	; 0xc4e <DS18x20_TemperatureValue+0x13a>
     b68:	ab 01       	movw	r20, r22
     b6a:	77 23       	and	r23, r23
     b6c:	24 f4       	brge	.+8      	; 0xb76 <DS18x20_TemperatureValue+0x62>
     b6e:	44 27       	eor	r20, r20
     b70:	55 27       	eor	r21, r21
     b72:	46 1b       	sub	r20, r22
     b74:	57 0b       	sbc	r21, r23
     b76:	ca 01       	movw	r24, r20
     b78:	99 23       	and	r25, r25
     b7a:	0c f4       	brge	.+2      	; 0xb7e <DS18x20_TemperatureValue+0x6a>
     b7c:	03 96       	adiw	r24, 0x03	; 3
     b7e:	ac 01       	movw	r20, r24
     b80:	55 95       	asr	r21
     b82:	47 95       	ror	r20
     b84:	55 95       	asr	r21
     b86:	47 95       	ror	r20
     b88:	24 03       	mulsu	r18, r20
     b8a:	b0 01       	movw	r22, r0
     b8c:	25 9f       	mul	r18, r21
     b8e:	70 0d       	add	r23, r0
     b90:	11 24       	eor	r1, r1
     b92:	07 2e       	mov	r0, r23
     b94:	00 0c       	add	r0, r0
     b96:	88 0b       	sbc	r24, r24
     b98:	99 0b       	sbc	r25, r25
     b9a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__floatsisf>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5e e3       	ldi	r21, 0x3E	; 62
     ba6:	0e 94 8f 24 	call	0x491e	; 0x491e <__mulsf3>
     baa:	08 95       	ret
     bac:	ab 01       	movw	r20, r22
     bae:	77 23       	and	r23, r23
     bb0:	24 f4       	brge	.+8      	; 0xbba <DS18x20_TemperatureValue+0xa6>
     bb2:	44 27       	eor	r20, r20
     bb4:	55 27       	eor	r21, r21
     bb6:	46 1b       	sub	r20, r22
     bb8:	57 0b       	sbc	r21, r23
     bba:	ca 01       	movw	r24, r20
     bbc:	99 23       	and	r25, r25
     bbe:	0c f4       	brge	.+2      	; 0xbc2 <DS18x20_TemperatureValue+0xae>
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	ac 01       	movw	r20, r24
     bc4:	55 95       	asr	r21
     bc6:	47 95       	ror	r20
     bc8:	24 03       	mulsu	r18, r20
     bca:	b0 01       	movw	r22, r0
     bcc:	25 9f       	mul	r18, r21
     bce:	70 0d       	add	r23, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	07 2e       	mov	r0, r23
     bd4:	00 0c       	add	r0, r0
     bd6:	88 0b       	sbc	r24, r24
     bd8:	99 0b       	sbc	r25, r25
     bda:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__floatsisf>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	5e e3       	ldi	r21, 0x3E	; 62
     be6:	0e 94 8f 24 	call	0x491e	; 0x491e <__mulsf3>
     bea:	08 95       	ret
     bec:	07 2e       	mov	r0, r23
     bee:	00 0c       	add	r0, r0
     bf0:	88 0b       	sbc	r24, r24
     bf2:	99 0b       	sbc	r25, r25
     bf4:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__floatsisf>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5d e3       	ldi	r21, 0x3D	; 61
     c00:	0e 94 8f 24 	call	0x491e	; 0x491e <__mulsf3>
     c04:	08 95       	ret
     c06:	ab 01       	movw	r20, r22
     c08:	77 23       	and	r23, r23
     c0a:	24 f4       	brge	.+8      	; 0xc14 <DS18x20_TemperatureValue+0x100>
     c0c:	44 27       	eor	r20, r20
     c0e:	55 27       	eor	r21, r21
     c10:	46 1b       	sub	r20, r22
     c12:	57 0b       	sbc	r21, r23
     c14:	ca 01       	movw	r24, r20
     c16:	99 23       	and	r25, r25
     c18:	0c f4       	brge	.+2      	; 0xc1c <DS18x20_TemperatureValue+0x108>
     c1a:	07 96       	adiw	r24, 0x07	; 7
     c1c:	ac 01       	movw	r20, r24
     c1e:	55 95       	asr	r21
     c20:	47 95       	ror	r20
     c22:	55 95       	asr	r21
     c24:	47 95       	ror	r20
     c26:	55 95       	asr	r21
     c28:	47 95       	ror	r20
     c2a:	24 03       	mulsu	r18, r20
     c2c:	b0 01       	movw	r22, r0
     c2e:	25 9f       	mul	r18, r21
     c30:	70 0d       	add	r23, r0
     c32:	11 24       	eor	r1, r1
     c34:	07 2e       	mov	r0, r23
     c36:	00 0c       	add	r0, r0
     c38:	88 0b       	sbc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	0e 94 54 24 	call	0x48a8	; 0x48a8 <__floatsisf>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	5f e3       	ldi	r21, 0x3F	; 63
     c48:	0e 94 8f 24 	call	0x491e	; 0x491e <__mulsf3>
     c4c:	08 95       	ret
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	cb 01       	movw	r24, r22
     c54:	08 95       	ret

00000c56 <ds1302_init>:
     c56:	87 b1       	in	r24, 0x07	; 7
     c58:	83 60       	ori	r24, 0x03	; 3
     c5a:	87 b9       	out	0x07, r24	; 7
     c5c:	81 b1       	in	r24, 0x01	; 1
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	81 b9       	out	0x01, r24	; 1
     c62:	08 95       	ret

00000c64 <ds1302_reset>:
     c64:	88 b1       	in	r24, 0x08	; 8
     c66:	8e 7f       	andi	r24, 0xFE	; 254
     c68:	88 b9       	out	0x08, r24	; 8
     c6a:	82 b1       	in	r24, 0x02	; 2
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	82 b9       	out	0x02, r24	; 2
     c70:	82 b1       	in	r24, 0x02	; 2
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	82 b9       	out	0x02, r24	; 2
     c76:	8a e0       	ldi	r24, 0x0A	; 10
     c78:	8a 95       	dec	r24
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <ds1302_reset+0x14>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <ds1302_reset+0x1a>
     c7e:	08 95       	ret

00000c80 <write>:
     c80:	97 b1       	in	r25, 0x07	; 7
     c82:	92 60       	ori	r25, 0x02	; 2
     c84:	97 b9       	out	0x07, r25	; 7
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	18 c0       	rjmp	.+48     	; 0xcba <write+0x3a>
     c8a:	98 b1       	in	r25, 0x08	; 8
     c8c:	9d 7f       	andi	r25, 0xFD	; 253
     c8e:	98 b9       	out	0x08, r25	; 8
     c90:	80 ff       	sbrs	r24, 0
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <write+0x1a>
     c94:	98 b1       	in	r25, 0x08	; 8
     c96:	92 60       	ori	r25, 0x02	; 2
     c98:	98 b9       	out	0x08, r25	; 8
     c9a:	98 b1       	in	r25, 0x08	; 8
     c9c:	9e 7f       	andi	r25, 0xFE	; 254
     c9e:	98 b9       	out	0x08, r25	; 8
     ca0:	95 e0       	ldi	r25, 0x05	; 5
     ca2:	9a 95       	dec	r25
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <write+0x22>
     ca6:	00 00       	nop
     ca8:	98 b1       	in	r25, 0x08	; 8
     caa:	91 60       	ori	r25, 0x01	; 1
     cac:	98 b9       	out	0x08, r25	; 8
     cae:	95 e0       	ldi	r25, 0x05	; 5
     cb0:	9a 95       	dec	r25
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <write+0x30>
     cb4:	00 00       	nop
     cb6:	86 95       	lsr	r24
     cb8:	2f 5f       	subi	r18, 0xFF	; 255
     cba:	28 30       	cpi	r18, 0x08	; 8
     cbc:	30 f3       	brcs	.-52     	; 0xc8a <write+0xa>
     cbe:	08 95       	ret

00000cc0 <ds1302_write_byte>:
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	d8 2f       	mov	r29, r24
     cc6:	c6 2f       	mov	r28, r22
     cc8:	0e 94 32 06 	call	0xc64	; 0xc64 <ds1302_reset>
     ccc:	8d 2f       	mov	r24, r29
     cce:	0e 94 40 06 	call	0xc80	; 0xc80 <write>
     cd2:	8c 2f       	mov	r24, r28
     cd4:	0e 94 40 06 	call	0xc80	; 0xc80 <write>
     cd8:	82 b1       	in	r24, 0x02	; 2
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	82 b9       	out	0x02, r24	; 2
     cde:	88 b1       	in	r24, 0x08	; 8
     ce0:	8e 7f       	andi	r24, 0xFE	; 254
     ce2:	88 b9       	out	0x08, r24	; 8
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <read>:
     cea:	87 b1       	in	r24, 0x07	; 7
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	87 b9       	out	0x07, r24	; 7
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	19 c0       	rjmp	.+50     	; 0xd28 <read+0x3e>
     cf6:	98 b1       	in	r25, 0x08	; 8
     cf8:	91 60       	ori	r25, 0x01	; 1
     cfa:	98 b9       	out	0x08, r25	; 8
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	9a 95       	dec	r25
     d00:	f1 f7       	brne	.-4      	; 0xcfe <read+0x14>
     d02:	00 00       	nop
     d04:	98 b1       	in	r25, 0x08	; 8
     d06:	9e 7f       	andi	r25, 0xFE	; 254
     d08:	98 b9       	out	0x08, r25	; 8
     d0a:	95 e0       	ldi	r25, 0x05	; 5
     d0c:	9a 95       	dec	r25
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <read+0x22>
     d10:	00 00       	nop
     d12:	31 99       	sbic	0x06, 1	; 6
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <read+0x30>
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <read+0x32>
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	97 95       	ror	r25
     d1e:	99 27       	eor	r25, r25
     d20:	97 95       	ror	r25
     d22:	86 95       	lsr	r24
     d24:	89 2b       	or	r24, r25
     d26:	2f 5f       	subi	r18, 0xFF	; 255
     d28:	28 30       	cpi	r18, 0x08	; 8
     d2a:	28 f3       	brcs	.-54     	; 0xcf6 <read+0xc>
     d2c:	08 95       	ret

00000d2e <ds1302_read_byte>:
     d2e:	cf 93       	push	r28
     d30:	c8 2f       	mov	r28, r24
     d32:	0e 94 32 06 	call	0xc64	; 0xc64 <ds1302_reset>
     d36:	8c 2f       	mov	r24, r28
     d38:	0e 94 40 06 	call	0xc80	; 0xc80 <write>
     d3c:	0e 94 75 06 	call	0xcea	; 0xcea <read>
     d40:	92 b1       	in	r25, 0x02	; 2
     d42:	9f 77       	andi	r25, 0x7F	; 127
     d44:	92 b9       	out	0x02, r25	; 2
     d46:	98 b1       	in	r25, 0x08	; 8
     d48:	9e 7f       	andi	r25, 0xFE	; 254
     d4a:	98 b9       	out	0x08, r25	; 8
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <ds1302_comms>:
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
     d56:	2f 30       	cpi	r18, 0x0F	; 15
     d58:	a1 f5       	brne	.+104    	; 0xdc2 <ds1302_comms+0x72>
     d5a:	64 31       	cpi	r22, 0x14	; 20
     d5c:	29 f4       	brne	.+10     	; 0xd68 <ds1302_comms+0x18>
     d5e:	81 e8       	ldi	r24, 0x81	; 129
     d60:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d64:	88 83       	st	Y, r24
     d66:	9e c0       	rjmp	.+316    	; 0xea4 <ds1302_comms+0x154>
     d68:	65 31       	cpi	r22, 0x15	; 21
     d6a:	29 f4       	brne	.+10     	; 0xd76 <ds1302_comms+0x26>
     d6c:	83 e8       	ldi	r24, 0x83	; 131
     d6e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	97 c0       	rjmp	.+302    	; 0xea4 <ds1302_comms+0x154>
     d76:	66 31       	cpi	r22, 0x16	; 22
     d78:	39 f4       	brne	.+14     	; 0xd88 <ds1302_comms+0x38>
     d7a:	85 e8       	ldi	r24, 0x85	; 133
     d7c:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d80:	9c e0       	ldi	r25, 0x0C	; 12
     d82:	9f 83       	std	Y+7, r25	; 0x07
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	8e c0       	rjmp	.+284    	; 0xea4 <ds1302_comms+0x154>
     d88:	6b 31       	cpi	r22, 0x1B	; 27
     d8a:	29 f4       	brne	.+10     	; 0xd96 <ds1302_comms+0x46>
     d8c:	8b e8       	ldi	r24, 0x8B	; 139
     d8e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	87 c0       	rjmp	.+270    	; 0xea4 <ds1302_comms+0x154>
     d96:	67 31       	cpi	r22, 0x17	; 23
     d98:	29 f4       	brne	.+10     	; 0xda4 <ds1302_comms+0x54>
     d9a:	87 e8       	ldi	r24, 0x87	; 135
     d9c:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     da0:	8c 83       	std	Y+4, r24	; 0x04
     da2:	80 c0       	rjmp	.+256    	; 0xea4 <ds1302_comms+0x154>
     da4:	68 31       	cpi	r22, 0x18	; 24
     da6:	29 f4       	brne	.+10     	; 0xdb2 <ds1302_comms+0x62>
     da8:	89 e8       	ldi	r24, 0x89	; 137
     daa:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	79 c0       	rjmp	.+242    	; 0xea4 <ds1302_comms+0x154>
     db2:	69 31       	cpi	r22, 0x19	; 25
     db4:	09 f0       	breq	.+2      	; 0xdb8 <ds1302_comms+0x68>
     db6:	76 c0       	rjmp	.+236    	; 0xea4 <ds1302_comms+0x154>
     db8:	8d e8       	ldi	r24, 0x8D	; 141
     dba:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     dbe:	8e 83       	std	Y+6, r24	; 0x06
     dc0:	71 c0       	rjmp	.+226    	; 0xea4 <ds1302_comms+0x154>
     dc2:	20 31       	cpi	r18, 0x10	; 16
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <ds1302_comms+0x78>
     dc6:	6e c0       	rjmp	.+220    	; 0xea4 <ds1302_comms+0x154>
     dc8:	64 31       	cpi	r22, 0x14	; 20
     dca:	29 f4       	brne	.+10     	; 0xdd6 <ds1302_comms+0x86>
     dcc:	64 2f       	mov	r22, r20
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     dd4:	67 c0       	rjmp	.+206    	; 0xea4 <ds1302_comms+0x154>
     dd6:	65 31       	cpi	r22, 0x15	; 21
     dd8:	29 f4       	brne	.+10     	; 0xde4 <ds1302_comms+0x94>
     dda:	64 2f       	mov	r22, r20
     ddc:	82 e8       	ldi	r24, 0x82	; 130
     dde:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     de2:	60 c0       	rjmp	.+192    	; 0xea4 <ds1302_comms+0x154>
     de4:	66 31       	cpi	r22, 0x16	; 22
     de6:	e1 f5       	brne	.+120    	; 0xe60 <ds1302_comms+0x110>
     de8:	8f 81       	ldd	r24, Y+7	; 0x07
     dea:	8a 30       	cpi	r24, 0x0A	; 10
     dec:	c1 f4       	brne	.+48     	; 0xe1e <ds1302_comms+0xce>
     dee:	8d ec       	ldi	r24, 0xCD	; 205
     df0:	48 9f       	mul	r20, r24
     df2:	81 2d       	mov	r24, r1
     df4:	11 24       	eor	r1, r1
     df6:	86 95       	lsr	r24
     df8:	86 95       	lsr	r24
     dfa:	86 95       	lsr	r24
     dfc:	90 e1       	ldi	r25, 0x10	; 16
     dfe:	89 9f       	mul	r24, r25
     e00:	b0 01       	movw	r22, r0
     e02:	11 24       	eor	r1, r1
     e04:	60 71       	andi	r22, 0x10	; 16
     e06:	88 0f       	add	r24, r24
     e08:	98 2f       	mov	r25, r24
     e0a:	99 0f       	add	r25, r25
     e0c:	99 0f       	add	r25, r25
     e0e:	89 0f       	add	r24, r25
     e10:	48 1b       	sub	r20, r24
     e12:	64 2b       	or	r22, r20
     e14:	60 68       	ori	r22, 0x80	; 128
     e16:	84 e8       	ldi	r24, 0x84	; 132
     e18:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e1c:	43 c0       	rjmp	.+134    	; 0xea4 <ds1302_comms+0x154>
     e1e:	8b 30       	cpi	r24, 0x0B	; 11
     e20:	c1 f4       	brne	.+48     	; 0xe52 <ds1302_comms+0x102>
     e22:	8d ec       	ldi	r24, 0xCD	; 205
     e24:	48 9f       	mul	r20, r24
     e26:	81 2d       	mov	r24, r1
     e28:	11 24       	eor	r1, r1
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	86 95       	lsr	r24
     e30:	90 e1       	ldi	r25, 0x10	; 16
     e32:	89 9f       	mul	r24, r25
     e34:	b0 01       	movw	r22, r0
     e36:	11 24       	eor	r1, r1
     e38:	60 71       	andi	r22, 0x10	; 16
     e3a:	88 0f       	add	r24, r24
     e3c:	98 2f       	mov	r25, r24
     e3e:	99 0f       	add	r25, r25
     e40:	99 0f       	add	r25, r25
     e42:	89 0f       	add	r24, r25
     e44:	48 1b       	sub	r20, r24
     e46:	64 2b       	or	r22, r20
     e48:	60 6a       	ori	r22, 0xA0	; 160
     e4a:	84 e8       	ldi	r24, 0x84	; 132
     e4c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e50:	29 c0       	rjmp	.+82     	; 0xea4 <ds1302_comms+0x154>
     e52:	8c 30       	cpi	r24, 0x0C	; 12
     e54:	39 f5       	brne	.+78     	; 0xea4 <ds1302_comms+0x154>
     e56:	64 2f       	mov	r22, r20
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e5e:	22 c0       	rjmp	.+68     	; 0xea4 <ds1302_comms+0x154>
     e60:	6b 31       	cpi	r22, 0x1B	; 27
     e62:	29 f4       	brne	.+10     	; 0xe6e <ds1302_comms+0x11e>
     e64:	64 2f       	mov	r22, r20
     e66:	8a e8       	ldi	r24, 0x8A	; 138
     e68:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <ds1302_comms+0x154>
     e6e:	67 31       	cpi	r22, 0x17	; 23
     e70:	29 f4       	brne	.+10     	; 0xe7c <ds1302_comms+0x12c>
     e72:	64 2f       	mov	r22, r20
     e74:	86 e8       	ldi	r24, 0x86	; 134
     e76:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e7a:	14 c0       	rjmp	.+40     	; 0xea4 <ds1302_comms+0x154>
     e7c:	68 31       	cpi	r22, 0x18	; 24
     e7e:	29 f4       	brne	.+10     	; 0xe8a <ds1302_comms+0x13a>
     e80:	64 2f       	mov	r22, r20
     e82:	88 e8       	ldi	r24, 0x88	; 136
     e84:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e88:	0d c0       	rjmp	.+26     	; 0xea4 <ds1302_comms+0x154>
     e8a:	69 31       	cpi	r22, 0x19	; 25
     e8c:	29 f4       	brne	.+10     	; 0xe98 <ds1302_comms+0x148>
     e8e:	64 2f       	mov	r22, r20
     e90:	8c e8       	ldi	r24, 0x8C	; 140
     e92:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <ds1302_comms+0x154>
     e98:	6a 31       	cpi	r22, 0x1A	; 26
     e9a:	21 f4       	brne	.+8      	; 0xea4 <ds1302_comms+0x154>
     e9c:	64 2f       	mov	r22, r20
     e9e:	8e e8       	ldi	r24, 0x8E	; 142
     ea0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <ds1302_update_time>:
     eaa:	2f e0       	ldi	r18, 0x0F	; 15
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 a8 06 	call	0xd50	; 0xd50 <ds1302_comms>
     eb2:	08 95       	ret

00000eb4 <ds1302_update>:
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
     eba:	64 e1       	ldi	r22, 0x14	; 20
     ebc:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ec0:	65 e1       	ldi	r22, 0x15	; 21
     ec2:	ce 01       	movw	r24, r28
     ec4:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ec8:	66 e1       	ldi	r22, 0x16	; 22
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ed0:	6b e1       	ldi	r22, 0x1B	; 27
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ed8:	67 e1       	ldi	r22, 0x17	; 23
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ee0:	68 e1       	ldi	r22, 0x18	; 24
     ee2:	ce 01       	movw	r24, r28
     ee4:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ee8:	69 e1       	ldi	r22, 0x19	; 25
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <ds1302_set_time>:
     ef6:	20 e1       	ldi	r18, 0x10	; 16
     ef8:	0e 94 a8 06 	call	0xd50	; 0xd50 <ds1302_comms>
     efc:	08 95       	ret

00000efe <ds1302_write_time>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	6a e1       	ldi	r22, 0x1A	; 26
     f08:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f0c:	4a 81       	ldd	r20, Y+2	; 0x02
     f0e:	66 e1       	ldi	r22, 0x16	; 22
     f10:	ce 01       	movw	r24, r28
     f12:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f16:	49 81       	ldd	r20, Y+1	; 0x01
     f18:	65 e1       	ldi	r22, 0x15	; 21
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f20:	48 81       	ld	r20, Y
     f22:	64 e1       	ldi	r22, 0x14	; 20
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	6a e1       	ldi	r22, 0x1A	; 26
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <ds1302_write_date>:
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	ec 01       	movw	r28, r24
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	6a e1       	ldi	r22, 0x1A	; 26
     f44:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f48:	4e 81       	ldd	r20, Y+6	; 0x06
     f4a:	69 e1       	ldi	r22, 0x19	; 25
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f52:	4d 81       	ldd	r20, Y+5	; 0x05
     f54:	68 e1       	ldi	r22, 0x18	; 24
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f5c:	4c 81       	ldd	r20, Y+4	; 0x04
     f5e:	67 e1       	ldi	r22, 0x17	; 23
     f60:	ce 01       	movw	r24, r28
     f62:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	6a e1       	ldi	r22, 0x1A	; 26
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <__vector_21>:
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <UART_TxHead>
     f8c:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <UART_TxTail>
     f90:	98 17       	cp	r25, r24
     f92:	89 f0       	breq	.+34     	; 0xfb6 <__vector_21+0x40>
     f94:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <UART_TxTail>
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	fc 01       	movw	r30, r24
     f9e:	ff 27       	eor	r31, r31
     fa0:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <UART_TxTail>
     fa4:	82 b1       	in	r24, 0x02	; 2
     fa6:	80 61       	ori	r24, 0x10	; 16
     fa8:	82 b9       	out	0x02, r24	; 2
     faa:	e8 5e       	subi	r30, 0xE8	; 232
     fac:	fc 4f       	sbci	r31, 0xFC	; 252
     fae:	80 81       	ld	r24, Z
     fb0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <__vector_21+0x50>
     fb6:	e1 ec       	ldi	r30, 0xC1	; 193
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	80 83       	st	Z, r24
     fc0:	80 81       	ld	r24, Z
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	80 83       	st	Z, r24
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_22>:
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	8f 93       	push	r24
     fe4:	82 b1       	in	r24, 0x02	; 2
     fe6:	8f 7e       	andi	r24, 0xEF	; 239
     fe8:	82 b9       	out	0x02, r24	; 2
     fea:	8f 91       	pop	r24
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <uart0_init>:
     ff6:	9c 01       	movw	r18, r24
     ff8:	f8 94       	cli
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <uart0_init+0x1a>
     ffe:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <UART_TxHead>
    1002:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <UART_TxTail>
    1006:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <UART_RxHead>
    100a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <UART_RxTail>
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	91 11       	cpse	r25, r1
    1012:	f5 cf       	rjmp	.-22     	; 0xffe <uart0_init+0x8>
    1014:	78 94       	sei
    1016:	33 23       	and	r19, r19
    1018:	24 f4       	brge	.+8      	; 0x1022 <uart0_init+0x2c>
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1020:	3f 77       	andi	r19, 0x7F	; 127
    1022:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1026:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    102a:	88 e9       	ldi	r24, 0x98	; 152
    102c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1036:	08 95       	ret

00001038 <uart0_getc>:
    1038:	f8 94       	cli
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <uart0_getc+0x1c>
    103e:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <UART_RxHead>
    1042:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <UART_RxTail>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	29 13       	cpse	r18, r25
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <uart0_getc+0x1c>
    104c:	78 94       	sei
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	08 95       	ret
    1054:	81 11       	cpse	r24, r1
    1056:	f3 cf       	rjmp	.-26     	; 0x103e <uart0_getc+0x6>
    1058:	78 94       	sei
    105a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <UART_RxTail>
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	8f 77       	andi	r24, 0x7F	; 127
    1064:	99 27       	eor	r25, r25
    1066:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <UART_RxTail>
    106a:	fc 01       	movw	r30, r24
    106c:	e8 56       	subi	r30, 0x68	; 104
    106e:	fd 4f       	sbci	r31, 0xFD	; 253
    1070:	20 81       	ld	r18, Z
    1072:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <UART_LastRxError>
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	98 2f       	mov	r25, r24
    107a:	88 27       	eor	r24, r24
    107c:	82 0f       	add	r24, r18
    107e:	91 1d       	adc	r25, r1
    1080:	08 95       	ret

00001082 <uart0_putc>:
    1082:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <UART_TxHead>
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	6f 5f       	subi	r22, 0xFF	; 255
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	ab 01       	movw	r20, r22
    108e:	55 27       	eor	r21, r21
    1090:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <UART_TxTail>
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	42 17       	cp	r20, r18
    1098:	53 07       	cpc	r21, r19
    109a:	d1 f3       	breq	.-12     	; 0x1090 <uart0_putc+0xe>
    109c:	fa 01       	movw	r30, r20
    109e:	e8 5e       	subi	r30, 0xE8	; 232
    10a0:	fc 4f       	sbci	r31, 0xFC	; 252
    10a2:	80 83       	st	Z, r24
    10a4:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <UART_TxHead>
    10a8:	e1 ec       	ldi	r30, 0xC1	; 193
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 62       	ori	r24, 0x20	; 32
    10b0:	80 83       	st	Z, r24
    10b2:	08 95       	ret

000010b4 <Reply_modbus>:
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    10ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    10ce:	f8 94       	cli
    10d0:	8c e1       	ldi	r24, 0x1C	; 28
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    10d8:	88 87       	std	Y+8, r24	; 0x08
    10da:	78 94       	sei
    10dc:	08 85       	ldd	r16, Y+8	; 0x08
    10de:	80 2f       	mov	r24, r16
    10e0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    10e4:	19 85       	ldd	r17, Y+9	; 0x09
    10e6:	81 2f       	mov	r24, r17
    10e8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    10ec:	80 2f       	mov	r24, r16
    10ee:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    10f2:	81 2f       	mov	r24, r17
    10f4:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    10f8:	1a 85       	ldd	r17, Y+10	; 0x0a
    10fa:	11 23       	and	r17, r17
    10fc:	e9 f0       	breq	.+58     	; 0x1138 <Reply_modbus+0x84>
    10fe:	81 2f       	mov	r24, r17
    1100:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    1104:	81 2f       	mov	r24, r17
    1106:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <Reply_modbus+0x7e>
    110e:	eb e0       	ldi	r30, 0x0B	; 11
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	ec 0f       	add	r30, r28
    1114:	fd 1f       	adc	r31, r29
    1116:	e0 0f       	add	r30, r16
    1118:	f1 1d       	adc	r31, r1
    111a:	07 fd       	sbrc	r16, 7
    111c:	fa 95       	dec	r31
    111e:	f0 80       	ld	r15, Z
    1120:	8f 2d       	mov	r24, r15
    1122:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	8f 2d       	mov	r24, r15
    112a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    112e:	11 50       	subi	r17, 0x01	; 1
    1130:	1a 87       	std	Y+10, r17	; 0x0a
    1132:	1a 85       	ldd	r17, Y+10	; 0x0a
    1134:	11 11       	cpse	r17, r1
    1136:	eb cf       	rjmp	.-42     	; 0x110e <Reply_modbus+0x5a>
    1138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    113c:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    1140:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1144:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	08 95       	ret

00001154 <uart0_flush>:
    1154:	f8 94       	cli
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <uart0_flush+0x10>
    115a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <UART_RxTail>
    115e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <UART_RxHead>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	81 11       	cpse	r24, r1
    1166:	f9 cf       	rjmp	.-14     	; 0x115a <uart0_flush+0x6>
    1168:	78 94       	sei
    116a:	08 95       	ret

0000116c <__vector_46>:
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	8e b1       	in	r24, 0x0e	; 14
    1190:	8f 7b       	andi	r24, 0xBF	; 191
    1192:	8e b9       	out	0x0e, r24	; 14
    1194:	0e 94 aa 08 	call	0x1154	; 0x1154 <uart0_flush>
    1198:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <Modbus_intex>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	9f ef       	ldi	r25, 0xFF	; 255
    11a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    11a8:	e5 ed       	ldi	r30, 0xD5	; 213
    11aa:	f4 e0       	ldi	r31, 0x04	; 4
    11ac:	80 83       	st	Z, r24
    11ae:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <Read_Modstr+0x44>
    11b2:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <Read_Modstr+0x43>
    11b6:	81 83       	std	Z+1, r24	; 0x01
    11b8:	12 82       	std	Z+2, r1	; 0x02
    11ba:	13 82       	std	Z+3, r1	; 0x03
    11bc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_28>:
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
    11fc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    1200:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1204:	28 71       	andi	r18, 0x18	; 24
    1206:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <UART1_RxHead>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	8f 77       	andi	r24, 0x7F	; 127
    1210:	99 27       	eor	r25, r25
    1212:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <UART1_RxTail>
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	84 17       	cp	r24, r20
    121a:	95 07       	cpc	r25, r21
    121c:	39 f0       	breq	.+14     	; 0x122c <__vector_28+0x4a>
    121e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <UART1_RxHead>
    1222:	fc 01       	movw	r30, r24
    1224:	ed 5e       	subi	r30, 0xED	; 237
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	30 83       	st	Z, r19
    122a:	01 c0       	rjmp	.+2      	; 0x122e <__vector_28+0x4c>
    122c:	22 e0       	ldi	r18, 0x02	; 2
    122e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_29>:
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
    125e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <UART1_TxHead>
    1262:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_TxTail>
    1266:	98 17       	cp	r25, r24
    1268:	89 f0       	breq	.+34     	; 0x128c <__vector_29+0x40>
    126a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_TxTail>
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	fc 01       	movw	r30, r24
    1274:	ff 27       	eor	r31, r31
    1276:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <UART1_TxTail>
    127a:	82 b1       	in	r24, 0x02	; 2
    127c:	80 62       	ori	r24, 0x20	; 32
    127e:	82 b9       	out	0x02, r24	; 2
    1280:	ed 56       	subi	r30, 0x6D	; 109
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	80 81       	ld	r24, Z
    1286:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    128a:	08 c0       	rjmp	.+16     	; 0x129c <__vector_29+0x50>
    128c:	e9 ec       	ldi	r30, 0xC9	; 201
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	80 83       	st	Z, r24
    1296:	80 81       	ld	r24, Z
    1298:	80 64       	ori	r24, 0x40	; 64
    129a:	80 83       	st	Z, r24
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_30>:
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	8f 93       	push	r24
    12ba:	82 b1       	in	r24, 0x02	; 2
    12bc:	8f 7d       	andi	r24, 0xDF	; 223
    12be:	82 b9       	out	0x02, r24	; 2
    12c0:	8f 91       	pop	r24
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <Init_RF>:
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    12d2:	80 ef       	ldi	r24, 0xF0	; 240
    12d4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7f8073>
    12d8:	08 95       	ret

000012da <Display_Out>:
    12da:	cf 93       	push	r28
    12dc:	89 e0       	ldi	r24, 0x09	; 9
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    12e4:	81 11       	cpse	r24, r1
    12e6:	15 c0       	rjmp	.+42     	; 0x1312 <Display_Out+0x38>
    12e8:	1a c0       	rjmp	.+52     	; 0x131e <Display_Out+0x44>
    12ea:	ec 2f       	mov	r30, r28
    12ec:	0c 2e       	mov	r0, r28
    12ee:	00 0c       	add	r0, r0
    12f0:	ff 0b       	sbc	r31, r31
    12f2:	e1 58       	subi	r30, 0x81	; 129
    12f4:	fb 4f       	sbci	r31, 0xFB	; 251
    12f6:	90 81       	ld	r25, Z
    12f8:	e9 2f       	mov	r30, r25
    12fa:	ef 77       	andi	r30, 0x7F	; 127
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	e1 51       	subi	r30, 0x11	; 17
    1300:	fc 4f       	sbci	r31, 0xFC	; 252
    1302:	84 91       	lpm	r24, Z
    1304:	99 23       	and	r25, r25
    1306:	0c f4       	brge	.+2      	; 0x130a <Display_Out+0x30>
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
    130e:	cf 5f       	subi	r28, 0xFF	; 255
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <Display_Out+0x3a>
    1312:	c0 e0       	ldi	r28, 0x00	; 0
    1314:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    1318:	c8 17       	cp	r28, r24
    131a:	3c f3       	brlt	.-50     	; 0x12ea <Display_Out+0x10>
    131c:	18 c0       	rjmp	.+48     	; 0x134e <Display_Out+0x74>
    131e:	c0 91 cf 04 	lds	r28, 0x04CF	; 0x8004cf <Digits_disp>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <Display_Out+0x70>
    1324:	c1 50       	subi	r28, 0x01	; 1
    1326:	ec 2f       	mov	r30, r28
    1328:	0c 2e       	mov	r0, r28
    132a:	00 0c       	add	r0, r0
    132c:	ff 0b       	sbc	r31, r31
    132e:	e1 58       	subi	r30, 0x81	; 129
    1330:	fb 4f       	sbci	r31, 0xFB	; 251
    1332:	90 81       	ld	r25, Z
    1334:	e9 2f       	mov	r30, r25
    1336:	ef 77       	andi	r30, 0x7F	; 127
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	e1 51       	subi	r30, 0x11	; 17
    133c:	fc 4f       	sbci	r31, 0xFC	; 252
    133e:	84 91       	lpm	r24, Z
    1340:	99 23       	and	r25, r25
    1342:	0c f4       	brge	.+2      	; 0x1346 <Display_Out+0x6c>
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
    134a:	1c 16       	cp	r1, r28
    134c:	5c f3       	brlt	.-42     	; 0x1324 <Display_Out+0x4a>
    134e:	0e 94 3e 02 	call	0x47c	; 0x47c <do_rclk>
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <display_Clock>:
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	28 97       	sbiw	r28, 0x08	; 8
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	88 87       	std	Y+8, r24	; 0x08
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	98 2f       	mov	r25, r24
    137a:	92 95       	swap	r25
    137c:	9f 70       	andi	r25, 0x0F	; 15
    137e:	ef e7       	ldi	r30, 0x7F	; 127
    1380:	f4 e0       	ldi	r31, 0x04	; 4
    1382:	90 83       	st	Z, r25
    1384:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <Clock_blink>
    1388:	8f 70       	andi	r24, 0x0F	; 15
    138a:	82 2b       	or	r24, r18
    138c:	81 83       	std	Z+1, r24	; 0x01
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	98 2f       	mov	r25, r24
    1392:	92 95       	swap	r25
    1394:	9f 70       	andi	r25, 0x0F	; 15
    1396:	92 2b       	or	r25, r18
    1398:	92 83       	std	Z+2, r25	; 0x02
    139a:	8f 70       	andi	r24, 0x0F	; 15
    139c:	83 83       	std	Z+3, r24	; 0x03
    139e:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <Digits_disp>
    13a2:	36 30       	cpi	r19, 0x06	; 6
    13a4:	59 f4       	brne	.+22     	; 0x13bc <display_Clock+0x66>
    13a6:	9f 77       	andi	r25, 0x7F	; 127
    13a8:	92 83       	std	Z+2, r25	; 0x02
    13aa:	82 2b       	or	r24, r18
    13ac:	83 83       	std	Z+3, r24	; 0x03
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	98 2f       	mov	r25, r24
    13b2:	92 95       	swap	r25
    13b4:	9f 70       	andi	r25, 0x0F	; 15
    13b6:	94 83       	std	Z+4, r25	; 0x04
    13b8:	8f 70       	andi	r24, 0x0F	; 15
    13ba:	85 83       	std	Z+5, r24	; 0x05
    13bc:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    13c0:	28 96       	adiw	r28, 0x08	; 8
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <display_Date>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	28 97       	sbiw	r28, 0x08	; 8
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	8c e0       	ldi	r24, 0x0C	; 12
    13e8:	88 87       	std	Y+8, r24	; 0x08
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
    13f2:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    13f6:	86 30       	cpi	r24, 0x06	; 6
    13f8:	a9 f4       	brne	.+42     	; 0x1424 <display_Date+0x52>
    13fa:	ef e7       	ldi	r30, 0x7F	; 127
    13fc:	f4 e0       	ldi	r31, 0x04	; 4
    13fe:	8d e0       	ldi	r24, 0x0D	; 13
    1400:	80 83       	st	Z, r24
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	98 2f       	mov	r25, r24
    1406:	92 95       	swap	r25
    1408:	9f 70       	andi	r25, 0x0F	; 15
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	82 83       	std	Z+2, r24	; 0x02
    1410:	8b e0       	ldi	r24, 0x0B	; 11
    1412:	83 83       	std	Z+3, r24	; 0x03
    1414:	8e 81       	ldd	r24, Y+6	; 0x06
    1416:	98 2f       	mov	r25, r24
    1418:	92 95       	swap	r25
    141a:	9f 70       	andi	r25, 0x0F	; 15
    141c:	94 83       	std	Z+4, r25	; 0x04
    141e:	8f 70       	andi	r24, 0x0F	; 15
    1420:	85 83       	std	Z+5, r24	; 0x05
    1422:	28 c0       	rjmp	.+80     	; 0x1474 <display_Date+0xa2>
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	98 2f       	mov	r25, r24
    1428:	92 95       	swap	r25
    142a:	9f 70       	andi	r25, 0x0F	; 15
    142c:	ef e7       	ldi	r30, 0x7F	; 127
    142e:	f4 e0       	ldi	r31, 0x04	; 4
    1430:	90 83       	st	Z, r25
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	81 83       	std	Z+1, r24	; 0x01
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	98 2f       	mov	r25, r24
    143c:	92 95       	swap	r25
    143e:	9f 70       	andi	r25, 0x0F	; 15
    1440:	92 83       	std	Z+2, r25	; 0x02
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	83 83       	std	Z+3, r24	; 0x03
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	89 f4       	brne	.+34     	; 0x1474 <display_Date+0xa2>
    1452:	a0 e7       	ldi	r26, 0x70	; 112
    1454:	b4 e0       	ldi	r27, 0x04	; 4
    1456:	8c 91       	ld	r24, X
    1458:	ef e7       	ldi	r30, 0x7F	; 127
    145a:	f4 e0       	ldi	r31, 0x04	; 4
    145c:	84 83       	std	Z+4, r24	; 0x04
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	8c 91       	ld	r24, X
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	85 83       	std	Z+5, r24	; 0x05
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	8c 91       	ld	r24, X
    146a:	12 97       	sbiw	r26, 0x02	; 2
    146c:	86 83       	std	Z+6, r24	; 0x06
    146e:	13 96       	adiw	r26, 0x03	; 3
    1470:	8c 91       	ld	r24, X
    1472:	87 83       	std	Z+7, r24	; 0x07
    1474:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    1478:	28 96       	adiw	r28, 0x08	; 8
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <display_temperature>:
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	6f 97       	sbiw	r28, 0x1f	; 31
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    14ac:	f8 2e       	mov	r15, r24
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	65 e2       	ldi	r22, 0x25	; 37
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 b1 04 	call	0x962	; 0x962 <DS18x20_Init>
    14bc:	88 23       	and	r24, r24
    14be:	61 f0       	breq	.+24     	; 0x14d8 <display_temperature+0x4e>
    14c0:	ef e7       	ldi	r30, 0x7F	; 127
    14c2:	f4 e0       	ldi	r31, 0x04	; 4
    14c4:	8b e0       	ldi	r24, 0x0B	; 11
    14c6:	80 83       	st	Z, r24
    14c8:	81 83       	std	Z+1, r24	; 0x01
    14ca:	8c e0       	ldi	r24, 0x0C	; 12
    14cc:	82 83       	std	Z+2, r24	; 0x02
    14ce:	8a e0       	ldi	r24, 0x0A	; 10
    14d0:	83 83       	std	Z+3, r24	; 0x03
    14d2:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    14d6:	64 c0       	rjmp	.+200    	; 0x15a0 <display_temperature+0x116>
    14d8:	ff 20       	and	r15, r15
    14da:	31 f0       	breq	.+12     	; 0x14e8 <display_temperature+0x5e>
    14dc:	6f e5       	ldi	r22, 0x5F	; 95
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 65 05 	call	0xaca	; 0xaca <DS18x20_SetResolution>
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <display_temperature+0x68>
    14e8:	6f e1       	ldi	r22, 0x1F	; 31
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 65 05 	call	0xaca	; 0xaca <DS18x20_SetResolution>
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 6b 05 	call	0xad6	; 0xad6 <DS18x20_WriteScratchpad>
    14fa:	ce 01       	movw	r24, r28
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	0e 94 24 05 	call	0xa48	; 0xa48 <DS18x20_MeasureTemperature>
    1502:	88 23       	and	r24, r24
    1504:	09 f4       	brne	.+2      	; 0x1508 <display_temperature+0x7e>
    1506:	4c c0       	rjmp	.+152    	; 0x15a0 <display_temperature+0x116>
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 8a 05 	call	0xb14	; 0xb14 <DS18x20_TemperatureValue>
    1510:	8e 01       	movw	r16, r28
    1512:	0a 5e       	subi	r16, 0xEA	; 234
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	24 e0       	ldi	r18, 0x04	; 4
    1518:	49 e0       	ldi	r20, 0x09	; 9
    151a:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <dtostrf>
    151e:	8f 89       	ldd	r24, Y+23	; 0x17
    1520:	8d 32       	cpi	r24, 0x2D	; 45
    1522:	d9 f4       	brne	.+54     	; 0x155a <display_temperature+0xd0>
    1524:	8b e0       	ldi	r24, 0x0B	; 11
    1526:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <display_out_buf>
    152a:	ff 20       	and	r15, r15
    152c:	59 f0       	breq	.+22     	; 0x1544 <display_temperature+0xba>
    152e:	88 8d       	ldd	r24, Y+24	; 0x18
    1530:	ef e7       	ldi	r30, 0x7F	; 127
    1532:	f4 e0       	ldi	r31, 0x04	; 4
    1534:	8f 70       	andi	r24, 0x0F	; 15
    1536:	81 83       	std	Z+1, r24	; 0x01
    1538:	89 8d       	ldd	r24, Y+25	; 0x19
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	82 83       	std	Z+2, r24	; 0x02
    153e:	8c e0       	ldi	r24, 0x0C	; 12
    1540:	83 83       	std	Z+3, r24	; 0x03
    1542:	2c c0       	rjmp	.+88     	; 0x159c <display_temperature+0x112>
    1544:	88 8d       	ldd	r24, Y+24	; 0x18
    1546:	ef e7       	ldi	r30, 0x7F	; 127
    1548:	f4 e0       	ldi	r31, 0x04	; 4
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	81 83       	std	Z+1, r24	; 0x01
    154e:	89 8d       	ldd	r24, Y+25	; 0x19
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	82 83       	std	Z+2, r24	; 0x02
    1554:	8c e0       	ldi	r24, 0x0C	; 12
    1556:	83 83       	std	Z+3, r24	; 0x03
    1558:	21 c0       	rjmp	.+66     	; 0x159c <display_temperature+0x112>
    155a:	88 8d       	ldd	r24, Y+24	; 0x18
    155c:	8d 32       	cpi	r24, 0x2D	; 45
    155e:	21 f4       	brne	.+8      	; 0x1568 <display_temperature+0xde>
    1560:	8b e0       	ldi	r24, 0x0B	; 11
    1562:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <display_out_buf>
    1566:	03 c0       	rjmp	.+6      	; 0x156e <display_temperature+0xe4>
    1568:	8f 70       	andi	r24, 0x0F	; 15
    156a:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <display_out_buf>
    156e:	ff 20       	and	r15, r15
    1570:	61 f0       	breq	.+24     	; 0x158a <display_temperature+0x100>
    1572:	89 8d       	ldd	r24, Y+25	; 0x19
    1574:	ef e7       	ldi	r30, 0x7F	; 127
    1576:	f4 e0       	ldi	r31, 0x04	; 4
    1578:	8f 70       	andi	r24, 0x0F	; 15
    157a:	80 68       	ori	r24, 0x80	; 128
    157c:	81 83       	std	Z+1, r24	; 0x01
    157e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1580:	8f 70       	andi	r24, 0x0F	; 15
    1582:	82 83       	std	Z+2, r24	; 0x02
    1584:	8c e0       	ldi	r24, 0x0C	; 12
    1586:	83 83       	std	Z+3, r24	; 0x03
    1588:	09 c0       	rjmp	.+18     	; 0x159c <display_temperature+0x112>
    158a:	89 8d       	ldd	r24, Y+25	; 0x19
    158c:	ef e7       	ldi	r30, 0x7F	; 127
    158e:	f4 e0       	ldi	r31, 0x04	; 4
    1590:	8f 70       	andi	r24, 0x0F	; 15
    1592:	81 83       	std	Z+1, r24	; 0x01
    1594:	8c e0       	ldi	r24, 0x0C	; 12
    1596:	82 83       	std	Z+2, r24	; 0x02
    1598:	8a e0       	ldi	r24, 0x0A	; 10
    159a:	83 83       	std	Z+3, r24	; 0x03
    159c:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    15a0:	6f 96       	adiw	r28, 0x1f	; 31
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	08 95       	ret

000015b8 <timer_display>:
    15b8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <timer>
    15bc:	81 11       	cpse	r24, r1
    15be:	19 c0       	rjmp	.+50     	; 0x15f2 <timer_display+0x3a>
    15c0:	a6 e7       	ldi	r26, 0x76	; 118
    15c2:	b4 e0       	ldi	r27, 0x04	; 4
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	8c 91       	ld	r24, X
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	98 2f       	mov	r25, r24
    15cc:	92 95       	swap	r25
    15ce:	9f 70       	andi	r25, 0x0F	; 15
    15d0:	ef e7       	ldi	r30, 0x7F	; 127
    15d2:	f4 e0       	ldi	r31, 0x04	; 4
    15d4:	90 83       	st	Z, r25
    15d6:	8f 70       	andi	r24, 0x0F	; 15
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	81 83       	std	Z+1, r24	; 0x01
    15dc:	12 96       	adiw	r26, 0x02	; 2
    15de:	8c 91       	ld	r24, X
    15e0:	98 2f       	mov	r25, r24
    15e2:	92 95       	swap	r25
    15e4:	9f 70       	andi	r25, 0x0F	; 15
    15e6:	92 83       	std	Z+2, r25	; 0x02
    15e8:	8f 70       	andi	r24, 0x0F	; 15
    15ea:	83 83       	std	Z+3, r24	; 0x03
    15ec:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <Timer_blink_on>
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <timer_display+0x66>
    15f2:	98 2f       	mov	r25, r24
    15f4:	92 95       	swap	r25
    15f6:	9f 70       	andi	r25, 0x0F	; 15
    15f8:	ef e7       	ldi	r30, 0x7F	; 127
    15fa:	f4 e0       	ldi	r31, 0x04	; 4
    15fc:	90 83       	st	Z, r25
    15fe:	8f 70       	andi	r24, 0x0F	; 15
    1600:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <Clock_blink>
    1604:	89 2b       	or	r24, r25
    1606:	81 83       	std	Z+1, r24	; 0x01
    1608:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <timer+0x1>
    160c:	98 2f       	mov	r25, r24
    160e:	92 95       	swap	r25
    1610:	9f 70       	andi	r25, 0x0F	; 15
    1612:	92 83       	std	Z+2, r25	; 0x02
    1614:	8f 70       	andi	r24, 0x0F	; 15
    1616:	83 83       	std	Z+3, r24	; 0x03
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <Timer_blink_on>
    161e:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    1622:	08 95       	ret

00001624 <F_menu_check>:
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	e1 f4       	brne	.+56     	; 0x1660 <F_menu_check+0x3c>
    1628:	e9 e7       	ldi	r30, 0x79	; 121
    162a:	f4 e0       	ldi	r31, 0x04	; 4
    162c:	8f e0       	ldi	r24, 0x0F	; 15
    162e:	80 83       	st	Z, r24
    1630:	8d e0       	ldi	r24, 0x0D	; 13
    1632:	81 83       	std	Z+1, r24	; 0x01
    1634:	8d ec       	ldi	r24, 0xCD	; 205
    1636:	68 9f       	mul	r22, r24
    1638:	81 2d       	mov	r24, r1
    163a:	11 24       	eor	r1, r1
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	86 95       	lsr	r24
    1642:	98 2f       	mov	r25, r24
    1644:	9f 70       	andi	r25, 0x0F	; 15
    1646:	92 83       	std	Z+2, r25	; 0x02
    1648:	88 0f       	add	r24, r24
    164a:	98 2f       	mov	r25, r24
    164c:	99 0f       	add	r25, r25
    164e:	99 0f       	add	r25, r25
    1650:	89 0f       	add	r24, r25
    1652:	68 1b       	sub	r22, r24
    1654:	6f 70       	andi	r22, 0x0F	; 15
    1656:	63 83       	std	Z+3, r22	; 0x03
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    165e:	08 95       	ret
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	e1 f4       	brne	.+56     	; 0x169c <F_menu_check+0x78>
    1664:	e9 e7       	ldi	r30, 0x79	; 121
    1666:	f4 e0       	ldi	r31, 0x04	; 4
    1668:	86 e1       	ldi	r24, 0x16	; 22
    166a:	80 83       	st	Z, r24
    166c:	8d e0       	ldi	r24, 0x0D	; 13
    166e:	81 83       	std	Z+1, r24	; 0x01
    1670:	8d ec       	ldi	r24, 0xCD	; 205
    1672:	68 9f       	mul	r22, r24
    1674:	81 2d       	mov	r24, r1
    1676:	11 24       	eor	r1, r1
    1678:	86 95       	lsr	r24
    167a:	86 95       	lsr	r24
    167c:	86 95       	lsr	r24
    167e:	98 2f       	mov	r25, r24
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	92 83       	std	Z+2, r25	; 0x02
    1684:	88 0f       	add	r24, r24
    1686:	98 2f       	mov	r25, r24
    1688:	99 0f       	add	r25, r25
    168a:	99 0f       	add	r25, r25
    168c:	89 0f       	add	r24, r25
    168e:	68 1b       	sub	r22, r24
    1690:	6f 70       	andi	r22, 0x0F	; 15
    1692:	63 83       	std	Z+3, r22	; 0x03
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    169a:	08 95       	ret
    169c:	e9 e7       	ldi	r30, 0x79	; 121
    169e:	f4 e0       	ldi	r31, 0x04	; 4
    16a0:	91 e1       	ldi	r25, 0x11	; 17
    16a2:	90 83       	st	Z, r25
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	81 83       	std	Z+1, r24	; 0x01
    16a8:	8d e0       	ldi	r24, 0x0D	; 13
    16aa:	82 83       	std	Z+2, r24	; 0x02
    16ac:	63 83       	std	Z+3, r22	; 0x03
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    16b4:	08 95       	ret

000016b6 <Fav_menu_check>:
    16b6:	e9 e7       	ldi	r30, 0x79	; 121
    16b8:	f4 e0       	ldi	r31, 0x04	; 4
    16ba:	97 e1       	ldi	r25, 0x17	; 23
    16bc:	90 83       	st	Z, r25
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	98 0f       	add	r25, r24
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	81 11       	cpse	r24, r1
    16c6:	16 c0       	rjmp	.+44     	; 0x16f4 <Fav_menu_check+0x3e>
    16c8:	8d ec       	ldi	r24, 0xCD	; 205
    16ca:	68 9f       	mul	r22, r24
    16cc:	81 2d       	mov	r24, r1
    16ce:	11 24       	eor	r1, r1
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	86 95       	lsr	r24
    16d6:	98 2f       	mov	r25, r24
    16d8:	9f 70       	andi	r25, 0x0F	; 15
    16da:	92 83       	std	Z+2, r25	; 0x02
    16dc:	88 0f       	add	r24, r24
    16de:	98 2f       	mov	r25, r24
    16e0:	99 0f       	add	r25, r25
    16e2:	99 0f       	add	r25, r25
    16e4:	89 0f       	add	r24, r25
    16e6:	68 1b       	sub	r22, r24
    16e8:	6f 70       	andi	r22, 0x0F	; 15
    16ea:	63 83       	std	Z+3, r22	; 0x03
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    16f2:	08 95       	ret
    16f4:	e9 e7       	ldi	r30, 0x79	; 121
    16f6:	f4 e0       	ldi	r31, 0x04	; 4
    16f8:	8d e0       	ldi	r24, 0x0D	; 13
    16fa:	82 83       	std	Z+2, r24	; 0x02
    16fc:	63 83       	std	Z+3, r22	; 0x03
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    1704:	08 95       	ret

00001706 <Buzzer>:
    1706:	88 23       	and	r24, r24
    1708:	59 f0       	breq	.+22     	; 0x1720 <Buzzer+0x1a>
    170a:	85 b1       	in	r24, 0x05	; 5
    170c:	88 60       	ori	r24, 0x08	; 8
    170e:	85 b9       	out	0x05, r24	; 5
    1710:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    1714:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    1718:	89 e0       	ldi	r24, 0x09	; 9
    171a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    171e:	08 95       	ret
    1720:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    1724:	85 b1       	in	r24, 0x05	; 5
    1726:	87 7f       	andi	r24, 0xF7	; 247
    1728:	85 b9       	out	0x05, r24	; 5
    172a:	08 95       	ret

0000172c <Display_set_menu>:
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	12 c0       	rjmp	.+36     	; 0x1756 <Display_set_menu+0x2a>
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	91 05       	cpc	r25, r1
    1736:	4c f4       	brge	.+18     	; 0x174a <Display_set_menu+0x1e>
    1738:	fc 01       	movw	r30, r24
    173a:	e7 58       	subi	r30, 0x87	; 135
    173c:	fb 4f       	sbci	r31, 0xFB	; 251
    173e:	20 81       	ld	r18, Z
    1740:	fc 01       	movw	r30, r24
    1742:	e1 58       	subi	r30, 0x81	; 129
    1744:	fb 4f       	sbci	r31, 0xFB	; 251
    1746:	20 83       	st	Z, r18
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <Display_set_menu+0x28>
    174a:	2d e0       	ldi	r18, 0x0D	; 13
    174c:	fc 01       	movw	r30, r24
    174e:	e1 58       	subi	r30, 0x81	; 129
    1750:	fb 4f       	sbci	r31, 0xFB	; 251
    1752:	20 83       	st	Z, r18
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <Digits_disp>
    175a:	02 2e       	mov	r0, r18
    175c:	00 0c       	add	r0, r0
    175e:	33 0b       	sbc	r19, r19
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	34 f3       	brlt	.-52     	; 0x1732 <Display_set_menu+0x6>
    1766:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    176a:	08 95       	ret

0000176c <Display_set_clock>:
    176c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	a1 f4       	brne	.+40     	; 0x179c <Display_set_clock+0x30>
    1774:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	84 f0       	brlt	.+32     	; 0x179c <Display_set_clock+0x30>
    177c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1780:	86 36       	cpi	r24, 0x66	; 102
    1782:	61 f0       	breq	.+24     	; 0x179c <Display_set_clock+0x30>
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <shift>
    178a:	e9 e7       	ldi	r30, 0x79	; 121
    178c:	f4 e0       	ldi	r31, 0x04	; 4
    178e:	81 81       	ldd	r24, Z+1	; 0x01
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	81 83       	std	Z+1, r24	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	8f 77       	andi	r24, 0x7F	; 127
    1798:	82 83       	std	Z+2, r24	; 0x02
    179a:	2a c0       	rjmp	.+84     	; 0x17f0 <Display_set_clock+0x84>
    179c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	a1 f4       	brne	.+40     	; 0x17cc <Display_set_clock+0x60>
    17a4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	84 f0       	brlt	.+32     	; 0x17cc <Display_set_clock+0x60>
    17ac:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17b0:	85 36       	cpi	r24, 0x65	; 101
    17b2:	61 f0       	breq	.+24     	; 0x17cc <Display_set_clock+0x60>
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <shift>
    17ba:	e9 e7       	ldi	r30, 0x79	; 121
    17bc:	f4 e0       	ldi	r31, 0x04	; 4
    17be:	81 81       	ldd	r24, Z+1	; 0x01
    17c0:	8f 77       	andi	r24, 0x7F	; 127
    17c2:	81 83       	std	Z+1, r24	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	8f 77       	andi	r24, 0x7F	; 127
    17c8:	82 83       	std	Z+2, r24	; 0x02
    17ca:	12 c0       	rjmp	.+36     	; 0x17f0 <Display_set_clock+0x84>
    17cc:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17d0:	84 34       	cpi	r24, 0x44	; 68
    17d2:	21 f0       	breq	.+8      	; 0x17dc <Display_set_clock+0x70>
    17d4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17d8:	84 36       	cpi	r24, 0x64	; 100
    17da:	69 f4       	brne	.+26     	; 0x17f6 <Display_set_clock+0x8a>
    17dc:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
    17e0:	e9 e7       	ldi	r30, 0x79	; 121
    17e2:	f4 e0       	ldi	r31, 0x04	; 4
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	81 83       	std	Z+1, r24	; 0x01
    17ea:	83 81       	ldd	r24, Z+3	; 0x03
    17ec:	80 68       	ori	r24, 0x80	; 128
    17ee:	83 83       	std	Z+3, r24	; 0x03
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	30 c0       	rjmp	.+96     	; 0x1856 <Display_set_clock+0xea>
    17f6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17fa:	83 36       	cpi	r24, 0x63	; 99
    17fc:	79 f4       	brne	.+30     	; 0x181c <Display_set_clock+0xb0>
    17fe:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	14 f4       	brge	.+4      	; 0x180a <Display_set_clock+0x9e>
    1806:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
    180a:	e9 e7       	ldi	r30, 0x79	; 121
    180c:	f4 e0       	ldi	r31, 0x04	; 4
    180e:	81 81       	ldd	r24, Z+1	; 0x01
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	81 83       	std	Z+1, r24	; 0x01
    1814:	83 81       	ldd	r24, Z+3	; 0x03
    1816:	80 68       	ori	r24, 0x80	; 128
    1818:	83 83       	std	Z+3, r24	; 0x03
    181a:	ea cf       	rjmp	.-44     	; 0x17f0 <Display_set_clock+0x84>
    181c:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
    1820:	e9 e7       	ldi	r30, 0x79	; 121
    1822:	f4 e0       	ldi	r31, 0x04	; 4
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	80 68       	ori	r24, 0x80	; 128
    1828:	81 83       	std	Z+1, r24	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	80 68       	ori	r24, 0x80	; 128
    182e:	82 83       	std	Z+2, r24	; 0x02
    1830:	83 81       	ldd	r24, Z+3	; 0x03
    1832:	80 68       	ori	r24, 0x80	; 128
    1834:	83 83       	std	Z+3, r24	; 0x03
    1836:	dc cf       	rjmp	.-72     	; 0x17f0 <Display_set_clock+0x84>
    1838:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <shift>
    183c:	fc 01       	movw	r30, r24
    183e:	e2 0f       	add	r30, r18
    1840:	f1 1d       	adc	r31, r1
    1842:	27 fd       	sbrc	r18, 7
    1844:	fa 95       	dec	r31
    1846:	e7 58       	subi	r30, 0x87	; 135
    1848:	fb 4f       	sbci	r31, 0xFB	; 251
    184a:	20 81       	ld	r18, Z
    184c:	fc 01       	movw	r30, r24
    184e:	e1 58       	subi	r30, 0x81	; 129
    1850:	fb 4f       	sbci	r31, 0xFB	; 251
    1852:	20 83       	st	Z, r18
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	86 30       	cpi	r24, 0x06	; 6
    1858:	91 05       	cpc	r25, r1
    185a:	74 f3       	brlt	.-36     	; 0x1838 <Display_set_clock+0xcc>
    185c:	ef e7       	ldi	r30, 0x7F	; 127
    185e:	f4 e0       	ldi	r31, 0x04	; 4
    1860:	8d e0       	ldi	r24, 0x0D	; 13
    1862:	86 83       	std	Z+6, r24	; 0x06
    1864:	87 83       	std	Z+7, r24	; 0x07
    1866:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
    186a:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    186e:	08 95       	ret

00001870 <photo_sample>:

void photo_sample(void)
{
    1870:	cf 93       	push	r28
	uint8_t read_sample = ADCH;
    1872:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	if (read_sample<13){
    1876:	8d 30       	cpi	r24, 0x0D	; 13
    1878:	28 f0       	brcs	.+10     	; 0x1884 <photo_sample+0x14>
		read_sample = 16;
	}else{
		read_sample = 17-(read_sample / 16);
    187a:	82 95       	swap	r24
    187c:	8f 70       	andi	r24, 0x0F	; 15
    187e:	c1 e1       	ldi	r28, 0x11	; 17
    1880:	c8 1b       	sub	r28, r24
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <photo_sample+0x16>

void photo_sample(void)
{
	uint8_t read_sample = ADCH;
	if (read_sample<13){
		read_sample = 16;
    1884:	c0 e1       	ldi	r28, 0x10	; 16
	}else{
		read_sample = 17-(read_sample / 16);
	}
	if (samples_metter==-1){
    1886:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <samples_metter>
    188a:	8f 3f       	cpi	r24, 0xFF	; 255
    188c:	e1 f4       	brne	.+56     	; 0x18c6 <photo_sample+0x56>
		samples_metter=0;
    188e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <samples_metter>
		uint8_t eepbright = eeprom_read_byte((uint8_t*)F_eep + Brightness);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
		if (eepbright>0)
    189a:	88 23       	and	r24, r24
    189c:	19 f0       	breq	.+6      	; 0x18a4 <photo_sample+0x34>
		{
			sram_brigt = eepbright;
    189e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sram_brigt>
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <photo_sample+0x38>
		}else{
			sram_brigt = read_sample;
    18a4:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <sram_brigt>
		}
		
		if (eeprom_read_byte((uint8_t*)FAV_eep + TLC_drivers_Enable))	
    18a8:	8a e0       	ldi	r24, 0x0A	; 10
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    18b0:	88 23       	and	r24, r24
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <photo_sample+0x56>
		TLC_config_byte(sram_brigt,eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS));
    18b4:	88 e0       	ldi	r24, 0x08	; 8
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    18bc:	68 2f       	mov	r22, r24
    18be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sram_brigt>
    18c2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TLC_config_byte>
		
	}
	photo_samples[samples_metter] = read_sample; 
    18c6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <samples_metter>
    18ca:	e8 2f       	mov	r30, r24
    18cc:	08 2e       	mov	r0, r24
    18ce:	00 0c       	add	r0, r0
    18d0:	ff 0b       	sbc	r31, r31
    18d2:	ee 5c       	subi	r30, 0xCE	; 206
    18d4:	fb 4f       	sbci	r31, 0xFB	; 251
    18d6:	c0 83       	st	Z, r28
	samples_metter++;
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <samples_metter>
	if (samples_metter>=SAMPLES_MAX)
    18de:	8c 33       	cpi	r24, 0x3C	; 60
    18e0:	54 f4       	brge	.+20     	; 0x18f6 <photo_sample+0x86>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <photo_sample+0xb0>
	{
		uint16_t A=0;
		uint8_t i;
		for (i=0;i<SAMPLES_MAX;i++){A += photo_samples[i];}
    18e4:	e8 2f       	mov	r30, r24
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	ee 5c       	subi	r30, 0xCE	; 206
    18ea:	fb 4f       	sbci	r31, 0xFB	; 251
    18ec:	90 81       	ld	r25, Z
    18ee:	29 0f       	add	r18, r25
    18f0:	31 1d       	adc	r19, r1
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <photo_sample+0x8c>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8c 33       	cpi	r24, 0x3C	; 60
    18fe:	90 f3       	brcs	.-28     	; 0x18e4 <photo_sample+0x74>
		samples_metter=0;
    1900:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <samples_metter>
		sram_brigt = A/SAMPLES_MAX;
    1904:	a9 e8       	ldi	r26, 0x89	; 137
    1906:	b8 e8       	ldi	r27, 0x88	; 136
    1908:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <__umulhisi3>
    190c:	96 95       	lsr	r25
    190e:	87 95       	ror	r24
    1910:	92 95       	swap	r25
    1912:	82 95       	swap	r24
    1914:	8f 70       	andi	r24, 0x0F	; 15
    1916:	89 27       	eor	r24, r25
    1918:	9f 70       	andi	r25, 0x0F	; 15
    191a:	89 27       	eor	r24, r25
    191c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sram_brigt>
		//uint8_t digits = eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
		//TLC_config_byte(sram_brigt,digits);
	} 
}
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <chek_timer_alarms>:
	user_instruction=0;
	display_init(1);
}

void chek_timer_alarms(void)
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
	if (alarm[0])
    192c:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <alarm>
    1930:	88 23       	and	r24, r24
    1932:	69 f0       	breq	.+26     	; 0x194e <chek_timer_alarms+0x2a>
	{
		alarm[1]--;
    1934:	e4 e7       	ldi	r30, 0x74	; 116
    1936:	f4 e0       	ldi	r31, 0x04	; 4
    1938:	81 81       	ldd	r24, Z+1	; 0x01
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	81 83       	std	Z+1, r24	; 0x01
		if (alarm[1]==0)
    193e:	81 11       	cpse	r24, r1
    1940:	06 c0       	rjmp	.+12     	; 0x194e <chek_timer_alarms+0x2a>
		{
			alarm[0]=0;
    1942:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <alarm>
			Buzzer(0,1000);
    1946:	68 ee       	ldi	r22, 0xE8	; 232
    1948:	73 e0       	ldi	r23, 0x03	; 3
    194a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
	}
	int8_t a = (eeprom_read_byte((uint8_t*)Countdown_alarm1));
    194e:	86 e1       	ldi	r24, 0x16	; 22
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1956:	18 2f       	mov	r17, r24
	int8_t b = (eeprom_read_byte((uint8_t*)Countdown_alarm1+1));
    1958:	87 e1       	ldi	r24, 0x17	; 23
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1960:	08 2f       	mov	r16, r24
	int8_t c = (eeprom_read_byte((uint8_t*)Countdown_alarm1+2));
    1962:	88 e1       	ldi	r24, 0x18	; 24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
	if (timer[0]== a && timer[1]== b && timer[2]== c)
    196a:	c0 91 76 04 	lds	r28, 0x0476	; 0x800476 <timer>
    196e:	d0 e0       	ldi	r29, 0x00	; 0
    1970:	21 2f       	mov	r18, r17
    1972:	11 0f       	add	r17, r17
    1974:	33 0b       	sbc	r19, r19
    1976:	c2 17       	cp	r28, r18
    1978:	d3 07       	cpc	r29, r19
    197a:	09 f5       	brne	.+66     	; 0x19be <chek_timer_alarms+0x9a>
    197c:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <timer+0x1>
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	20 2f       	mov	r18, r16
    1984:	00 0f       	add	r16, r16
    1986:	33 0b       	sbc	r19, r19
    1988:	42 17       	cp	r20, r18
    198a:	53 07       	cpc	r21, r19
    198c:	c1 f4       	brne	.+48     	; 0x19be <chek_timer_alarms+0x9a>
    198e:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <timer+0x2>
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	08 2e       	mov	r0, r24
    1996:	00 0c       	add	r0, r0
    1998:	99 0b       	sbc	r25, r25
    199a:	28 17       	cp	r18, r24
    199c:	39 07       	cpc	r19, r25
    199e:	79 f4       	brne	.+30     	; 0x19be <chek_timer_alarms+0x9a>
	{
		alarm[0]=1;
    19a0:	c4 e7       	ldi	r28, 0x74	; 116
    19a2:	d4 e0       	ldi	r29, 0x04	; 4
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	88 83       	st	Y, r24
		alarm[1]= (eeprom_read_byte((uint8_t*)F_eep+Countdown_alarms));
    19a8:	85 e0       	ldi	r24, 0x05	; 5
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    19b0:	89 83       	std	Y+1, r24	; 0x01
		Buzzer(1,16600);
    19b2:	68 ed       	ldi	r22, 0xD8	; 216
    19b4:	70 e4       	ldi	r23, 0x40	; 64
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    19bc:	34 c0       	rjmp	.+104    	; 0x1a26 <chek_timer_alarms+0x102>
	}else{
		a = (eeprom_read_byte((uint8_t*)Countdown_alarm2));
    19be:	89 e1       	ldi	r24, 0x19	; 25
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    19c6:	18 2f       	mov	r17, r24
		b = (eeprom_read_byte((uint8_t*)Countdown_alarm2+1));
    19c8:	8a e1       	ldi	r24, 0x1A	; 26
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    19d0:	08 2f       	mov	r16, r24
		c = (eeprom_read_byte((uint8_t*)Countdown_alarm2+2));
    19d2:	8b e1       	ldi	r24, 0x1B	; 27
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
		if (timer[0]== a && timer[1]== b && timer[2]== c)
    19da:	21 2f       	mov	r18, r17
    19dc:	11 0f       	add	r17, r17
    19de:	33 0b       	sbc	r19, r19
    19e0:	c2 17       	cp	r28, r18
    19e2:	d3 07       	cpc	r29, r19
    19e4:	01 f5       	brne	.+64     	; 0x1a26 <chek_timer_alarms+0x102>
    19e6:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <timer+0x1>
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	20 2f       	mov	r18, r16
    19ee:	00 0f       	add	r16, r16
    19f0:	33 0b       	sbc	r19, r19
    19f2:	42 17       	cp	r20, r18
    19f4:	53 07       	cpc	r21, r19
    19f6:	b9 f4       	brne	.+46     	; 0x1a26 <chek_timer_alarms+0x102>
    19f8:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <timer+0x2>
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	08 2e       	mov	r0, r24
    1a00:	00 0c       	add	r0, r0
    1a02:	99 0b       	sbc	r25, r25
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	71 f4       	brne	.+28     	; 0x1a26 <chek_timer_alarms+0x102>
		{
			alarm[0]=1;
    1a0a:	c4 e7       	ldi	r28, 0x74	; 116
    1a0c:	d4 e0       	ldi	r29, 0x04	; 4
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	88 83       	st	Y, r24
			alarm[1]= (eeprom_read_byte((uint8_t*)F_eep+Countdown_alarms));
    1a12:	85 e0       	ldi	r24, 0x05	; 5
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1a1a:	89 83       	std	Y+1, r24	; 0x01
			Buzzer(1,8800);
    1a1c:	60 e6       	ldi	r22, 0x60	; 96
    1a1e:	72 e2       	ldi	r23, 0x22	; 34
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
	}
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <update_score_display>:

void update_score_display(void){
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <update_score_display+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <update_score_display+0x8>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	char str[4];
	itoa(Score_home,str,10);
    1a3c:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1a40:	4a e0       	ldi	r20, 0x0A	; 10
    1a42:	be 01       	movw	r22, r28
    1a44:	6f 5f       	subi	r22, 0xFF	; 255
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	if (!str[1]){
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	81 11       	cpse	r24, r1
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <update_score_display+0x34>
		display_out_buf[4]=SPACE;
    1a54:	ef e7       	ldi	r30, 0x7F	; 127
    1a56:	f4 e0       	ldi	r31, 0x04	; 4
    1a58:	8d e0       	ldi	r24, 0x0D	; 13
    1a5a:	84 83       	std	Z+4, r24	; 0x04
		display_out_buf[5]=str[0]&0xf;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	8f 70       	andi	r24, 0x0F	; 15
    1a60:	85 83       	std	Z+5, r24	; 0x05
    1a62:	07 c0       	rjmp	.+14     	; 0x1a72 <update_score_display+0x42>
	}else{
		display_out_buf[4]=str[0]&0xf;
    1a64:	99 81       	ldd	r25, Y+1	; 0x01
    1a66:	ef e7       	ldi	r30, 0x7F	; 127
    1a68:	f4 e0       	ldi	r31, 0x04	; 4
    1a6a:	9f 70       	andi	r25, 0x0F	; 15
    1a6c:	94 83       	std	Z+4, r25	; 0x04
		display_out_buf[5]=str[1]&0xf;
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	85 83       	std	Z+5, r24	; 0x05
	}
	itoa(Score_guest,str,10);
    1a72:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    1a76:	4a e0       	ldi	r20, 0x0A	; 10
    1a78:	be 01       	movw	r22, r28
    1a7a:	6f 5f       	subi	r22, 0xFF	; 255
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	display_out_buf[6]=str[0]&0xf;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	8f 70       	andi	r24, 0x0F	; 15
    1a88:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <display_out_buf+0x6>
	if (str[1]){display_out_buf[7]=str[1]&0xf;}else{display_out_buf[7]=SPACE;}
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	88 23       	and	r24, r24
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <update_score_display+0x6a>
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <update_score_display+0x70>
    1a9a:	8d e0       	ldi	r24, 0x0D	; 13
    1a9c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
	if (display_out_buf[8]==SPACE){
    1aa0:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <display_out_buf+0x8>
    1aa4:	8d 30       	cpi	r24, 0x0D	; 13
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <update_score_display+0x82>
		display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
    1aa8:	ef e7       	ldi	r30, 0x7F	; 127
    1aaa:	f4 e0       	ldi	r31, 0x04	; 4
    1aac:	10 86       	std	Z+8, r1	; 0x08
    1aae:	11 86       	std	Z+9, r1	; 0x09
    1ab0:	12 86       	std	Z+10, r1	; 0x0a
	}
	
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <display_init>:
	}
	return 0;
}

void display_init(int8_t prog){
	Menu_blink_on=0;
    1ac0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <Menu_blink_on>
	Change_timer_on=0;
    1ac4:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <Change_timer_on>
	if (prog!=0){Program_display=prog;}
    1ac8:	81 11       	cpse	r24, r1
    1aca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
	Clock_blink_on=0;
    1ace:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <Clock_blink_on>
	//Clock_blink = 0x00;
	Timer_blink_on=0;
    1ad2:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <Timer_blink_on>
	Program_display_time=20;					
    1ad6:	84 e1       	ldi	r24, 0x14	; 20
    1ad8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Program_display_time>
	if (Program_display>3){Program_display=1;}
    1adc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Program_display>
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	18 f0       	brcs	.+6      	; 0x1aea <display_init+0x2a>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
	Timer_devide=0x1fff;
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	9f e1       	ldi	r25, 0x1F	; 31
    1aee:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <Timer_devide+0x1>
    1af2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Timer_devide>
	update_score_display();
    1af6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
    1afa:	08 95       	ret

00001afc <__vector_18>:
		}
	}
	do_rclk();
}

ISR(TIMER0_OVF_vect) {
    1afc:	1f 92       	push	r1
    1afe:	0f 92       	push	r0
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	2f 93       	push	r18
    1b10:	3f 93       	push	r19
    1b12:	4f 93       	push	r20
    1b14:	5f 93       	push	r21
    1b16:	6f 93       	push	r22
    1b18:	7f 93       	push	r23
    1b1a:	8f 93       	push	r24
    1b1c:	9f 93       	push	r25
    1b1e:	af 93       	push	r26
    1b20:	bf 93       	push	r27
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ef 93       	push	r30
    1b28:	ff 93       	push	r31
	wdt_reset();
    1b2a:	a8 95       	wdr
	Timer_bright++;
    1b2c:	c0 91 29 04 	lds	r28, 0x0429	; 0x800429 <Timer_bright>
    1b30:	d0 91 2a 04 	lds	r29, 0x042A	; 0x80042a <Timer_bright+0x1>
    1b34:	21 96       	adiw	r28, 0x01	; 1
    1b36:	d0 93 2a 04 	sts	0x042A, r29	; 0x80042a <Timer_bright+0x1>
    1b3a:	c0 93 29 04 	sts	0x0429, r28	; 0x800429 <Timer_bright>
	if (Timer_Butt_Minus>0){Timer_Butt_Minus--;}
    1b3e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    1b42:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <__vector_18+0x58>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    1b50:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
	if (Timer_Butt_Start>0){Timer_Butt_Start--;}	
    1b54:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <Timer_Butt_Start>
    1b58:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <Timer_Butt_Start+0x1>
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <__vector_18+0x6e>
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <Timer_Butt_Start+0x1>
    1b66:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <Timer_Butt_Start>
	//if (Timer_Butt_Minus==1){KORN_ON();	_delay_ms(400); KORN_OFF();}
	uint8_t TLC_divers = eeprom_read_byte((uint8_t*)FAV_eep + TLC_drivers_Enable);
    1b6a:	8a e0       	ldi	r24, 0x0A	; 10
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1b72:	08 2f       	mov	r16, r24
	uint8_t bright = eeprom_read_byte((uint8_t*)F_eep + Brightness);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1b7c:	18 2f       	mov	r17, r24
	if (bright==0){bright = sram_brigt;}
    1b7e:	81 11       	cpse	r24, r1
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <__vector_18+0x8a>
    1b82:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <sram_brigt>
	if (bright<0)
	bright=16;
	
	if (Timer_bright>=3 && !TLC_divers) {
    1b86:	c3 30       	cpi	r28, 0x03	; 3
    1b88:	d1 05       	cpc	r29, r1
    1b8a:	30 f1       	brcs	.+76     	; 0x1bd8 <__vector_18+0xdc>
    1b8c:	01 11       	cpse	r16, r1
    1b8e:	24 c0       	rjmp	.+72     	; 0x1bd8 <__vector_18+0xdc>
		Timer_bright=0;
    1b90:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <Timer_bright+0x1>
    1b94:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <Timer_bright>
		Count_bright++;		
    1b98:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <Count_bright>
    1b9c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <Count_bright+0x1>
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <Count_bright+0x1>
    1ba6:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <Count_bright>
		if (bright>=Count_bright)
    1baa:	21 2f       	mov	r18, r17
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	28 17       	cp	r18, r24
    1bb0:	39 07       	cpc	r19, r25
    1bb2:	20 f0       	brcs	.+8      	; 0x1bbc <__vector_18+0xc0>
		DISPLAY_ON();
    1bb4:	82 b1       	in	r24, 0x02	; 2
    1bb6:	8b 7f       	andi	r24, 0xFB	; 251
    1bb8:	82 b9       	out	0x02, r24	; 2
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <__vector_18+0xc6>
		else
		DISPLAY_OFF();		
    1bbc:	82 b1       	in	r24, 0x02	; 2
    1bbe:	84 60       	ori	r24, 0x04	; 4
    1bc0:	82 b9       	out	0x02, r24	; 2
		if (Count_bright==16) {Count_bright=0;}		
    1bc2:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <Count_bright>
    1bc6:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <Count_bright+0x1>
    1bca:	40 97       	sbiw	r24, 0x10	; 16
    1bcc:	b1 f4       	brne	.+44     	; 0x1bfa <__vector_18+0xfe>
    1bce:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <Count_bright+0x1>
    1bd2:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <Count_bright>
    1bd6:	11 c0       	rjmp	.+34     	; 0x1bfa <__vector_18+0xfe>
	}
	else if (Timer_bright>=0xfff0 && TLC_divers){
    1bd8:	c0 3f       	cpi	r28, 0xF0	; 240
    1bda:	df 4f       	sbci	r29, 0xFF	; 255
    1bdc:	70 f0       	brcs	.+28     	; 0x1bfa <__vector_18+0xfe>
    1bde:	00 23       	and	r16, r16
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <__vector_18+0xfe>
		TLC_config_byte(bright,eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS));
    1be2:	88 e0       	ldi	r24, 0x08	; 8
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1bea:	68 2f       	mov	r22, r24
    1bec:	81 2f       	mov	r24, r17
    1bee:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TLC_config_byte>
		Timer_bright=0;
    1bf2:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <Timer_bright+0x1>
    1bf6:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <Timer_bright>
	}
	
	
    Timer_devide++;
    1bfa:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <Timer_devide>
    1bfe:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <Timer_devide+0x1>
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <Timer_devide+0x1>
    1c08:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Timer_devide>
    // timer for 500 ms Crystal * 250
    if (Timer_devide >= CRYSTAL_USE * 250) {
    1c0c:	80 3d       	cpi	r24, 0xD0	; 208
    1c0e:	97 40       	sbci	r25, 0x07	; 7
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <__vector_18+0x118>
    1c12:	f8 c0       	rjmp	.+496    	; 0x1e04 <__vector_18+0x308>
        PORTE ^= RED_LED;
    1c14:	9e b1       	in	r25, 0x0e	; 14
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	89 27       	eor	r24, r25
    1c1a:	8e b9       	out	0x0e, r24	; 14
        Timer_devide = 0;
    1c1c:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <Timer_devide+0x1>
    1c20:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <Timer_devide>
		if (Speaker_delay_open)
    1c24:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <Speaker_delay_open>
    1c28:	88 23       	and	r24, r24
    1c2a:	49 f0       	breq	.+18     	; 0x1c3e <__vector_18+0x142>
		{
			Speaker_delay_open--;
    1c2c:	81 50       	subi	r24, 0x01	; 1
    1c2e:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Speaker_delay_open>
			if (!Speaker_delay_open)
    1c32:	81 11       	cpse	r24, r1
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <__vector_18+0x142>
			Buzzer(0,0);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
		//check limit for relay with hysterisys 
		if ((bright+1) < eeprom_read_byte((uint8_t*)F_eep+light_swhitch)) {
    1c3e:	c1 2f       	mov	r28, r17
    1c40:	d0 e0       	ldi	r29, 0x00	; 0
    1c42:	7e 01       	movw	r14, r28
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	e8 1a       	sub	r14, r24
    1c48:	f8 0a       	sbc	r15, r24
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	e8 16       	cp	r14, r24
    1c56:	f9 06       	cpc	r15, r25
    1c58:	24 f4       	brge	.+8      	; 0x1c62 <__vector_18+0x166>
			RELAY_ON();
    1c5a:	8e b1       	in	r24, 0x0e	; 14
    1c5c:	80 62       	ori	r24, 0x20	; 32
    1c5e:	8e b9       	out	0x0e, r24	; 14
    1c60:	07 c0       	rjmp	.+14     	; 0x1c70 <__vector_18+0x174>
		}else if ((bright-1) > eeprom_read_byte((uint8_t*)F_eep+light_swhitch)) {
    1c62:	21 97       	sbiw	r28, 0x01	; 1
    1c64:	8c 17       	cp	r24, r28
    1c66:	9d 07       	cpc	r25, r29
    1c68:	1c f4       	brge	.+6      	; 0x1c70 <__vector_18+0x174>
			RELAY_OFF();
    1c6a:	8e b1       	in	r24, 0x0e	; 14
    1c6c:	8f 7d       	andi	r24, 0xDF	; 223
    1c6e:	8e b9       	out	0x0e, r24	; 14
		}
		

        if (user_instruction == 0) {
    1c70:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1c74:	81 11       	cpse	r24, r1
    1c76:	75 c0       	rjmp	.+234    	; 0x1d62 <__vector_18+0x266>
            Program_display_time++;
    1c78:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <Program_display_time>
    1c7c:	c1 e0       	ldi	r28, 0x01	; 1
    1c7e:	c2 0f       	add	r28, r18
    1c80:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <Program_display_time>
            int8_t display_eep = eeprom_read_byte((uint8_t * ) F_eep + Display_mode) & 0x0f;
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1c8c:	d8 2f       	mov	r29, r24
            int8_t Speed_eep = eeprom_read_byte((uint8_t * ) F_eep + Speed) & 0x0f;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1c96:	8f 70       	andi	r24, 0x0F	; 15
            if (Speed_eep > 9) {
    1c98:	8a 30       	cpi	r24, 0x0A	; 10
    1c9a:	0c f0       	brlt	.+2      	; 0x1c9e <__vector_18+0x1a2>
                Speed_eep = 9;
    1c9c:	89 e0       	ldi	r24, 0x09	; 9
            }
            if (Program_display_time > Speed_eep * 2) {
    1c9e:	2c 2f       	mov	r18, r28
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	08 2e       	mov	r0, r24
    1ca4:	00 0c       	add	r0, r0
    1ca6:	99 0b       	sbc	r25, r25
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	82 17       	cp	r24, r18
    1cae:	93 07       	cpc	r25, r19
    1cb0:	0c f0       	brlt	.+2      	; 0x1cb4 <__vector_18+0x1b8>
    1cb2:	40 c0       	rjmp	.+128    	; 0x1d34 <__vector_18+0x238>
                int8_t display_eep = eeprom_read_byte((uint8_t * ) F_eep + Display_mode) & 0x0f;

                if (Program_display == 1 && display_eep & 1) {
    1cb4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Program_display>
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	51 f4       	brne	.+20     	; 0x1cd0 <__vector_18+0x1d4>
    1cbc:	d0 ff       	sbrs	r29, 0
    1cbe:	08 c0       	rjmp	.+16     	; 0x1cd0 <__vector_18+0x1d4>
                    //Clock_blink = 0x80;
                    //display_Clock();
					Clock_blink_on = 1;
    1cc0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <Clock_blink_on>
                    Program_display = 2;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
                    Program_display_time = 0;
    1cca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Program_display_time>
    1cce:	32 c0       	rjmp	.+100    	; 0x1d34 <__vector_18+0x238>
                } else if (Program_display == 2 && display_eep & 2) {
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	61 f4       	brne	.+24     	; 0x1cec <__vector_18+0x1f0>
    1cd4:	d1 ff       	sbrs	r29, 1
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <__vector_18+0x1f0>
                    Clock_blink_on = 0;
    1cd8:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <Clock_blink_on>
                    display_Date();
    1cdc:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <display_Date>
                    Program_display = 3;
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
                    Program_display_time = 0;
    1ce6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Program_display_time>
    1cea:	24 c0       	rjmp	.+72     	; 0x1d34 <__vector_18+0x238>
                } else if (Program_display == 3 && display_eep & 4 ) {
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	e1 f4       	brne	.+56     	; 0x1d28 <__vector_18+0x22c>
    1cf0:	d2 ff       	sbrs	r29, 2
    1cf2:	1a c0       	rjmp	.+52     	; 0x1d28 <__vector_18+0x22c>
                    Clock_blink_on = 0;
    1cf4:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <Clock_blink_on>
					if (bright<14 && !TLC_divers){DISPLAY_OFF();}else{DISPLAY_ON();}
    1cf8:	1e 30       	cpi	r17, 0x0E	; 14
    1cfa:	30 f4       	brcc	.+12     	; 0x1d08 <__vector_18+0x20c>
    1cfc:	01 11       	cpse	r16, r1
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <__vector_18+0x20c>
    1d00:	82 b1       	in	r24, 0x02	; 2
    1d02:	84 60       	ori	r24, 0x04	; 4
    1d04:	82 b9       	out	0x02, r24	; 2
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <__vector_18+0x212>
    1d08:	82 b1       	in	r24, 0x02	; 2
    1d0a:	8b 7f       	andi	r24, 0xFB	; 251
    1d0c:	82 b9       	out	0x02, r24	; 2
                    display_temperature();
    1d0e:	0e 94 45 0a 	call	0x148a	; 0x148a <display_temperature>
					DISPLAY_ON();
    1d12:	82 b1       	in	r24, 0x02	; 2
    1d14:	8b 7f       	andi	r24, 0xFB	; 251
    1d16:	82 b9       	out	0x02, r24	; 2
                    Program_display = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
                    Program_display_time = 0;
    1d1e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Program_display_time>
					Clock_blink = 0x00;
    1d22:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <__vector_18+0x238>
                } else {
                    Program_display++;
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
					//if (eeprom_read_byte((uint8_t*)FAV_eep + Separate_temp)==4)
					//Read_temperature();
                    display_init(0);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
                }
            }
            if (Clock_blink_on) {
    1d34:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <Clock_blink_on>
    1d38:	88 23       	and	r24, r24
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <__vector_18+0x242>
    1d3c:	63 c0       	rjmp	.+198    	; 0x1e04 <__vector_18+0x308>
				int8_t a = eeprom_read_byte((uint8_t * ) F_eep + Clock_blink_enable);
    1d3e:	87 e0       	ldi	r24, 0x07	; 7
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
                if (a) {Clock_blink ^= _BV(7);}else{Clock_blink =0x80;}
    1d46:	88 23       	and	r24, r24
    1d48:	31 f0       	breq	.+12     	; 0x1d56 <__vector_18+0x25a>
    1d4a:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Clock_blink>
    1d4e:	80 58       	subi	r24, 0x80	; 128
    1d50:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <__vector_18+0x260>
    1d56:	80 e8       	ldi	r24, 0x80	; 128
    1d58:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
                display_Clock();
    1d5c:	0e 94 ab 09 	call	0x1356	; 0x1356 <display_Clock>
    1d60:	51 c0       	rjmp	.+162    	; 0x1e04 <__vector_18+0x308>
            }
        } else if (Menu_blink_on) {
    1d62:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <Menu_blink_on>
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__vector_18+0x270>
    1d6a:	41 c0       	rjmp	.+130    	; 0x1dee <__vector_18+0x2f2>
            //blink for set clock
            Clock_blink ^= _BV(7);
    1d6c:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Clock_blink>
    1d70:	80 58       	subi	r24, 0x80	; 128
    1d72:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
            if (Clock_blink) {
    1d76:	88 23       	and	r24, r24
    1d78:	09 f1       	breq	.+66     	; 0x1dbc <__vector_18+0x2c0>
                display_out_buf[cursor - shift] &= 0b10000000;
    1d7a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    1d7e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <shift>
    1d82:	0e 2e       	mov	r0, r30
    1d84:	00 0c       	add	r0, r0
    1d86:	ff 0b       	sbc	r31, r31
    1d88:	e8 1b       	sub	r30, r24
    1d8a:	f1 09       	sbc	r31, r1
    1d8c:	87 fd       	sbrc	r24, 7
    1d8e:	f3 95       	inc	r31
    1d90:	e1 58       	subi	r30, 0x81	; 129
    1d92:	fb 4f       	sbci	r31, 0xFB	; 251
    1d94:	80 81       	ld	r24, Z
    1d96:	80 78       	andi	r24, 0x80	; 128
    1d98:	80 83       	st	Z, r24
                display_out_buf[cursor - shift] |= 0x0D;
    1d9a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    1d9e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <shift>
    1da2:	0e 2e       	mov	r0, r30
    1da4:	00 0c       	add	r0, r0
    1da6:	ff 0b       	sbc	r31, r31
    1da8:	e8 1b       	sub	r30, r24
    1daa:	f1 09       	sbc	r31, r1
    1dac:	87 fd       	sbrc	r24, 7
    1dae:	f3 95       	inc	r31
    1db0:	e1 58       	subi	r30, 0x81	; 129
    1db2:	fb 4f       	sbci	r31, 0xFB	; 251
    1db4:	80 81       	ld	r24, Z
    1db6:	8d 60       	ori	r24, 0x0D	; 13
    1db8:	80 83       	st	Z, r24
    1dba:	16 c0       	rjmp	.+44     	; 0x1de8 <__vector_18+0x2ec>
            } else {
                display_out_buf[cursor - shift] = set_clock_buf[cursor];
    1dbc:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    1dc0:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <shift>
    1dc4:	0e 2e       	mov	r0, r30
    1dc6:	00 0c       	add	r0, r0
    1dc8:	ff 0b       	sbc	r31, r31
    1dca:	e8 1b       	sub	r30, r24
    1dcc:	f1 09       	sbc	r31, r1
    1dce:	87 fd       	sbrc	r24, 7
    1dd0:	f3 95       	inc	r31
    1dd2:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <cursor>
    1dd6:	0a 2e       	mov	r0, r26
    1dd8:	00 0c       	add	r0, r0
    1dda:	bb 0b       	sbc	r27, r27
    1ddc:	a7 58       	subi	r26, 0x87	; 135
    1dde:	bb 4f       	sbci	r27, 0xFB	; 251
    1de0:	8c 91       	ld	r24, X
    1de2:	e1 58       	subi	r30, 0x81	; 129
    1de4:	fb 4f       	sbci	r31, 0xFB	; 251
    1de6:	80 83       	st	Z, r24
            }
            Display_Out();
    1de8:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    1dec:	0b c0       	rjmp	.+22     	; 0x1e04 <__vector_18+0x308>
        } else if (Timer_blink_on) {
    1dee:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <Timer_blink_on>
    1df2:	88 23       	and	r24, r24
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <__vector_18+0x308>
			Clock_blink ^= _BV(7);
    1df6:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Clock_blink>
    1dfa:	80 58       	subi	r24, 0x80	; 128
    1dfc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
			timer_display();
    1e00:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
		}
    }
	if (!eeprom_read_byte((uint8_t*)F_eep + Brightness))
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	12 c0       	rjmp	.+36     	; 0x1e34 <__vector_18+0x338>
	{
		Timer_devide_photo++;
    1e10:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <Timer_devide_photo>
    1e14:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <Timer_devide_photo+0x1>
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <Timer_devide_photo+0x1>
    1e1e:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <Timer_devide_photo>
		if (Timer_devide_photo >= CRYSTAL_USE * 1500){
    1e22:	80 3e       	cpi	r24, 0xE0	; 224
    1e24:	9e 42       	sbci	r25, 0x2E	; 46
    1e26:	30 f0       	brcs	.+12     	; 0x1e34 <__vector_18+0x338>
			Timer_devide_photo = 0;
    1e28:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <Timer_devide_photo+0x1>
    1e2c:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <Timer_devide_photo>
			photo_sample();
    1e30:	0e 94 38 0c 	call	0x1870	; 0x1870 <photo_sample>
		}
	}
}
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__vector_11>:

ISR(TIMER2_OVF_vect)
{
    1e62:	1f 92       	push	r1
    1e64:	0f 92       	push	r0
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	1f 93       	push	r17
    1e6e:	2f 93       	push	r18
    1e70:	3f 93       	push	r19
    1e72:	4f 93       	push	r20
    1e74:	5f 93       	push	r21
    1e76:	6f 93       	push	r22
    1e78:	7f 93       	push	r23
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	af 93       	push	r26
    1e80:	bf 93       	push	r27
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ef 93       	push	r30
    1e88:	ff 93       	push	r31
	uint8_t a = timer[0], b = timer[1], c = timer[2];
    1e8a:	e6 e7       	ldi	r30, 0x76	; 118
    1e8c:	f4 e0       	ldi	r31, 0x04	; 4
    1e8e:	10 81       	ld	r17, Z
    1e90:	d1 81       	ldd	r29, Z+1	; 0x01
    1e92:	22 81       	ldd	r18, Z+2	; 0x02
	
	if (user_instruction=='A' | user_instruction=='B')
    1e94:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1e98:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <user_instruction>
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	81 34       	cpi	r24, 0x41	; 65
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <__vector_11+0x42>
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	32 34       	cpi	r19, 0x42	; 66
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <__vector_11+0x4a>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	89 2b       	or	r24, r25
    1eae:	51 f0       	breq	.+20     	; 0x1ec4 <__vector_11+0x62>
	{
		c--;	//Counter Down process
    1eb0:	cf ef       	ldi	r28, 0xFF	; 255
    1eb2:	c2 0f       	add	r28, r18
				b=0x59;
				a--;
			}else if ((b&0x0f)>9) {
				b-=6;
			}
		}else if ((c&0x0f)>9) {
    1eb4:	8c 2f       	mov	r24, r28
    1eb6:	8f 70       	andi	r24, 0x0F	; 15
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0a 97       	sbiw	r24, 0x0a	; 10
    1ebc:	04 f1       	brlt	.+64     	; 0x1efe <__vector_11+0x9c>
			c-=6;
    1ebe:	c9 ef       	ldi	r28, 0xF9	; 249
    1ec0:	c2 0f       	add	r28, r18
    1ec2:	1d c0       	rjmp	.+58     	; 0x1efe <__vector_11+0x9c>
		}
	}
	else
	{
		c++;	//Up counter process 
    1ec4:	c1 e0       	ldi	r28, 0x01	; 1
    1ec6:	c2 0f       	add	r28, r18
		if ((c&0x0f)>9)	{
    1ec8:	8c 2f       	mov	r24, r28
    1eca:	8f 70       	andi	r24, 0x0F	; 15
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0a 97       	sbiw	r24, 0x0a	; 10
    1ed0:	b4 f0       	brlt	.+44     	; 0x1efe <__vector_11+0x9c>
			if (c>=0x5a) {
    1ed2:	ca 35       	cpi	r28, 0x5A	; 90
    1ed4:	60 f0       	brcs	.+24     	; 0x1eee <__vector_11+0x8c>
				b++;
    1ed6:	21 e0       	ldi	r18, 0x01	; 1
    1ed8:	2d 0f       	add	r18, r29
				if ((b&0x0f)>9)	{
    1eda:	82 2f       	mov	r24, r18
    1edc:	8f 70       	andi	r24, 0x0F	; 15
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0a 97       	sbiw	r24, 0x0a	; 10
    1ee2:	44 f0       	brlt	.+16     	; 0x1ef4 <__vector_11+0x92>
					if (b>=0x9a) { // διόρθωση για γήπεδα ποσοσφαίρου 0-99 λεπτά
    1ee4:	2a 39       	cpi	r18, 0x9A	; 154
    1ee6:	48 f4       	brcc	.+18     	; 0x1efa <__vector_11+0x98>
						//a++;
						//if ((a&0x0f)>9)	{a+=6;}
						b=0;
					}else{b+=6;}				
    1ee8:	d9 5f       	subi	r29, 0xF9	; 249
				}
				c=0;
    1eea:	c0 e0       	ldi	r28, 0x00	; 0
    1eec:	08 c0       	rjmp	.+16     	; 0x1efe <__vector_11+0x9c>
			}else{c+=6;}			
    1eee:	c7 e0       	ldi	r28, 0x07	; 7
    1ef0:	c2 0f       	add	r28, r18
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <__vector_11+0x9c>
	else
	{
		c++;	//Up counter process 
		if ((c&0x0f)>9)	{
			if (c>=0x5a) {
				b++;
    1ef4:	d2 2f       	mov	r29, r18
						//a++;
						//if ((a&0x0f)>9)	{a+=6;}
						b=0;
					}else{b+=6;}				
				}
				c=0;
    1ef6:	c0 e0       	ldi	r28, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <__vector_11+0x9c>
    1efa:	c0 e0       	ldi	r28, 0x00	; 0
				b++;
				if ((b&0x0f)>9)	{
					if (b>=0x9a) { // διόρθωση για γήπεδα ποσοσφαίρου 0-99 λεπτά
						//a++;
						//if ((a&0x0f)>9)	{a+=6;}
						b=0;
    1efc:	d0 e0       	ldi	r29, 0x00	; 0
				c=0;
			}else{c+=6;}			
		}
	}
	
	timer[0]=a; timer[1]=b; timer[2]=c;
    1efe:	e6 e7       	ldi	r30, 0x76	; 118
    1f00:	f4 e0       	ldi	r31, 0x04	; 4
    1f02:	d1 83       	std	Z+1, r29	; 0x01
    1f04:	c2 83       	std	Z+2, r28	; 0x02
/*	if (timer[1]>=0x9A)
	{
		timer[1] = 0;
	}*/
	timer_display();
    1f06:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	if (user_instruction=='A' || user_instruction=='B')
    1f0a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1f0e:	81 34       	cpi	r24, 0x41	; 65
    1f10:	29 f0       	breq	.+10     	; 0x1f1c <__vector_11+0xba>
    1f12:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1f16:	82 34       	cpi	r24, 0x42	; 66
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <__vector_11+0xba>
    1f1a:	49 c0       	rjmp	.+146    	; 0x1fae <__vector_11+0x14c>
	{
		if (a==0 && b==0 && c==0)
    1f1c:	11 11       	cpse	r17, r1
    1f1e:	47 c0       	rjmp	.+142    	; 0x1fae <__vector_11+0x14c>
    1f20:	d1 11       	cpse	r29, r1
    1f22:	45 c0       	rjmp	.+138    	; 0x1fae <__vector_11+0x14c>
    1f24:	c1 11       	cpse	r28, r1
    1f26:	43 c0       	rjmp	.+134    	; 0x1fae <__vector_11+0x14c>
		{
			a=3;
			TCCR2B =0;
    1f28:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	timer_display();
	if (user_instruction=='A' || user_instruction=='B')
	{
		if (a==0 && b==0 && c==0)
		{
			a=3;
    1f2c:	c3 e0       	ldi	r28, 0x03	; 3
			TCCR2B =0;
			while (a>0)
    1f2e:	2e c0       	rjmp	.+92     	; 0x1f8c <__vector_11+0x12a>
			{
				Buzzer(1,4000);
    1f30:	60 ea       	ldi	r22, 0xA0	; 160
    1f32:	7f e0       	ldi	r23, 0x0F	; 15
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				wdt_reset();
    1f3a:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f3c:	2f ef       	ldi	r18, 0xFF	; 255
    1f3e:	89 e6       	ldi	r24, 0x69	; 105
    1f40:	98 e1       	ldi	r25, 0x18	; 24
    1f42:	21 50       	subi	r18, 0x01	; 1
    1f44:	80 40       	sbci	r24, 0x00	; 0
    1f46:	90 40       	sbci	r25, 0x00	; 0
    1f48:	e1 f7       	brne	.-8      	; 0x1f42 <__vector_11+0xe0>
    1f4a:	00 c0       	rjmp	.+0      	; 0x1f4c <__vector_11+0xea>
    1f4c:	00 00       	nop
				_delay_ms(1000);
				Buzzer(0,4000);
    1f4e:	60 ea       	ldi	r22, 0xA0	; 160
    1f50:	7f e0       	ldi	r23, 0x0F	; 15
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				b=0;
    1f58:	8d 2f       	mov	r24, r29
				while (b<4){display_out_buf[b]= 0x0d;b++;}
    1f5a:	07 c0       	rjmp	.+14     	; 0x1f6a <__vector_11+0x108>
    1f5c:	e8 2f       	mov	r30, r24
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	e1 58       	subi	r30, 0x81	; 129
    1f62:	fb 4f       	sbci	r31, 0xFB	; 251
    1f64:	9d e0       	ldi	r25, 0x0D	; 13
    1f66:	90 83       	st	Z, r25
    1f68:	8f 5f       	subi	r24, 0xFF	; 255
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	b8 f3       	brcs	.-18     	; 0x1f5c <__vector_11+0xfa>
				Display_Out();
    1f6e:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				wdt_reset();
    1f72:	a8 95       	wdr
    1f74:	2f ef       	ldi	r18, 0xFF	; 255
    1f76:	89 e6       	ldi	r24, 0x69	; 105
    1f78:	98 e1       	ldi	r25, 0x18	; 24
    1f7a:	21 50       	subi	r18, 0x01	; 1
    1f7c:	80 40       	sbci	r24, 0x00	; 0
    1f7e:	90 40       	sbci	r25, 0x00	; 0
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <__vector_11+0x118>
    1f82:	00 c0       	rjmp	.+0      	; 0x1f84 <__vector_11+0x122>
    1f84:	00 00       	nop
				_delay_ms(1000);
				timer_display();
    1f86:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				a--;
    1f8a:	c1 50       	subi	r28, 0x01	; 1
	{
		if (a==0 && b==0 && c==0)
		{
			a=3;
			TCCR2B =0;
			while (a>0)
    1f8c:	c1 11       	cpse	r28, r1
    1f8e:	d0 cf       	rjmp	.-96     	; 0x1f30 <__vector_11+0xce>
				_delay_ms(1000);
				timer_display();
				a--;
			}
			//End of counter down
			wdt_reset();
    1f90:	a8 95       	wdr
    1f92:	2f ef       	ldi	r18, 0xFF	; 255
    1f94:	8d e3       	ldi	r24, 0x3D	; 61
    1f96:	99 e4       	ldi	r25, 0x49	; 73
    1f98:	21 50       	subi	r18, 0x01	; 1
    1f9a:	80 40       	sbci	r24, 0x00	; 0
    1f9c:	90 40       	sbci	r25, 0x00	; 0
    1f9e:	e1 f7       	brne	.-8      	; 0x1f98 <__vector_11+0x136>
    1fa0:	00 c0       	rjmp	.+0      	; 0x1fa2 <__vector_11+0x140>
    1fa2:	00 00       	nop
			_delay_ms(3000);
			user_instruction = 0;
    1fa4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
		}
	}
	chek_timer_alarms();
    1fae:	0e 94 92 0c 	call	0x1924	; 0x1924 <chek_timer_alarms>
}
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	bf 91       	pop	r27
    1fbc:	af 91       	pop	r26
    1fbe:	9f 91       	pop	r25
    1fc0:	8f 91       	pop	r24
    1fc2:	7f 91       	pop	r23
    1fc4:	6f 91       	pop	r22
    1fc6:	5f 91       	pop	r21
    1fc8:	4f 91       	pop	r20
    1fca:	3f 91       	pop	r19
    1fcc:	2f 91       	pop	r18
    1fce:	1f 91       	pop	r17
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <F_menu>:
	}
	
	Display_Out();
}

void F_menu(void){
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	28 97       	sbiw	r28, 0x08	; 8
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
	char F1_array[sizeof(F_eep)];
	int8_t i;
	for (i=0;i<sizeof(F_eep);i++)
    1ff6:	10 e0       	ldi	r17, 0x00	; 0
    1ff8:	2a c0       	rjmp	.+84     	; 0x204e <F_menu+0x74>
	{
		F1_array[i]=eeprom_read_byte((uint8_t*)F_eep+i);
    1ffa:	e1 2e       	mov	r14, r17
    1ffc:	01 2e       	mov	r0, r17
    1ffe:	00 0c       	add	r0, r0
    2000:	ff 08       	sbc	r15, r15
    2002:	c7 01       	movw	r24, r14
    2004:	80 50       	subi	r24, 0x00	; 0
    2006:	90 40       	sbci	r25, 0x00	; 0
    2008:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    200c:	e1 e0       	ldi	r30, 0x01	; 1
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	ec 0f       	add	r30, r28
    2012:	fd 1f       	adc	r31, r29
    2014:	ee 0d       	add	r30, r14
    2016:	ff 1d       	adc	r31, r15
    2018:	80 83       	st	Z, r24
		if (i == Brightness || i == light_swhitch) {
    201a:	12 50       	subi	r17, 0x02	; 2
    201c:	12 30       	cpi	r17, 0x02	; 2
    201e:	58 f4       	brcc	.+22     	; 0x2036 <F_menu+0x5c>
			if (F1_array[i]>16){F1_array[i]=16;};
    2020:	81 31       	cpi	r24, 0x11	; 17
    2022:	98 f0       	brcs	.+38     	; 0x204a <F_menu+0x70>
    2024:	e1 e0       	ldi	r30, 0x01	; 1
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	ec 0f       	add	r30, r28
    202a:	fd 1f       	adc	r31, r29
    202c:	ee 0d       	add	r30, r14
    202e:	ff 1d       	adc	r31, r15
    2030:	80 e1       	ldi	r24, 0x10	; 16
    2032:	80 83       	st	Z, r24
    2034:	0a c0       	rjmp	.+20     	; 0x204a <F_menu+0x70>
		}else if (F1_array[i]>9) {
    2036:	8a 30       	cpi	r24, 0x0A	; 10
    2038:	40 f0       	brcs	.+16     	; 0x204a <F_menu+0x70>
			F1_array[i]=9;
    203a:	e1 e0       	ldi	r30, 0x01	; 1
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	ec 0f       	add	r30, r28
    2040:	fd 1f       	adc	r31, r29
    2042:	ee 0d       	add	r30, r14
    2044:	ff 1d       	adc	r31, r15
    2046:	89 e0       	ldi	r24, 0x09	; 9
    2048:	80 83       	st	Z, r24
}

void F_menu(void){
	char F1_array[sizeof(F_eep)];
	int8_t i;
	for (i=0;i<sizeof(F_eep);i++)
    204a:	11 e0       	ldi	r17, 0x01	; 1
    204c:	10 0f       	add	r17, r16
    204e:	01 2f       	mov	r16, r17
    2050:	18 30       	cpi	r17, 0x08	; 8
    2052:	98 f2       	brcs	.-90     	; 0x1ffa <F_menu+0x20>
		}else if (F1_array[i]>9) {
			F1_array[i]=9;
		}		
	}
	i=0;
	set_clock_buf[0]= 0x11; //F character
    2054:	e9 e7       	ldi	r30, 0x79	; 121
    2056:	f4 e0       	ldi	r31, 0x04	; 4
    2058:	81 e1       	ldi	r24, 0x11	; 17
    205a:	80 83       	st	Z, r24
	set_clock_buf[1]= i+1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= 0x0d; //space char
    2060:	8d e0       	ldi	r24, 0x0D	; 13
    2062:	82 83       	std	Z+2, r24	; 0x02
	set_clock_buf[3]= F1_array[i];//eeprom_read_byte((uint8_t*)&F_eep)&0x0f;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	83 83       	std	Z+3, r24	; 0x03
	if (set_clock_buf[3]>9)	{set_clock_buf[3]=7;}
    2068:	8a 30       	cpi	r24, 0x0A	; 10
    206a:	18 f0       	brcs	.+6      	; 0x2072 <F_menu+0x98>
    206c:	87 e0       	ldi	r24, 0x07	; 7
    206e:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <set_clock_buf+0x3>
	cursor = 3;
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
	shift = 0;
    2078:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Menu_blink_on=1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	Display_set_menu();
    2082:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
	user_instruction='f';
    2086:	86 e6       	ldi	r24, 0x66	; 102
    2088:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
			if (F1_array[i]>16){F1_array[i]=16;};
		}else if (F1_array[i]>9) {
			F1_array[i]=9;
		}		
	}
	i=0;
    208c:	10 e0       	ldi	r17, 0x00	; 0
	cursor = 3;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='f';
	while(user_instruction!=0){
    208e:	c4 c1       	rjmp	.+904    	; 0x2418 <F_menu+0x43e>
		if(key>=0 && key<10)
    2090:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2094:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2098:	99 23       	and	r25, r25
    209a:	0c f4       	brge	.+2      	; 0x209e <F_menu+0xc4>
    209c:	51 c0       	rjmp	.+162    	; 0x2140 <F_menu+0x166>
    209e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    20a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    20a6:	0a 97       	sbiw	r24, 0x0a	; 10
    20a8:	0c f0       	brlt	.+2      	; 0x20ac <F_menu+0xd2>
    20aa:	4a c0       	rjmp	.+148    	; 0x2140 <F_menu+0x166>
		{
			set_clock_buf[cursor]= key;
    20ac:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    20b0:	0e 2e       	mov	r0, r30
    20b2:	00 0c       	add	r0, r0
    20b4:	ff 0b       	sbc	r31, r31
    20b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    20ba:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    20be:	e7 58       	subi	r30, 0x87	; 135
    20c0:	fb 4f       	sbci	r31, 0xFB	; 251
    20c2:	80 83       	st	Z, r24
			if(i==Brightness || i==light_swhitch){
    20c4:	8e ef       	ldi	r24, 0xFE	; 254
    20c6:	81 0f       	add	r24, r17
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	d8 f4       	brcc	.+54     	; 0x2102 <F_menu+0x128>
				F1_array[i]=(set_clock_buf[2]*10)+set_clock_buf[3];
    20cc:	e9 e7       	ldi	r30, 0x79	; 121
    20ce:	f4 e0       	ldi	r31, 0x04	; 4
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	e1 e0       	ldi	r30, 0x01	; 1
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	ec 0f       	add	r30, r28
    20da:	fd 1f       	adc	r31, r29
    20dc:	e1 0f       	add	r30, r17
    20de:	f1 1d       	adc	r31, r1
    20e0:	17 fd       	sbrc	r17, 7
    20e2:	fa 95       	dec	r31
    20e4:	88 0f       	add	r24, r24
    20e6:	28 2f       	mov	r18, r24
    20e8:	22 0f       	add	r18, r18
    20ea:	22 0f       	add	r18, r18
    20ec:	82 0f       	add	r24, r18
    20ee:	89 0f       	add	r24, r25
    20f0:	80 83       	st	Z, r24
				if(cursor<3){cursor=3;}
    20f2:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	8c f4       	brge	.+34     	; 0x211c <F_menu+0x142>
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    2100:	0d c0       	rjmp	.+26     	; 0x211c <F_menu+0x142>
			}else{
				F1_array[i]=key;
    2102:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2106:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    210a:	e1 e0       	ldi	r30, 0x01	; 1
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	ec 0f       	add	r30, r28
    2110:	fd 1f       	adc	r31, r29
    2112:	e1 0f       	add	r30, r17
    2114:	f1 1d       	adc	r31, r1
    2116:	17 fd       	sbrc	r17, 7
    2118:	fa 95       	dec	r31
    211a:	80 83       	st	Z, r24
			}
			
			key=-1;
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	9f ef       	ldi	r25, 0xFF	; 255
    2120:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2124:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<3){cursor++;}
    2128:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    212c:	83 30       	cpi	r24, 0x03	; 3
    212e:	2c f4       	brge	.+10     	; 0x213a <F_menu+0x160>
    2130:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_menu();
    213a:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    213e:	6c c1       	rjmp	.+728    	; 0x2418 <F_menu+0x43e>
		}
		else if (key==right && i<(sizeof(F_eep)-1))
    2140:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2144:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2148:	46 97       	sbiw	r24, 0x16	; 22
    214a:	c1 f4       	brne	.+48     	; 0x217c <F_menu+0x1a2>
    214c:	17 30       	cpi	r17, 0x07	; 7
    214e:	b0 f4       	brcc	.+44     	; 0x217c <F_menu+0x1a2>
		{
			i++;
    2150:	1f 5f       	subi	r17, 0xFF	; 255
			key=-1;
    2152:	8f ef       	ldi	r24, 0xFF	; 255
    2154:	9f ef       	ldi	r25, 0xFF	; 255
    2156:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    215a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			F_menu_check(i,F1_array[i]);			
    215e:	e1 e0       	ldi	r30, 0x01	; 1
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	ec 0f       	add	r30, r28
    2164:	fd 1f       	adc	r31, r29
    2166:	e1 0f       	add	r30, r17
    2168:	f1 1d       	adc	r31, r1
    216a:	17 fd       	sbrc	r17, 7
    216c:	fa 95       	dec	r31
    216e:	60 81       	ld	r22, Z
    2170:	81 2f       	mov	r24, r17
    2172:	0e 94 12 0b 	call	0x1624	; 0x1624 <F_menu_check>
			Display_set_menu();
    2176:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    217a:	4e c1       	rjmp	.+668    	; 0x2418 <F_menu+0x43e>
		}
		else if (key==left && i>0)
    217c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2180:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2184:	45 97       	sbiw	r24, 0x15	; 21
    2186:	c1 f4       	brne	.+48     	; 0x21b8 <F_menu+0x1de>
    2188:	11 16       	cp	r1, r17
    218a:	b4 f4       	brge	.+44     	; 0x21b8 <F_menu+0x1de>
		{
			i--;
    218c:	11 50       	subi	r17, 0x01	; 1
			key=-1;
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	9f ef       	ldi	r25, 0xFF	; 255
    2192:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2196:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			F_menu_check(i,F1_array[i]);
    219a:	e1 e0       	ldi	r30, 0x01	; 1
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	ec 0f       	add	r30, r28
    21a0:	fd 1f       	adc	r31, r29
    21a2:	e1 0f       	add	r30, r17
    21a4:	f1 1d       	adc	r31, r1
    21a6:	17 fd       	sbrc	r17, 7
    21a8:	fa 95       	dec	r31
    21aa:	60 81       	ld	r22, Z
    21ac:	81 2f       	mov	r24, r17
    21ae:	0e 94 12 0b 	call	0x1624	; 0x1624 <F_menu_check>
			Display_set_menu();
    21b2:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    21b6:	30 c1       	rjmp	.+608    	; 0x2418 <F_menu+0x43e>
		}
		else if (key==up)
    21b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    21bc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    21c0:	40 97       	sbiw	r24, 0x10	; 16
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <F_menu+0x1ec>
    21c4:	7e c0       	rjmp	.+252    	; 0x22c2 <F_menu+0x2e8>
		{
			key=-1;				
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    21ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==Brightness && F1_array[i]<16){
    21d2:	12 30       	cpi	r17, 0x02	; 2
    21d4:	51 f5       	brne	.+84     	; 0x222a <F_menu+0x250>
    21d6:	21 2f       	mov	r18, r17
    21d8:	01 2e       	mov	r0, r17
    21da:	00 0c       	add	r0, r0
    21dc:	33 0b       	sbc	r19, r19
    21de:	e1 e0       	ldi	r30, 0x01	; 1
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	ec 0f       	add	r30, r28
    21e4:	fd 1f       	adc	r31, r29
    21e6:	e2 0f       	add	r30, r18
    21e8:	f3 1f       	adc	r31, r19
    21ea:	80 81       	ld	r24, Z
    21ec:	80 31       	cpi	r24, 0x10	; 16
    21ee:	e8 f4       	brcc	.+58     	; 0x222a <F_menu+0x250>
				F1_array[i]+=1;		
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	e1 e0       	ldi	r30, 0x01	; 1
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	ec 0f       	add	r30, r28
    21f8:	fd 1f       	adc	r31, r29
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2200:	e9 e7       	ldi	r30, 0x79	; 121
    2202:	f4 e0       	ldi	r31, 0x04	; 4
    2204:	9d ec       	ldi	r25, 0xCD	; 205
    2206:	89 9f       	mul	r24, r25
    2208:	91 2d       	mov	r25, r1
    220a:	11 24       	eor	r1, r1
    220c:	96 95       	lsr	r25
    220e:	96 95       	lsr	r25
    2210:	96 95       	lsr	r25
    2212:	29 2f       	mov	r18, r25
    2214:	2f 70       	andi	r18, 0x0F	; 15
    2216:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;		
    2218:	99 0f       	add	r25, r25
    221a:	29 2f       	mov	r18, r25
    221c:	22 0f       	add	r18, r18
    221e:	22 0f       	add	r18, r18
    2220:	92 0f       	add	r25, r18
    2222:	89 1b       	sub	r24, r25
    2224:	8f 70       	andi	r24, 0x0F	; 15
    2226:	83 83       	std	Z+3, r24	; 0x03
    2228:	49 c0       	rjmp	.+146    	; 0x22bc <F_menu+0x2e2>
			}else if (i==light_swhitch && F1_array[i]<16){
    222a:	13 30       	cpi	r17, 0x03	; 3
    222c:	51 f5       	brne	.+84     	; 0x2282 <F_menu+0x2a8>
    222e:	21 2f       	mov	r18, r17
    2230:	01 2e       	mov	r0, r17
    2232:	00 0c       	add	r0, r0
    2234:	33 0b       	sbc	r19, r19
    2236:	e1 e0       	ldi	r30, 0x01	; 1
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	ec 0f       	add	r30, r28
    223c:	fd 1f       	adc	r31, r29
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	80 81       	ld	r24, Z
    2244:	80 31       	cpi	r24, 0x10	; 16
    2246:	e8 f4       	brcc	.+58     	; 0x2282 <F_menu+0x2a8>
				F1_array[i]+=1;
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	e1 e0       	ldi	r30, 0x01	; 1
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	ec 0f       	add	r30, r28
    2250:	fd 1f       	adc	r31, r29
    2252:	e2 0f       	add	r30, r18
    2254:	f3 1f       	adc	r31, r19
    2256:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2258:	e9 e7       	ldi	r30, 0x79	; 121
    225a:	f4 e0       	ldi	r31, 0x04	; 4
    225c:	9d ec       	ldi	r25, 0xCD	; 205
    225e:	89 9f       	mul	r24, r25
    2260:	91 2d       	mov	r25, r1
    2262:	11 24       	eor	r1, r1
    2264:	96 95       	lsr	r25
    2266:	96 95       	lsr	r25
    2268:	96 95       	lsr	r25
    226a:	29 2f       	mov	r18, r25
    226c:	2f 70       	andi	r18, 0x0F	; 15
    226e:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    2270:	99 0f       	add	r25, r25
    2272:	29 2f       	mov	r18, r25
    2274:	22 0f       	add	r18, r18
    2276:	22 0f       	add	r18, r18
    2278:	92 0f       	add	r25, r18
    227a:	89 1b       	sub	r24, r25
    227c:	8f 70       	andi	r24, 0x0F	; 15
    227e:	83 83       	std	Z+3, r24	; 0x03
    2280:	1d c0       	rjmp	.+58     	; 0x22bc <F_menu+0x2e2>
			}else if (F1_array[i]<9){
    2282:	21 2f       	mov	r18, r17
    2284:	01 2e       	mov	r0, r17
    2286:	00 0c       	add	r0, r0
    2288:	33 0b       	sbc	r19, r19
    228a:	e1 e0       	ldi	r30, 0x01	; 1
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	ec 0f       	add	r30, r28
    2290:	fd 1f       	adc	r31, r29
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	80 81       	ld	r24, Z
    2298:	89 30       	cpi	r24, 0x09	; 9
    229a:	80 f4       	brcc	.+32     	; 0x22bc <F_menu+0x2e2>
				F1_array[i]+=1;
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	e1 e0       	ldi	r30, 0x01	; 1
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	ec 0f       	add	r30, r28
    22a4:	fd 1f       	adc	r31, r29
    22a6:	e2 0f       	add	r30, r18
    22a8:	f3 1f       	adc	r31, r19
    22aa:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    22ac:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    22b0:	0e 2e       	mov	r0, r30
    22b2:	00 0c       	add	r0, r0
    22b4:	ff 0b       	sbc	r31, r31
    22b6:	e7 58       	subi	r30, 0x87	; 135
    22b8:	fb 4f       	sbci	r31, 0xFB	; 251
    22ba:	80 83       	st	Z, r24
			}
			
			Display_set_menu();
    22bc:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    22c0:	ab c0       	rjmp	.+342    	; 0x2418 <F_menu+0x43e>
		}
		else if (key==down)
    22c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    22c6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    22ca:	41 97       	sbiw	r24, 0x11	; 17
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <F_menu+0x2f6>
    22ce:	7e c0       	rjmp	.+252    	; 0x23cc <F_menu+0x3f2>
		{
			key=-1;
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	9f ef       	ldi	r25, 0xFF	; 255
    22d4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    22d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==Brightness && F1_array[i]>0){
    22dc:	12 30       	cpi	r17, 0x02	; 2
    22de:	51 f5       	brne	.+84     	; 0x2334 <F_menu+0x35a>
    22e0:	21 2f       	mov	r18, r17
    22e2:	01 2e       	mov	r0, r17
    22e4:	00 0c       	add	r0, r0
    22e6:	33 0b       	sbc	r19, r19
    22e8:	e1 e0       	ldi	r30, 0x01	; 1
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	ec 0f       	add	r30, r28
    22ee:	fd 1f       	adc	r31, r29
    22f0:	e2 0f       	add	r30, r18
    22f2:	f3 1f       	adc	r31, r19
    22f4:	80 81       	ld	r24, Z
    22f6:	88 23       	and	r24, r24
    22f8:	e9 f0       	breq	.+58     	; 0x2334 <F_menu+0x35a>
				F1_array[i]-=1;
    22fa:	81 50       	subi	r24, 0x01	; 1
    22fc:	e1 e0       	ldi	r30, 0x01	; 1
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	ec 0f       	add	r30, r28
    2302:	fd 1f       	adc	r31, r29
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    230a:	e9 e7       	ldi	r30, 0x79	; 121
    230c:	f4 e0       	ldi	r31, 0x04	; 4
    230e:	9d ec       	ldi	r25, 0xCD	; 205
    2310:	89 9f       	mul	r24, r25
    2312:	91 2d       	mov	r25, r1
    2314:	11 24       	eor	r1, r1
    2316:	96 95       	lsr	r25
    2318:	96 95       	lsr	r25
    231a:	96 95       	lsr	r25
    231c:	29 2f       	mov	r18, r25
    231e:	2f 70       	andi	r18, 0x0F	; 15
    2320:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    2322:	99 0f       	add	r25, r25
    2324:	29 2f       	mov	r18, r25
    2326:	22 0f       	add	r18, r18
    2328:	22 0f       	add	r18, r18
    232a:	92 0f       	add	r25, r18
    232c:	89 1b       	sub	r24, r25
    232e:	8f 70       	andi	r24, 0x0F	; 15
    2330:	83 83       	std	Z+3, r24	; 0x03
    2332:	49 c0       	rjmp	.+146    	; 0x23c6 <F_menu+0x3ec>
				}else if (i==light_swhitch && F1_array[i]>0){
    2334:	13 30       	cpi	r17, 0x03	; 3
    2336:	51 f5       	brne	.+84     	; 0x238c <F_menu+0x3b2>
    2338:	21 2f       	mov	r18, r17
    233a:	01 2e       	mov	r0, r17
    233c:	00 0c       	add	r0, r0
    233e:	33 0b       	sbc	r19, r19
    2340:	e1 e0       	ldi	r30, 0x01	; 1
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	ec 0f       	add	r30, r28
    2346:	fd 1f       	adc	r31, r29
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	e9 f0       	breq	.+58     	; 0x238c <F_menu+0x3b2>
				F1_array[i]-=1;
    2352:	81 50       	subi	r24, 0x01	; 1
    2354:	e1 e0       	ldi	r30, 0x01	; 1
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	ec 0f       	add	r30, r28
    235a:	fd 1f       	adc	r31, r29
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2362:	e9 e7       	ldi	r30, 0x79	; 121
    2364:	f4 e0       	ldi	r31, 0x04	; 4
    2366:	9d ec       	ldi	r25, 0xCD	; 205
    2368:	89 9f       	mul	r24, r25
    236a:	91 2d       	mov	r25, r1
    236c:	11 24       	eor	r1, r1
    236e:	96 95       	lsr	r25
    2370:	96 95       	lsr	r25
    2372:	96 95       	lsr	r25
    2374:	29 2f       	mov	r18, r25
    2376:	2f 70       	andi	r18, 0x0F	; 15
    2378:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    237a:	99 0f       	add	r25, r25
    237c:	29 2f       	mov	r18, r25
    237e:	22 0f       	add	r18, r18
    2380:	22 0f       	add	r18, r18
    2382:	92 0f       	add	r25, r18
    2384:	89 1b       	sub	r24, r25
    2386:	8f 70       	andi	r24, 0x0F	; 15
    2388:	83 83       	std	Z+3, r24	; 0x03
    238a:	1d c0       	rjmp	.+58     	; 0x23c6 <F_menu+0x3ec>
				}else if (F1_array[i]>1){
    238c:	21 2f       	mov	r18, r17
    238e:	01 2e       	mov	r0, r17
    2390:	00 0c       	add	r0, r0
    2392:	33 0b       	sbc	r19, r19
    2394:	e1 e0       	ldi	r30, 0x01	; 1
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	ec 0f       	add	r30, r28
    239a:	fd 1f       	adc	r31, r29
    239c:	e2 0f       	add	r30, r18
    239e:	f3 1f       	adc	r31, r19
    23a0:	80 81       	ld	r24, Z
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	80 f0       	brcs	.+32     	; 0x23c6 <F_menu+0x3ec>
				F1_array[i]-=1;
    23a6:	81 50       	subi	r24, 0x01	; 1
    23a8:	e1 e0       	ldi	r30, 0x01	; 1
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	ec 0f       	add	r30, r28
    23ae:	fd 1f       	adc	r31, r29
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    23b6:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    23ba:	0e 2e       	mov	r0, r30
    23bc:	00 0c       	add	r0, r0
    23be:	ff 0b       	sbc	r31, r31
    23c0:	e7 58       	subi	r30, 0x87	; 135
    23c2:	fb 4f       	sbci	r31, 0xFB	; 251
    23c4:	80 83       	st	Z, r24
			}
			
			Display_set_menu();
    23c6:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    23ca:	26 c0       	rjmp	.+76     	; 0x2418 <F_menu+0x43e>
		}
		else if (key==ok)
    23cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    23d0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    23d4:	47 97       	sbiw	r24, 0x17	; 23
    23d6:	01 f5       	brne	.+64     	; 0x2418 <F_menu+0x43e>
    23d8:	11 c0       	rjmp	.+34     	; 0x23fc <F_menu+0x422>
		{
			for (i=0;i<sizeof(F_eep);i++)
			{
				eeprom_write_byte ((uint8_t*) &F_eep[i], F1_array[i]);
    23da:	81 2f       	mov	r24, r17
    23dc:	01 2e       	mov	r0, r17
    23de:	00 0c       	add	r0, r0
    23e0:	99 0b       	sbc	r25, r25
    23e2:	e1 e0       	ldi	r30, 0x01	; 1
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	ec 0f       	add	r30, r28
    23e8:	fd 1f       	adc	r31, r29
    23ea:	e8 0f       	add	r30, r24
    23ec:	f9 1f       	adc	r31, r25
    23ee:	60 81       	ld	r22, Z
    23f0:	80 50       	subi	r24, 0x00	; 0
    23f2:	90 40       	sbci	r25, 0x00	; 0
    23f4:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
			
			Display_set_menu();
		}
		else if (key==ok)
		{
			for (i=0;i<sizeof(F_eep);i++)
    23f8:	1f 5f       	subi	r17, 0xFF	; 255
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <F_menu+0x424>
    23fc:	10 e0       	ldi	r17, 0x00	; 0
    23fe:	18 30       	cpi	r17, 0x08	; 8
    2400:	60 f3       	brcs	.-40     	; 0x23da <F_menu+0x400>
			{
				eeprom_write_byte ((uint8_t*) &F_eep[i], F1_array[i]);
			}
			user_instruction=0;
    2402:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			Timer_bright = 0xfff0;
    2406:	80 ef       	ldi	r24, 0xF0	; 240
    2408:	9f ef       	ldi	r25, 0xFF	; 255
    240a:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <Timer_bright+0x1>
    240e:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <Timer_bright>
			display_init(1);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	cursor = 3;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='f';
	while(user_instruction!=0){
    2418:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    241c:	81 11       	cpse	r24, r1
    241e:	38 ce       	rjmp	.-912    	; 0x2090 <F_menu+0xb6>
			user_instruction=0;
			Timer_bright = 0xfff0;
			display_init(1);
		}
	}
	cursor=0;
    2420:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
	shift=0;
    2424:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Clock_blink=0;
    2428:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
}
    242c:	28 96       	adiw	r28, 0x08	; 8
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	08 95       	ret

00002446 <FAV_menu>:

void FAV_menu(void)
{
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	28 97       	sbiw	r28, 0x08	; 8
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
	char F1_array[sizeof(FAV_eep)];
	int8_t i;
	for (i=0;i<sizeof(FAV_eep);i++)
    2462:	10 e0       	ldi	r17, 0x00	; 0
    2464:	28 c0       	rjmp	.+80     	; 0x24b6 <FAV_menu+0x70>
	{
		F1_array[i]=eeprom_read_byte((uint8_t*)FAV_eep+i);	
    2466:	e1 2e       	mov	r14, r17
    2468:	01 2e       	mov	r0, r17
    246a:	00 0c       	add	r0, r0
    246c:	ff 08       	sbc	r15, r15
    246e:	c7 01       	movw	r24, r14
    2470:	88 5f       	subi	r24, 0xF8	; 248
    2472:	9f 4f       	sbci	r25, 0xFF	; 255
    2474:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2478:	e1 e0       	ldi	r30, 0x01	; 1
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	ec 0f       	add	r30, r28
    247e:	fd 1f       	adc	r31, r29
    2480:	ee 0d       	add	r30, r14
    2482:	ff 1d       	adc	r31, r15
    2484:	80 83       	st	Z, r24
		if (i == 0) {
    2486:	11 11       	cpse	r17, r1
    2488:	0b c0       	rjmp	.+22     	; 0x24a0 <FAV_menu+0x5a>
			if (F1_array[i]>11){F1_array[i]=11;};
    248a:	8c 30       	cpi	r24, 0x0C	; 12
    248c:	90 f0       	brcs	.+36     	; 0x24b2 <FAV_menu+0x6c>
    248e:	e1 e0       	ldi	r30, 0x01	; 1
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	ec 0f       	add	r30, r28
    2494:	fd 1f       	adc	r31, r29
    2496:	ee 0d       	add	r30, r14
    2498:	ff 1d       	adc	r31, r15
    249a:	8b e0       	ldi	r24, 0x0B	; 11
    249c:	80 83       	st	Z, r24
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <FAV_menu+0x6c>
		}else if (F1_array[i]>9){
    24a0:	8a 30       	cpi	r24, 0x0A	; 10
    24a2:	38 f0       	brcs	.+14     	; 0x24b2 <FAV_menu+0x6c>
			F1_array[i]=0;
    24a4:	e1 e0       	ldi	r30, 0x01	; 1
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	ec 0f       	add	r30, r28
    24aa:	fd 1f       	adc	r31, r29
    24ac:	ee 0d       	add	r30, r14
    24ae:	ff 1d       	adc	r31, r15
    24b0:	10 82       	st	Z, r1

void FAV_menu(void)
{
	char F1_array[sizeof(FAV_eep)];
	int8_t i;
	for (i=0;i<sizeof(FAV_eep);i++)
    24b2:	11 e0       	ldi	r17, 0x01	; 1
    24b4:	10 0f       	add	r17, r16
    24b6:	01 2f       	mov	r16, r17
    24b8:	18 30       	cpi	r17, 0x08	; 8
    24ba:	a8 f2       	brcs	.-86     	; 0x2466 <FAV_menu+0x20>
			F1_array[i]=0;
		}		
		
	}
	i=0;
	set_clock_buf[0]= 0x17; //F character
    24bc:	e9 e7       	ldi	r30, 0x79	; 121
    24be:	f4 e0       	ldi	r31, 0x04	; 4
    24c0:	87 e1       	ldi	r24, 0x17	; 23
    24c2:	80 83       	st	Z, r24
	set_clock_buf[1]= i+1;
    24c4:	31 e0       	ldi	r19, 0x01	; 1
    24c6:	31 83       	std	Z+1, r19	; 0x01
	set_clock_buf[2]= 0x0d; //space char
	//set_clock_buf[3]= F1_array[i];//eeprom_read_byte((uint8_t*)&F_eep)&0x0f;
	set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    24c8:	99 81       	ldd	r25, Y+1	; 0x01
    24ca:	8d ec       	ldi	r24, 0xCD	; 205
    24cc:	98 9f       	mul	r25, r24
    24ce:	81 2d       	mov	r24, r1
    24d0:	11 24       	eor	r1, r1
    24d2:	86 95       	lsr	r24
    24d4:	86 95       	lsr	r24
    24d6:	86 95       	lsr	r24
    24d8:	28 2f       	mov	r18, r24
    24da:	2f 70       	andi	r18, 0x0F	; 15
    24dc:	22 83       	std	Z+2, r18	; 0x02
	set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    24de:	88 0f       	add	r24, r24
    24e0:	28 2f       	mov	r18, r24
    24e2:	22 0f       	add	r18, r18
    24e4:	22 0f       	add	r18, r18
    24e6:	82 0f       	add	r24, r18
    24e8:	98 1b       	sub	r25, r24
    24ea:	9f 70       	andi	r25, 0x0F	; 15
    24ec:	93 83       	std	Z+3, r25	; 0x03
	cursor = 2;
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
	shift = 0;
    24f4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Menu_blink_on=1;
    24f8:	30 93 1f 04 	sts	0x041F, r19	; 0x80041f <Menu_blink_on>
	Display_set_menu();
    24fc:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
	user_instruction='e';
    2500:	85 e6       	ldi	r24, 0x65	; 101
    2502:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
		}else if (F1_array[i]>9){
			F1_array[i]=0;
		}		
		
	}
	i=0;
    2506:	10 e0       	ldi	r17, 0x00	; 0
	cursor = 2;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='e';
	while(user_instruction!=0){
    2508:	4d c1       	rjmp	.+666    	; 0x27a4 <FAV_menu+0x35e>
		if(key>=0 && key<10)
    250a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    250e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2512:	99 23       	and	r25, r25
    2514:	44 f1       	brlt	.+80     	; 0x2566 <FAV_menu+0x120>
    2516:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    251a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    251e:	0a 97       	sbiw	r24, 0x0a	; 10
    2520:	14 f5       	brge	.+68     	; 0x2566 <FAV_menu+0x120>
		{
			set_clock_buf[cursor]= key;
    2522:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2526:	0e 2e       	mov	r0, r30
    2528:	00 0c       	add	r0, r0
    252a:	ff 0b       	sbc	r31, r31
    252c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2530:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2534:	e7 58       	subi	r30, 0x87	; 135
    2536:	fb 4f       	sbci	r31, 0xFB	; 251
    2538:	80 83       	st	Z, r24
			F1_array[i]=key;
    253a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    253e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2542:	e1 e0       	ldi	r30, 0x01	; 1
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	ec 0f       	add	r30, r28
    2548:	fd 1f       	adc	r31, r29
    254a:	e1 0f       	add	r30, r17
    254c:	f1 1d       	adc	r31, r1
    254e:	17 fd       	sbrc	r17, 7
    2550:	fa 95       	dec	r31
    2552:	80 83       	st	Z, r24
			
			key=-1;
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	9f ef       	ldi	r25, 0xFF	; 255
    2558:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    255c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			//if(cursor<Digits_disp-1){cursor++;}
			Display_set_menu();
    2560:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    2564:	1f c1       	rjmp	.+574    	; 0x27a4 <FAV_menu+0x35e>
		}
		else if (key==right && i<(sizeof(F_eep)-1))
    2566:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    256a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    256e:	46 97       	sbiw	r24, 0x16	; 22
    2570:	c1 f4       	brne	.+48     	; 0x25a2 <FAV_menu+0x15c>
    2572:	17 30       	cpi	r17, 0x07	; 7
    2574:	b0 f4       	brcc	.+44     	; 0x25a2 <FAV_menu+0x15c>
		{
			i++;
    2576:	1f 5f       	subi	r17, 0xFF	; 255
			key=-1;
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	9f ef       	ldi	r25, 0xFF	; 255
    257c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2580:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Fav_menu_check(i,F1_array[i]);
    2584:	e1 e0       	ldi	r30, 0x01	; 1
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	ec 0f       	add	r30, r28
    258a:	fd 1f       	adc	r31, r29
    258c:	e1 0f       	add	r30, r17
    258e:	f1 1d       	adc	r31, r1
    2590:	17 fd       	sbrc	r17, 7
    2592:	fa 95       	dec	r31
    2594:	60 81       	ld	r22, Z
    2596:	81 2f       	mov	r24, r17
    2598:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Fav_menu_check>
			//set_clock_buf[1]= i+1;
			//set_clock_buf[3]= F1_array[i];		
			Display_set_menu();
    259c:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    25a0:	01 c1       	rjmp	.+514    	; 0x27a4 <FAV_menu+0x35e>
		}
		else if (key==left && i>0)
    25a2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    25a6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    25aa:	45 97       	sbiw	r24, 0x15	; 21
    25ac:	c1 f4       	brne	.+48     	; 0x25de <FAV_menu+0x198>
    25ae:	11 16       	cp	r1, r17
    25b0:	b4 f4       	brge	.+44     	; 0x25de <FAV_menu+0x198>
		{
			i--;
    25b2:	11 50       	subi	r17, 0x01	; 1
			key=-1;
    25b4:	8f ef       	ldi	r24, 0xFF	; 255
    25b6:	9f ef       	ldi	r25, 0xFF	; 255
    25b8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    25bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Fav_menu_check(i,F1_array[i]);
    25c0:	e1 e0       	ldi	r30, 0x01	; 1
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	ec 0f       	add	r30, r28
    25c6:	fd 1f       	adc	r31, r29
    25c8:	e1 0f       	add	r30, r17
    25ca:	f1 1d       	adc	r31, r1
    25cc:	17 fd       	sbrc	r17, 7
    25ce:	fa 95       	dec	r31
    25d0:	60 81       	ld	r22, Z
    25d2:	81 2f       	mov	r24, r17
    25d4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Fav_menu_check>
			//set_clock_buf[1]= i+1;
			//set_clock_buf[3]= F1_array[i];
			Display_set_menu();
    25d8:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    25dc:	e3 c0       	rjmp	.+454    	; 0x27a4 <FAV_menu+0x35e>
		}
		else if (key==up)
    25de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    25e2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    25e6:	40 97       	sbiw	r24, 0x10	; 16
    25e8:	09 f0       	breq	.+2      	; 0x25ec <FAV_menu+0x1a6>
    25ea:	52 c0       	rjmp	.+164    	; 0x2690 <FAV_menu+0x24a>
		{
			key=-1;			
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	9f ef       	ldi	r25, 0xFF	; 255
    25f0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    25f4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==0 && F1_array[i]<16){
    25f8:	11 11       	cpse	r17, r1
    25fa:	2a c0       	rjmp	.+84     	; 0x2650 <FAV_menu+0x20a>
    25fc:	21 2f       	mov	r18, r17
    25fe:	01 2e       	mov	r0, r17
    2600:	00 0c       	add	r0, r0
    2602:	33 0b       	sbc	r19, r19
    2604:	e1 e0       	ldi	r30, 0x01	; 1
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	ec 0f       	add	r30, r28
    260a:	fd 1f       	adc	r31, r29
    260c:	e2 0f       	add	r30, r18
    260e:	f3 1f       	adc	r31, r19
    2610:	80 81       	ld	r24, Z
    2612:	80 31       	cpi	r24, 0x10	; 16
    2614:	e8 f4       	brcc	.+58     	; 0x2650 <FAV_menu+0x20a>
				F1_array[i]+=1;
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	e1 e0       	ldi	r30, 0x01	; 1
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	ec 0f       	add	r30, r28
    261e:	fd 1f       	adc	r31, r29
    2620:	e2 0f       	add	r30, r18
    2622:	f3 1f       	adc	r31, r19
    2624:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2626:	e9 e7       	ldi	r30, 0x79	; 121
    2628:	f4 e0       	ldi	r31, 0x04	; 4
    262a:	9d ec       	ldi	r25, 0xCD	; 205
    262c:	89 9f       	mul	r24, r25
    262e:	91 2d       	mov	r25, r1
    2630:	11 24       	eor	r1, r1
    2632:	96 95       	lsr	r25
    2634:	96 95       	lsr	r25
    2636:	96 95       	lsr	r25
    2638:	29 2f       	mov	r18, r25
    263a:	2f 70       	andi	r18, 0x0F	; 15
    263c:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    263e:	99 0f       	add	r25, r25
    2640:	29 2f       	mov	r18, r25
    2642:	22 0f       	add	r18, r18
    2644:	22 0f       	add	r18, r18
    2646:	92 0f       	add	r25, r18
    2648:	89 1b       	sub	r24, r25
    264a:	8f 70       	andi	r24, 0x0F	; 15
    264c:	83 83       	std	Z+3, r24	; 0x03
    264e:	1d c0       	rjmp	.+58     	; 0x268a <FAV_menu+0x244>
				}else if (F1_array[i]<9){
    2650:	21 2f       	mov	r18, r17
    2652:	01 2e       	mov	r0, r17
    2654:	00 0c       	add	r0, r0
    2656:	33 0b       	sbc	r19, r19
    2658:	e1 e0       	ldi	r30, 0x01	; 1
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	ec 0f       	add	r30, r28
    265e:	fd 1f       	adc	r31, r29
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	80 81       	ld	r24, Z
    2666:	89 30       	cpi	r24, 0x09	; 9
    2668:	80 f4       	brcc	.+32     	; 0x268a <FAV_menu+0x244>
				F1_array[i]+=1;
    266a:	8f 5f       	subi	r24, 0xFF	; 255
    266c:	e1 e0       	ldi	r30, 0x01	; 1
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	ec 0f       	add	r30, r28
    2672:	fd 1f       	adc	r31, r29
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    267a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    267e:	0e 2e       	mov	r0, r30
    2680:	00 0c       	add	r0, r0
    2682:	ff 0b       	sbc	r31, r31
    2684:	e7 58       	subi	r30, 0x87	; 135
    2686:	fb 4f       	sbci	r31, 0xFB	; 251
    2688:	80 83       	st	Z, r24
			}	
			//F1_array[i]+=1;
			//set_clock_buf[cursor]=F1_array[i];			
			Display_set_menu();
    268a:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    268e:	8a c0       	rjmp	.+276    	; 0x27a4 <FAV_menu+0x35e>
		}
		else if (key==down)
    2690:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2694:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2698:	41 97       	sbiw	r24, 0x11	; 17
    269a:	09 f0       	breq	.+2      	; 0x269e <FAV_menu+0x258>
    269c:	52 c0       	rjmp	.+164    	; 0x2742 <FAV_menu+0x2fc>
		{
			key=-1;
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	9f ef       	ldi	r25, 0xFF	; 255
    26a2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    26a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==0 && F1_array[i]>0){
    26aa:	11 11       	cpse	r17, r1
    26ac:	2a c0       	rjmp	.+84     	; 0x2702 <FAV_menu+0x2bc>
    26ae:	21 2f       	mov	r18, r17
    26b0:	01 2e       	mov	r0, r17
    26b2:	00 0c       	add	r0, r0
    26b4:	33 0b       	sbc	r19, r19
    26b6:	e1 e0       	ldi	r30, 0x01	; 1
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	ec 0f       	add	r30, r28
    26bc:	fd 1f       	adc	r31, r29
    26be:	e2 0f       	add	r30, r18
    26c0:	f3 1f       	adc	r31, r19
    26c2:	80 81       	ld	r24, Z
    26c4:	88 23       	and	r24, r24
    26c6:	e9 f0       	breq	.+58     	; 0x2702 <FAV_menu+0x2bc>
				F1_array[i]-=1;
    26c8:	81 50       	subi	r24, 0x01	; 1
    26ca:	e1 e0       	ldi	r30, 0x01	; 1
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	ec 0f       	add	r30, r28
    26d0:	fd 1f       	adc	r31, r29
    26d2:	e2 0f       	add	r30, r18
    26d4:	f3 1f       	adc	r31, r19
    26d6:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    26d8:	e9 e7       	ldi	r30, 0x79	; 121
    26da:	f4 e0       	ldi	r31, 0x04	; 4
    26dc:	9d ec       	ldi	r25, 0xCD	; 205
    26de:	89 9f       	mul	r24, r25
    26e0:	91 2d       	mov	r25, r1
    26e2:	11 24       	eor	r1, r1
    26e4:	96 95       	lsr	r25
    26e6:	96 95       	lsr	r25
    26e8:	96 95       	lsr	r25
    26ea:	29 2f       	mov	r18, r25
    26ec:	2f 70       	andi	r18, 0x0F	; 15
    26ee:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    26f0:	99 0f       	add	r25, r25
    26f2:	29 2f       	mov	r18, r25
    26f4:	22 0f       	add	r18, r18
    26f6:	22 0f       	add	r18, r18
    26f8:	92 0f       	add	r25, r18
    26fa:	89 1b       	sub	r24, r25
    26fc:	8f 70       	andi	r24, 0x0F	; 15
    26fe:	83 83       	std	Z+3, r24	; 0x03
    2700:	1d c0       	rjmp	.+58     	; 0x273c <FAV_menu+0x2f6>
				}else if (F1_array[i]>1){
    2702:	21 2f       	mov	r18, r17
    2704:	01 2e       	mov	r0, r17
    2706:	00 0c       	add	r0, r0
    2708:	33 0b       	sbc	r19, r19
    270a:	e1 e0       	ldi	r30, 0x01	; 1
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	ec 0f       	add	r30, r28
    2710:	fd 1f       	adc	r31, r29
    2712:	e2 0f       	add	r30, r18
    2714:	f3 1f       	adc	r31, r19
    2716:	80 81       	ld	r24, Z
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	80 f0       	brcs	.+32     	; 0x273c <FAV_menu+0x2f6>
				F1_array[i]-=1;
    271c:	81 50       	subi	r24, 0x01	; 1
    271e:	e1 e0       	ldi	r30, 0x01	; 1
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	ec 0f       	add	r30, r28
    2724:	fd 1f       	adc	r31, r29
    2726:	e2 0f       	add	r30, r18
    2728:	f3 1f       	adc	r31, r19
    272a:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    272c:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2730:	0e 2e       	mov	r0, r30
    2732:	00 0c       	add	r0, r0
    2734:	ff 0b       	sbc	r31, r31
    2736:	e7 58       	subi	r30, 0x87	; 135
    2738:	fb 4f       	sbci	r31, 0xFB	; 251
    273a:	80 83       	st	Z, r24
			}
			
			Display_set_menu();
    273c:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    2740:	31 c0       	rjmp	.+98     	; 0x27a4 <FAV_menu+0x35e>
		}
		else if (key==ok)
    2742:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2746:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    274a:	47 97       	sbiw	r24, 0x17	; 23
    274c:	59 f5       	brne	.+86     	; 0x27a4 <FAV_menu+0x35e>
    274e:	11 c0       	rjmp	.+34     	; 0x2772 <FAV_menu+0x32c>
		{
			for (i=0;i<sizeof(FAV_eep);i++)
			{
				eeprom_write_byte ((uint8_t*) &FAV_eep[i], F1_array[i]);
    2750:	81 2f       	mov	r24, r17
    2752:	01 2e       	mov	r0, r17
    2754:	00 0c       	add	r0, r0
    2756:	99 0b       	sbc	r25, r25
    2758:	e1 e0       	ldi	r30, 0x01	; 1
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	ec 0f       	add	r30, r28
    275e:	fd 1f       	adc	r31, r29
    2760:	e8 0f       	add	r30, r24
    2762:	f9 1f       	adc	r31, r25
    2764:	60 81       	ld	r22, Z
    2766:	88 5f       	subi	r24, 0xF8	; 248
    2768:	9f 4f       	sbci	r25, 0xFF	; 255
    276a:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
			
			Display_set_menu();
		}
		else if (key==ok)
		{
			for (i=0;i<sizeof(FAV_eep);i++)
    276e:	1f 5f       	subi	r17, 0xFF	; 255
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <FAV_menu+0x32e>
    2772:	10 e0       	ldi	r17, 0x00	; 0
    2774:	18 30       	cpi	r17, 0x08	; 8
    2776:	60 f3       	brcs	.-40     	; 0x2750 <FAV_menu+0x30a>
			{
				eeprom_write_byte ((uint8_t*) &FAV_eep[i], F1_array[i]);
			}
			Digits_disp= eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
    2778:	88 e0       	ldi	r24, 0x08	; 8
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2780:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
			if (Digits_disp<2 || Digits_disp>MAX_DISPLAY_DIGITS)
    2784:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	24 f0       	brlt	.+8      	; 0x2794 <FAV_menu+0x34e>
    278c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    2790:	85 31       	cpi	r24, 0x15	; 21
    2792:	1c f0       	brlt	.+6      	; 0x279a <FAV_menu+0x354>
			Digits_disp=4;
    2794:	84 e0       	ldi	r24, 0x04	; 4
    2796:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
			user_instruction=0;
    279a:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	cursor = 2;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='e';
	while(user_instruction!=0){
    27a4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    27a8:	81 11       	cpse	r24, r1
    27aa:	af ce       	rjmp	.-674    	; 0x250a <FAV_menu+0xc4>
			Digits_disp=4;
			user_instruction=0;
			display_init(1);
		}
	}
	cursor=0;
    27ac:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
	shift=0;
    27b0:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Clock_blink=0;
    27b4:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
}
    27b8:	28 96       	adiw	r28, 0x08	; 8
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	df 91       	pop	r29
    27c6:	cf 91       	pop	r28
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
    27cc:	ff 90       	pop	r15
    27ce:	ef 90       	pop	r14
    27d0:	08 95       	ret

000027d2 <Set_clock>:
		}
	}
	Display_Out();
}

void Set_clock(void){
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	60 97       	sbiw	r28, 0x10	; 16
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
	struct rtc_time ds1302;
	struct rtc_time *rtc;
	rtc = &ds1302;
	//int8_t clk_byte;
	ds1302_update(rtc);   // update all fields in the struct
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
	set_clock_buf[0]= (rtc->hour&0xf0)>>4;
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	98 2f       	mov	r25, r24
    27f2:	92 95       	swap	r25
    27f4:	9f 70       	andi	r25, 0x0F	; 15
    27f6:	e9 e7       	ldi	r30, 0x79	; 121
    27f8:	f4 e0       	ldi	r31, 0x04	; 4
    27fa:	90 83       	st	Z, r25
	set_clock_buf[1]= (rtc->hour&0x0f);  //adding dot
    27fc:	8f 70       	andi	r24, 0x0F	; 15
    27fe:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= ((rtc->minute&0xf0)>>4);  //adding dot;
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	98 2f       	mov	r25, r24
    2804:	92 95       	swap	r25
    2806:	9f 70       	andi	r25, 0x0F	; 15
    2808:	92 83       	std	Z+2, r25	; 0x02
	set_clock_buf[3]= (rtc->minute&0x0f);
    280a:	8f 70       	andi	r24, 0x0F	; 15
    280c:	83 83       	std	Z+3, r24	; 0x03
	set_clock_buf[4]= ((rtc->second&0xf0)>>4);
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	98 2f       	mov	r25, r24
    2812:	92 95       	swap	r25
    2814:	9f 70       	andi	r25, 0x0F	; 15
    2816:	94 83       	std	Z+4, r25	; 0x04
	set_clock_buf[5]= (rtc->second&0x0f);
    2818:	8f 70       	andi	r24, 0x0F	; 15
    281a:	85 83       	std	Z+5, r24	; 0x05
	Display_set_clock();
    281c:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
	user_instruction='s';
    2820:	83 e7       	ldi	r24, 0x73	; 115
    2822:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	cursor=0;Menu_blink_on=1;
    2826:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	while(user_instruction!=0)
    2830:	9f c0       	rjmp	.+318    	; 0x2970 <Set_clock+0x19e>
	{
		if(key>=0 && key<10)
    2832:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2836:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    283a:	99 23       	and	r25, r25
    283c:	d4 f1       	brlt	.+116    	; 0x28b2 <Set_clock+0xe0>
    283e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2842:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2846:	0a 97       	sbiw	r24, 0x0a	; 10
    2848:	a4 f5       	brge	.+104    	; 0x28b2 <Set_clock+0xe0>
		{
			set_clock_buf[cursor]= key;
    284a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    284e:	0e 2e       	mov	r0, r30
    2850:	00 0c       	add	r0, r0
    2852:	ff 0b       	sbc	r31, r31
    2854:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2858:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    285c:	e7 58       	subi	r30, 0x87	; 135
    285e:	fb 4f       	sbci	r31, 0xFB	; 251
    2860:	80 83       	st	Z, r24
			if (cursor==1 || cursor==2 || cursor==3 )
    2862:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	41 f0       	breq	.+16     	; 0x287a <Set_clock+0xa8>
    286a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	21 f0       	breq	.+8      	; 0x287a <Set_clock+0xa8>
    2872:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2876:	83 30       	cpi	r24, 0x03	; 3
    2878:	51 f4       	brne	.+20     	; 0x288e <Set_clock+0xbc>
			{
				set_clock_buf[cursor]|=0x80;
    287a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    287e:	0e 2e       	mov	r0, r30
    2880:	00 0c       	add	r0, r0
    2882:	ff 0b       	sbc	r31, r31
    2884:	e7 58       	subi	r30, 0x87	; 135
    2886:	fb 4f       	sbci	r31, 0xFB	; 251
    2888:	80 81       	ld	r24, Z
    288a:	80 68       	ori	r24, 0x80	; 128
    288c:	80 83       	st	Z, r24
			}
			key=-1;
    288e:	8f ef       	ldi	r24, 0xFF	; 255
    2890:	9f ef       	ldi	r25, 0xFF	; 255
    2892:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2896:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    289a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    289e:	85 30       	cpi	r24, 0x05	; 5
    28a0:	28 f4       	brcc	.+10     	; 0x28ac <Set_clock+0xda>
    28a2:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28a6:	8f 5f       	subi	r24, 0xFF	; 255
    28a8:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_clock();
    28ac:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    28b0:	5f c0       	rjmp	.+190    	; 0x2970 <Set_clock+0x19e>
		}
		else if (key==left)		//check for left <-
    28b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    28b6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    28ba:	45 97       	sbiw	r24, 0x15	; 21
    28bc:	99 f4       	brne	.+38     	; 0x28e4 <Set_clock+0x112>
		{
			if(cursor!=0)
    28be:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28c2:	88 23       	and	r24, r24
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <Set_clock+0xf6>
    28c6:	54 c0       	rjmp	.+168    	; 0x2970 <Set_clock+0x19e>
			{
				cursor--;
    28c8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28cc:	81 50       	subi	r24, 0x01	; 1
    28ce:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    28d2:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    28d6:	8f ef       	ldi	r24, 0xFF	; 255
    28d8:	9f ef       	ldi	r25, 0xFF	; 255
    28da:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    28de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    28e2:	46 c0       	rjmp	.+140    	; 0x2970 <Set_clock+0x19e>
			}			
		}
		else if (key==right)		//check for right ->
    28e4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    28e8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    28ec:	46 97       	sbiw	r24, 0x16	; 22
    28ee:	91 f4       	brne	.+36     	; 0x2914 <Set_clock+0x142>
		{
			if(cursor<sizeof(set_clock_buf)-1)
    28f0:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28f4:	85 30       	cpi	r24, 0x05	; 5
    28f6:	e0 f5       	brcc	.+120    	; 0x2970 <Set_clock+0x19e>
			{
				cursor++;
    28f8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28fc:	8f 5f       	subi	r24, 0xFF	; 255
    28fe:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2902:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2906:	8f ef       	ldi	r24, 0xFF	; 255
    2908:	9f ef       	ldi	r25, 0xFF	; 255
    290a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    290e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2912:	2e c0       	rjmp	.+92     	; 0x2970 <Set_clock+0x19e>
			}
			
		}
		else if (key==ok)
    2914:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2918:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    291c:	47 97       	sbiw	r24, 0x17	; 23
    291e:	41 f5       	brne	.+80     	; 0x2970 <Set_clock+0x19e>
		{
			struct rtc_time ds1302;
			struct rtc_time *rtc;
			rtc = &ds1302;
			int8_t byte_get;
			rtc->hour_format = H24;
    2920:	8c e0       	ldi	r24, 0x0C	; 12
    2922:	88 8b       	std	Y+16, r24	; 0x10
			byte_get=(set_clock_buf[0] & 0x0f)<<4;
    2924:	e9 e7       	ldi	r30, 0x79	; 121
    2926:	f4 e0       	ldi	r31, 0x04	; 4
    2928:	80 81       	ld	r24, Z
    292a:	20 e1       	ldi	r18, 0x10	; 16
    292c:	82 9f       	mul	r24, r18
    292e:	c0 01       	movw	r24, r0
    2930:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[1] & 0x0f);
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	9f 70       	andi	r25, 0x0F	; 15
    2936:	89 2b       	or	r24, r25
			rtc->hour = byte_get;
    2938:	8b 87       	std	Y+11, r24	; 0x0b
			byte_get=(set_clock_buf[2] & 0x0f)<<4;
    293a:	82 81       	ldd	r24, Z+2	; 0x02
    293c:	20 e1       	ldi	r18, 0x10	; 16
    293e:	82 9f       	mul	r24, r18
    2940:	c0 01       	movw	r24, r0
    2942:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[3] & 0x0f);
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	9f 70       	andi	r25, 0x0F	; 15
    2948:	89 2b       	or	r24, r25
			rtc->minute = byte_get;
    294a:	8a 87       	std	Y+10, r24	; 0x0a
			byte_get=(set_clock_buf[4] & 0x0f)<<4;
    294c:	84 81       	ldd	r24, Z+4	; 0x04
    294e:	20 e1       	ldi	r18, 0x10	; 16
    2950:	82 9f       	mul	r24, r18
    2952:	c0 01       	movw	r24, r0
    2954:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[5] & 0x0f);
    2956:	95 81       	ldd	r25, Z+5	; 0x05
    2958:	9f 70       	andi	r25, 0x0F	; 15
    295a:	89 2b       	or	r24, r25
			rtc->second = byte_get;			
    295c:	89 87       	std	Y+9, r24	; 0x09
			ds1302_write_time(rtc);
    295e:	ce 01       	movw	r24, r28
    2960:	09 96       	adiw	r24, 0x09	; 9
    2962:	0e 94 7f 07 	call	0xefe	; 0xefe <ds1302_write_time>
			user_instruction=0;
    2966:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	set_clock_buf[4]= ((rtc->second&0xf0)>>4);
	set_clock_buf[5]= (rtc->second&0x0f);
	Display_set_clock();
	user_instruction='s';
	cursor=0;Menu_blink_on=1;
	while(user_instruction!=0)
    2970:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    2974:	81 11       	cpse	r24, r1
    2976:	5d cf       	rjmp	.-326    	; 0x2832 <Set_clock+0x60>
			ds1302_write_time(rtc);
			user_instruction=0;
			display_init(1);
		}
	}
	cursor=0;
    2978:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
	shift=0;
    297c:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Clock_blink=0;
    2980:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
	Menu_blink_on=0;
    2984:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <Menu_blink_on>
}
    2988:	60 96       	adiw	r28, 0x10	; 16
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	08 95       	ret

0000299a <Set_countdown>:
		Change_timer_on=0;
}


void Set_countdown(volatile	int8_t bank)
{
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <Set_countdown+0xa>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	8a 83       	std	Y+2, r24	; 0x02
	volatile int8_t eep_add_bank;
	
	switch (bank)
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	69 f0       	breq	.+26     	; 0x29ca <Set_countdown+0x30>
    29b0:	1c f4       	brge	.+6      	; 0x29b8 <Set_countdown+0x1e>
    29b2:	81 30       	cpi	r24, 0x01	; 1
    29b4:	31 f0       	breq	.+12     	; 0x29c2 <Set_countdown+0x28>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <Set_countdown+0x46>
    29b8:	83 30       	cpi	r24, 0x03	; 3
    29ba:	59 f0       	breq	.+22     	; 0x29d2 <Set_countdown+0x38>
    29bc:	84 30       	cpi	r24, 0x04	; 4
    29be:	69 f0       	breq	.+26     	; 0x29da <Set_countdown+0x40>
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <Set_countdown+0x46>
	{
	case (1):
		eep_add_bank = Countdown1_eep;
    29c2:	80 e1       	ldi	r24, 0x10	; 16
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	89 83       	std	Y+1, r24	; 0x01
		break;
    29c8:	0b c0       	rjmp	.+22     	; 0x29e0 <Set_countdown+0x46>
	case (2):
		eep_add_bank = Countdown2_eep;
    29ca:	83 e1       	ldi	r24, 0x13	; 19
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	89 83       	std	Y+1, r24	; 0x01
		break;
    29d0:	07 c0       	rjmp	.+14     	; 0x29e0 <Set_countdown+0x46>
	case (3):
		eep_add_bank = Countdown_alarm1;
    29d2:	86 e1       	ldi	r24, 0x16	; 22
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	89 83       	std	Y+1, r24	; 0x01
		break;
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <Set_countdown+0x46>
	case (4):
		eep_add_bank = Countdown_alarm2;
    29da:	89 e1       	ldi	r24, 0x19	; 25
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	set_clock_buf[0]= (eeprom_read_byte((uint8_t*)eep_add_bank))>>4;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	08 2e       	mov	r0, r24
    29e4:	00 0c       	add	r0, r0
    29e6:	99 0b       	sbc	r25, r25
    29e8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    29ec:	09 e7       	ldi	r16, 0x79	; 121
    29ee:	14 e0       	ldi	r17, 0x04	; 4
    29f0:	82 95       	swap	r24
    29f2:	8f 70       	andi	r24, 0x0F	; 15
    29f4:	f8 01       	movw	r30, r16
    29f6:	80 83       	st	Z, r24
	set_clock_buf[1]= (eeprom_read_byte((uint8_t*)eep_add_bank)&0x0f); 
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	08 2e       	mov	r0, r24
    29fc:	00 0c       	add	r0, r0
    29fe:	99 0b       	sbc	r25, r25
    2a00:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2a04:	8f 70       	andi	r24, 0x0F	; 15
    2a06:	f8 01       	movw	r30, r16
    2a08:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= (eeprom_read_byte((uint8_t*)eep_add_bank+1)&0xf0)>>4;
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	08 2e       	mov	r0, r24
    2a0e:	00 0c       	add	r0, r0
    2a10:	99 0b       	sbc	r25, r25
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2a18:	82 95       	swap	r24
    2a1a:	8f 70       	andi	r24, 0x0F	; 15
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	82 83       	std	Z+2, r24	; 0x02
	set_clock_buf[3]= (eeprom_read_byte((uint8_t*)eep_add_bank+1)&0x0f);
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	08 2e       	mov	r0, r24
    2a24:	00 0c       	add	r0, r0
    2a26:	99 0b       	sbc	r25, r25
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2a2e:	8f 70       	andi	r24, 0x0F	; 15
    2a30:	f8 01       	movw	r30, r16
    2a32:	83 83       	std	Z+3, r24	; 0x03
	set_clock_buf[4]= (eeprom_read_byte((uint8_t*)eep_add_bank+2)&0xf0)>>4;
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	08 2e       	mov	r0, r24
    2a38:	00 0c       	add	r0, r0
    2a3a:	99 0b       	sbc	r25, r25
    2a3c:	02 96       	adiw	r24, 0x02	; 2
    2a3e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2a42:	82 95       	swap	r24
    2a44:	8f 70       	andi	r24, 0x0F	; 15
    2a46:	f8 01       	movw	r30, r16
    2a48:	84 83       	std	Z+4, r24	; 0x04
	set_clock_buf[5]= (eeprom_read_byte((uint8_t*)eep_add_bank+2)&0x0f);
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	08 2e       	mov	r0, r24
    2a4e:	00 0c       	add	r0, r0
    2a50:	99 0b       	sbc	r25, r25
    2a52:	02 96       	adiw	r24, 0x02	; 2
    2a54:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2a58:	8f 70       	andi	r24, 0x0F	; 15
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	85 83       	std	Z+5, r24	; 0x05
		set_clock_buf[3]= (eeprom_read_byte((uint8_t*)Countdown2_eep+1)&0x0f);
		set_clock_buf[4]= (eeprom_read_byte((uint8_t*)Countdown2_eep+2)&0xf0)>>4;
		set_clock_buf[5]= (eeprom_read_byte((uint8_t*)Countdown2_eep+2)&0x0f);
	}*/
	
	user_instruction='c'; //intex for countdown
    2a5e:	83 e6       	ldi	r24, 0x63	; 99
    2a60:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	cursor=0;Menu_blink_on=1;
    2a64:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	shift=0;
    2a6e:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Display_set_clock();
    2a72:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
	while(user_instruction!=0)
    2a76:	b1 c0       	rjmp	.+354    	; 0x2bda <Set_countdown+0x240>
	{
		if(key>=0 && key<10)
    2a78:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2a7c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2a80:	99 23       	and	r25, r25
    2a82:	d4 f1       	brlt	.+116    	; 0x2af8 <Set_countdown+0x15e>
    2a84:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2a88:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2a8c:	0a 97       	sbiw	r24, 0x0a	; 10
    2a8e:	a4 f5       	brge	.+104    	; 0x2af8 <Set_countdown+0x15e>
		{
			set_clock_buf[cursor]= key;
    2a90:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2a94:	0e 2e       	mov	r0, r30
    2a96:	00 0c       	add	r0, r0
    2a98:	ff 0b       	sbc	r31, r31
    2a9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2a9e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2aa2:	e7 58       	subi	r30, 0x87	; 135
    2aa4:	fb 4f       	sbci	r31, 0xFB	; 251
    2aa6:	80 83       	st	Z, r24
			if (cursor==1 || cursor==2 || cursor==3 )
    2aa8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	41 f0       	breq	.+16     	; 0x2ac0 <Set_countdown+0x126>
    2ab0:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	21 f0       	breq	.+8      	; 0x2ac0 <Set_countdown+0x126>
    2ab8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2abc:	83 30       	cpi	r24, 0x03	; 3
    2abe:	51 f4       	brne	.+20     	; 0x2ad4 <Set_countdown+0x13a>
			{
				set_clock_buf[cursor]|=0x80;
    2ac0:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2ac4:	0e 2e       	mov	r0, r30
    2ac6:	00 0c       	add	r0, r0
    2ac8:	ff 0b       	sbc	r31, r31
    2aca:	e7 58       	subi	r30, 0x87	; 135
    2acc:	fb 4f       	sbci	r31, 0xFB	; 251
    2ace:	80 81       	ld	r24, Z
    2ad0:	80 68       	ori	r24, 0x80	; 128
    2ad2:	80 83       	st	Z, r24
			}
			key=-1;
    2ad4:	8f ef       	ldi	r24, 0xFF	; 255
    2ad6:	9f ef       	ldi	r25, 0xFF	; 255
    2ad8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2adc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    2ae0:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2ae4:	85 30       	cpi	r24, 0x05	; 5
    2ae6:	28 f4       	brcc	.+10     	; 0x2af2 <Set_countdown+0x158>
    2ae8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_clock();
    2af2:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    2af6:	71 c0       	rjmp	.+226    	; 0x2bda <Set_countdown+0x240>
		}
		else if (key==left)		//check for left <-
    2af8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2afc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2b00:	45 97       	sbiw	r24, 0x15	; 21
    2b02:	99 f4       	brne	.+38     	; 0x2b2a <Set_countdown+0x190>
		{
			if(cursor!=0)
    2b04:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <Set_countdown+0x174>
    2b0c:	66 c0       	rjmp	.+204    	; 0x2bda <Set_countdown+0x240>
			{
				cursor--;
    2b0e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b12:	81 50       	subi	r24, 0x01	; 1
    2b14:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2b18:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2b1c:	8f ef       	ldi	r24, 0xFF	; 255
    2b1e:	9f ef       	ldi	r25, 0xFF	; 255
    2b20:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2b24:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2b28:	58 c0       	rjmp	.+176    	; 0x2bda <Set_countdown+0x240>
			}			
		}
		else if (key==right)		//check for right ->
    2b2a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2b2e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2b32:	46 97       	sbiw	r24, 0x16	; 22
    2b34:	99 f4       	brne	.+38     	; 0x2b5c <Set_countdown+0x1c2>
		{
			if(cursor<sizeof(set_clock_buf)-1)
    2b36:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b3a:	85 30       	cpi	r24, 0x05	; 5
    2b3c:	08 f0       	brcs	.+2      	; 0x2b40 <Set_countdown+0x1a6>
    2b3e:	4d c0       	rjmp	.+154    	; 0x2bda <Set_countdown+0x240>
			{
				cursor++;
    2b40:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2b4a:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	9f ef       	ldi	r25, 0xFF	; 255
    2b52:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2b56:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2b5a:	3f c0       	rjmp	.+126    	; 0x2bda <Set_countdown+0x240>
			}			
		}
		else if (key==ok)
    2b5c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2b60:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2b64:	47 97       	sbiw	r24, 0x17	; 23
    2b66:	c9 f5       	brne	.+114    	; 0x2bda <Set_countdown+0x240>
		{
			eeprom_write_byte ((uint8_t*) eep_add_bank, ((set_clock_buf[0] & 0x0f)<<4)|(set_clock_buf[1] & 0x0f));
    2b68:	09 e7       	ldi	r16, 0x79	; 121
    2b6a:	14 e0       	ldi	r17, 0x04	; 4
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	20 81       	ld	r18, Z
    2b70:	f0 e1       	ldi	r31, 0x10	; 16
    2b72:	2f 9f       	mul	r18, r31
    2b74:	90 01       	movw	r18, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	f8 01       	movw	r30, r16
    2b7a:	61 81       	ldd	r22, Z+1	; 0x01
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	6f 70       	andi	r22, 0x0F	; 15
    2b80:	62 2b       	or	r22, r18
    2b82:	08 2e       	mov	r0, r24
    2b84:	00 0c       	add	r0, r0
    2b86:	99 0b       	sbc	r25, r25
    2b88:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
			eeprom_write_byte ((uint8_t*) eep_add_bank+1, ((set_clock_buf[2] & 0x0f)<<4)|(set_clock_buf[3] & 0x0f));
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	22 81       	ldd	r18, Z+2	; 0x02
    2b90:	f0 e1       	ldi	r31, 0x10	; 16
    2b92:	2f 9f       	mul	r18, r31
    2b94:	90 01       	movw	r18, r0
    2b96:	11 24       	eor	r1, r1
    2b98:	f8 01       	movw	r30, r16
    2b9a:	63 81       	ldd	r22, Z+3	; 0x03
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	08 2e       	mov	r0, r24
    2ba0:	00 0c       	add	r0, r0
    2ba2:	99 0b       	sbc	r25, r25
    2ba4:	6f 70       	andi	r22, 0x0F	; 15
    2ba6:	62 2b       	or	r22, r18
    2ba8:	01 96       	adiw	r24, 0x01	; 1
    2baa:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
			eeprom_write_byte ((uint8_t*) eep_add_bank+2, ((set_clock_buf[4] & 0x0f)<<4)|(set_clock_buf[5] & 0x0f));
    2bae:	f8 01       	movw	r30, r16
    2bb0:	24 81       	ldd	r18, Z+4	; 0x04
    2bb2:	f0 e1       	ldi	r31, 0x10	; 16
    2bb4:	2f 9f       	mul	r18, r31
    2bb6:	90 01       	movw	r18, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	f8 01       	movw	r30, r16
    2bbc:	65 81       	ldd	r22, Z+5	; 0x05
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	08 2e       	mov	r0, r24
    2bc2:	00 0c       	add	r0, r0
    2bc4:	99 0b       	sbc	r25, r25
    2bc6:	6f 70       	andi	r22, 0x0F	; 15
    2bc8:	62 2b       	or	r22, r18
    2bca:	02 96       	adiw	r24, 0x02	; 2
    2bcc:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
				eeprom_write_byte ((uint8_t*) &Countdown2_eep, ((set_clock_buf[0] & 0x0f)<<4)|(set_clock_buf[1] & 0x0f));
				eeprom_write_byte ((uint8_t*) &Countdown2_eep+1, ((set_clock_buf[2] & 0x0f)<<4)|(set_clock_buf[3] & 0x0f));
				eeprom_write_byte ((uint8_t*) &Countdown2_eep+2, ((set_clock_buf[4] & 0x0f)<<4)|(set_clock_buf[5] & 0x0f));
			}*/
			
			user_instruction=0;
    2bd0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	
	user_instruction='c'; //intex for countdown
	cursor=0;Menu_blink_on=1;
	shift=0;
	Display_set_clock();
	while(user_instruction!=0)
    2bda:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    2bde:	81 11       	cpse	r24, r1
    2be0:	4b cf       	rjmp	.-362    	; 0x2a78 <Set_countdown+0xde>
			
			user_instruction=0;
			display_init(1);
		}
	}
	display_init(1);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	08 95       	ret

00002bf6 <Set_date>:

void Set_date(void){
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	60 97       	sbiw	r28, 0x10	; 16
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
	struct rtc_time ds1302;
	struct rtc_time *rtc;
	rtc = &ds1302;
	//int8_t clk_byte;
	ds1302_update(rtc);   // update all fields in the struct
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	01 96       	adiw	r24, 0x01	; 1
    2c0e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
	set_clock_buf[0]= (rtc->date&0xf0)>>4;
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	98 2f       	mov	r25, r24
    2c16:	92 95       	swap	r25
    2c18:	9f 70       	andi	r25, 0x0F	; 15
    2c1a:	e9 e7       	ldi	r30, 0x79	; 121
    2c1c:	f4 e0       	ldi	r31, 0x04	; 4
    2c1e:	90 83       	st	Z, r25
	set_clock_buf[1]= (rtc->date&0x0f); 
    2c20:	8f 70       	andi	r24, 0x0F	; 15
    2c22:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= ((rtc->month&0xf0)>>4);
    2c24:	8e 81       	ldd	r24, Y+6	; 0x06
    2c26:	98 2f       	mov	r25, r24
    2c28:	92 95       	swap	r25
    2c2a:	9f 70       	andi	r25, 0x0F	; 15
    2c2c:	92 83       	std	Z+2, r25	; 0x02
	set_clock_buf[3]= (rtc->month&0x0f);
    2c2e:	8f 70       	andi	r24, 0x0F	; 15
    2c30:	83 83       	std	Z+3, r24	; 0x03
	set_clock_buf[4]= ((rtc->year&0xf0)>>4);
    2c32:	8f 81       	ldd	r24, Y+7	; 0x07
    2c34:	98 2f       	mov	r25, r24
    2c36:	92 95       	swap	r25
    2c38:	9f 70       	andi	r25, 0x0F	; 15
    2c3a:	94 83       	std	Z+4, r25	; 0x04
	set_clock_buf[5]= (rtc->year&0x0f);
    2c3c:	8f 70       	andi	r24, 0x0F	; 15
    2c3e:	85 83       	std	Z+5, r24	; 0x05
	Display_set_clock();
    2c40:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
	user_instruction='d';
    2c44:	84 e6       	ldi	r24, 0x64	; 100
    2c46:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	cursor=0;Menu_blink_on=1;
    2c4a:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	while(user_instruction!=0)
    2c54:	9f c0       	rjmp	.+318    	; 0x2d94 <Set_date+0x19e>
	{
		if(key>=0 && key<10)
    2c56:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2c5a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2c5e:	99 23       	and	r25, r25
    2c60:	d4 f1       	brlt	.+116    	; 0x2cd6 <Set_date+0xe0>
    2c62:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2c66:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2c6a:	0a 97       	sbiw	r24, 0x0a	; 10
    2c6c:	a4 f5       	brge	.+104    	; 0x2cd6 <Set_date+0xe0>
		{
			set_clock_buf[cursor]= key;
    2c6e:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2c72:	0e 2e       	mov	r0, r30
    2c74:	00 0c       	add	r0, r0
    2c76:	ff 0b       	sbc	r31, r31
    2c78:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2c7c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2c80:	e7 58       	subi	r30, 0x87	; 135
    2c82:	fb 4f       	sbci	r31, 0xFB	; 251
    2c84:	80 83       	st	Z, r24
			if (cursor==1 || cursor==2 || cursor==3 )
    2c86:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	41 f0       	breq	.+16     	; 0x2c9e <Set_date+0xa8>
    2c8e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	21 f0       	breq	.+8      	; 0x2c9e <Set_date+0xa8>
    2c96:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2c9a:	83 30       	cpi	r24, 0x03	; 3
    2c9c:	51 f4       	brne	.+20     	; 0x2cb2 <Set_date+0xbc>
			{
				set_clock_buf[cursor]|=0x80;
    2c9e:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2ca2:	0e 2e       	mov	r0, r30
    2ca4:	00 0c       	add	r0, r0
    2ca6:	ff 0b       	sbc	r31, r31
    2ca8:	e7 58       	subi	r30, 0x87	; 135
    2caa:	fb 4f       	sbci	r31, 0xFB	; 251
    2cac:	80 81       	ld	r24, Z
    2cae:	80 68       	ori	r24, 0x80	; 128
    2cb0:	80 83       	st	Z, r24
			}
			key=-1;
    2cb2:	8f ef       	ldi	r24, 0xFF	; 255
    2cb4:	9f ef       	ldi	r25, 0xFF	; 255
    2cb6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2cba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    2cbe:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2cc2:	85 30       	cpi	r24, 0x05	; 5
    2cc4:	28 f4       	brcc	.+10     	; 0x2cd0 <Set_date+0xda>
    2cc6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2cca:	8f 5f       	subi	r24, 0xFF	; 255
    2ccc:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_clock();
    2cd0:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    2cd4:	5f c0       	rjmp	.+190    	; 0x2d94 <Set_date+0x19e>
		}
		else if (key==left)		//check for left <-
    2cd6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2cda:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2cde:	45 97       	sbiw	r24, 0x15	; 21
    2ce0:	99 f4       	brne	.+38     	; 0x2d08 <Set_date+0x112>
		{
			if(cursor!=0)
    2ce2:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2ce6:	88 23       	and	r24, r24
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <Set_date+0xf6>
    2cea:	54 c0       	rjmp	.+168    	; 0x2d94 <Set_date+0x19e>
			{
				cursor--;
    2cec:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2cf0:	81 50       	subi	r24, 0x01	; 1
    2cf2:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2cf6:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2cfa:	8f ef       	ldi	r24, 0xFF	; 255
    2cfc:	9f ef       	ldi	r25, 0xFF	; 255
    2cfe:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2d02:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2d06:	46 c0       	rjmp	.+140    	; 0x2d94 <Set_date+0x19e>
			}			
		}
		else if (key==right)		//check for right ->
    2d08:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2d0c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2d10:	46 97       	sbiw	r24, 0x16	; 22
    2d12:	91 f4       	brne	.+36     	; 0x2d38 <Set_date+0x142>
		{
			if(cursor<sizeof(set_clock_buf)-1)
    2d14:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d18:	85 30       	cpi	r24, 0x05	; 5
    2d1a:	e0 f5       	brcc	.+120    	; 0x2d94 <Set_date+0x19e>
			{
				cursor++;
    2d1c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2d26:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	9f ef       	ldi	r25, 0xFF	; 255
    2d2e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2d32:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2d36:	2e c0       	rjmp	.+92     	; 0x2d94 <Set_date+0x19e>
			}
			
		}
		else if (key==ok)
    2d38:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2d3c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2d40:	47 97       	sbiw	r24, 0x17	; 23
    2d42:	41 f5       	brne	.+80     	; 0x2d94 <Set_date+0x19e>
		{
			struct rtc_time ds1302;
			struct rtc_time *date;
			date = &ds1302;
			int8_t byte_get;
			date->hour_format = H24;
    2d44:	8c e0       	ldi	r24, 0x0C	; 12
    2d46:	88 8b       	std	Y+16, r24	; 0x10
			byte_get=(set_clock_buf[0] & 0x0f)<<4;
    2d48:	e9 e7       	ldi	r30, 0x79	; 121
    2d4a:	f4 e0       	ldi	r31, 0x04	; 4
    2d4c:	80 81       	ld	r24, Z
    2d4e:	20 e1       	ldi	r18, 0x10	; 16
    2d50:	82 9f       	mul	r24, r18
    2d52:	c0 01       	movw	r24, r0
    2d54:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[1] & 0x0f);
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	9f 70       	andi	r25, 0x0F	; 15
    2d5a:	89 2b       	or	r24, r25
			date->date = byte_get;
    2d5c:	8d 87       	std	Y+13, r24	; 0x0d
			byte_get=(set_clock_buf[2] & 0x0f)<<4;
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	20 e1       	ldi	r18, 0x10	; 16
    2d62:	82 9f       	mul	r24, r18
    2d64:	c0 01       	movw	r24, r0
    2d66:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[3] & 0x0f);
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	9f 70       	andi	r25, 0x0F	; 15
    2d6c:	89 2b       	or	r24, r25
			date->month = byte_get;
    2d6e:	8e 87       	std	Y+14, r24	; 0x0e
			byte_get=(set_clock_buf[4] & 0x0f)<<4;
    2d70:	84 81       	ldd	r24, Z+4	; 0x04
    2d72:	20 e1       	ldi	r18, 0x10	; 16
    2d74:	82 9f       	mul	r24, r18
    2d76:	c0 01       	movw	r24, r0
    2d78:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[5] & 0x0f);
    2d7a:	95 81       	ldd	r25, Z+5	; 0x05
    2d7c:	9f 70       	andi	r25, 0x0F	; 15
    2d7e:	89 2b       	or	r24, r25
			date->year = byte_get;			
    2d80:	8f 87       	std	Y+15, r24	; 0x0f
			ds1302_write_date(date);
    2d82:	ce 01       	movw	r24, r28
    2d84:	09 96       	adiw	r24, 0x09	; 9
    2d86:	0e 94 9d 07 	call	0xf3a	; 0xf3a <ds1302_write_date>
			user_instruction=0;
    2d8a:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	set_clock_buf[4]= ((rtc->year&0xf0)>>4);
	set_clock_buf[5]= (rtc->year&0x0f);
	Display_set_clock();
	user_instruction='d';
	cursor=0;Menu_blink_on=1;
	while(user_instruction!=0)
    2d94:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    2d98:	81 11       	cpse	r24, r1
    2d9a:	5d cf       	rjmp	.-326    	; 0x2c56 <Set_date+0x60>
			ds1302_write_date(date);
			user_instruction=0;
			display_init(1);
		}
	}
	display_init(1);
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	//cursor=0;
	//shift=0;
	//Clock_blink=0;Menu_blink_on=0;
}
    2da2:	60 96       	adiw	r28, 0x10	; 16
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	08 95       	ret

00002db4 <show_brightness>:
		//uint8_t digits = eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
		//TLC_config_byte(sram_brigt,digits);
	} 
}

void show_brightness(void){
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <show_brightness+0x6>
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <show_brightness+0x8>
    2dbc:	00 d0       	rcall	.+0      	; 0x2dbe <show_brightness+0xa>
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
	char dec_bright[2]; 
	char dec_address[4];
	uint8_t i;
	itoa(sram_brigt,dec_bright,10);	
    2dc2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sram_brigt>
    2dc6:	4a e0       	ldi	r20, 0x0A	; 10
    2dc8:	be 01       	movw	r22, r28
    2dca:	6f 5f       	subi	r22, 0xFF	; 255
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
	display_out_buf[0]= CHR_o;
    2dd4:	ef e7       	ldi	r30, 0x7F	; 127
    2dd6:	f4 e0       	ldi	r31, 0x04	; 4
    2dd8:	82 e1       	ldi	r24, 0x12	; 18
    2dda:	80 83       	st	Z, r24
	display_out_buf[1]= SPACE;
    2ddc:	8d e0       	ldi	r24, 0x0D	; 13
    2dde:	81 83       	std	Z+1, r24	; 0x01
	if (dec_bright[1]!=0)
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	88 23       	and	r24, r24
    2de4:	31 f0       	breq	.+12     	; 0x2df2 <show_brightness+0x3e>
	{
		display_out_buf[2]=dec_bright[0]&0x0f;
    2de6:	99 81       	ldd	r25, Y+1	; 0x01
    2de8:	9f 70       	andi	r25, 0x0F	; 15
    2dea:	92 83       	std	Z+2, r25	; 0x02
		display_out_buf[3]=dec_bright[1]&0x0f;
    2dec:	8f 70       	andi	r24, 0x0F	; 15
    2dee:	83 83       	std	Z+3, r24	; 0x03
    2df0:	07 c0       	rjmp	.+14     	; 0x2e00 <show_brightness+0x4c>
	}else{
		display_out_buf[2]= SPACE;
    2df2:	ef e7       	ldi	r30, 0x7F	; 127
    2df4:	f4 e0       	ldi	r31, 0x04	; 4
    2df6:	8d e0       	ldi	r24, 0x0D	; 13
    2df8:	82 83       	std	Z+2, r24	; 0x02
		display_out_buf[3]=dec_bright[0]&0x0f;
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	8f 70       	andi	r24, 0x0F	; 15
    2dfe:	83 83       	std	Z+3, r24	; 0x03
	}
	
	if (Digits_disp==6)	{
    2e00:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    2e04:	86 30       	cpi	r24, 0x06	; 6
    2e06:	31 f4       	brne	.+12     	; 0x2e14 <show_brightness+0x60>
		display_out_buf[4]= SPACE;
    2e08:	ef e7       	ldi	r30, 0x7F	; 127
    2e0a:	f4 e0       	ldi	r31, 0x04	; 4
    2e0c:	8d e0       	ldi	r24, 0x0D	; 13
    2e0e:	84 83       	std	Z+4, r24	; 0x04
		display_out_buf[5]= SPACE;
    2e10:	85 83       	std	Z+5, r24	; 0x05
    2e12:	22 c0       	rjmp	.+68     	; 0x2e58 <show_brightness+0xa4>
	}else if (Digits_disp>=8){
    2e14:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    2e18:	88 30       	cpi	r24, 0x08	; 8
    2e1a:	f4 f0       	brlt	.+60     	; 0x2e58 <show_brightness+0xa4>
		itoa(eeprom_read_byte((uint8_t*)Slave_address),dec_address,10);	
    2e1c:	8c e1       	ldi	r24, 0x1C	; 28
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    2e24:	4a e0       	ldi	r20, 0x0A	; 10
    2e26:	be 01       	movw	r22, r28
    2e28:	6d 5f       	subi	r22, 0xFD	; 253
    2e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__itoa_ncheck>
		display_out_buf[4]= CHR_A;
    2e32:	ef e7       	ldi	r30, 0x7F	; 127
    2e34:	f4 e0       	ldi	r31, 0x04	; 4
    2e36:	84 e1       	ldi	r24, 0x14	; 20
    2e38:	84 83       	std	Z+4, r24	; 0x04
		display_out_buf[5]= SPACE;
    2e3a:	8d e0       	ldi	r24, 0x0D	; 13
    2e3c:	85 83       	std	Z+5, r24	; 0x05
		display_out_buf[6]= dec_address[0]&0xf;
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	8f 70       	andi	r24, 0x0F	; 15
    2e42:	86 83       	std	Z+6, r24	; 0x06
		if (dec_address[1]){
    2e44:	8c 81       	ldd	r24, Y+4	; 0x04
    2e46:	88 23       	and	r24, r24
    2e48:	21 f0       	breq	.+8      	; 0x2e52 <show_brightness+0x9e>
			display_out_buf[7]= dec_address[1]&0xf;
    2e4a:	8f 70       	andi	r24, 0x0F	; 15
    2e4c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <show_brightness+0xa4>
		}else{
			display_out_buf[7]= SPACE; 
    2e52:	8d e0       	ldi	r24, 0x0D	; 13
    2e54:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
		}
		
	}
	
	
	Display_Out();
    2e58:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    2e5c:	2f ef       	ldi	r18, 0xFF	; 255
    2e5e:	8d e3       	ldi	r24, 0x3D	; 61
    2e60:	99 e4       	ldi	r25, 0x49	; 73
    2e62:	21 50       	subi	r18, 0x01	; 1
    2e64:	80 40       	sbci	r24, 0x00	; 0
    2e66:	90 40       	sbci	r25, 0x00	; 0
    2e68:	e1 f7       	brne	.-8      	; 0x2e62 <show_brightness+0xae>
    2e6a:	00 c0       	rjmp	.+0      	; 0x2e6c <show_brightness+0xb8>
    2e6c:	00 00       	nop
	_delay_ms(3000);
	user_instruction=0;
    2e6e:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
	display_init(1);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
}
    2e78:	26 96       	adiw	r28, 0x06	; 6
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

00002e8a <Modebus_receve_finish>:
    else                            // Else LSB is not set
      CRC_receive >>= 1;                    // Just shift right
    }
}

extern void Modebus_receve_finish(void){
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
	if (Read_Modstr.CRC == CRC_receive)
    2e90:	20 91 18 05 	lds	r18, 0x0518	; 0x800518 <Read_Modstr+0x43>
    2e94:	30 91 19 05 	lds	r19, 0x0519	; 0x800519 <Read_Modstr+0x44>
    2e98:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2e9c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2ea0:	28 17       	cp	r18, r24
    2ea2:	39 07       	cpc	r19, r25
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <Modebus_receve_finish+0x1e>
    2ea6:	67 c5       	rjmp	.+2766   	; 0x3976 <Modebus_receve_finish+0xaec>
	{
		int8_t i=0;
		uint8_t Status_Byte=0;
		send_Modstr.nb = 0;
    2ea8:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <send_Modstr+0x2>
		uint8_t Len;
		switch(Read_Modstr.function)
    2eac:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <Read_Modstr+0x1>
    2eb0:	8e 2f       	mov	r24, r30
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	31 97       	sbiw	r30, 0x01	; 1
    2eb8:	e7 36       	cpi	r30, 0x67	; 103
    2eba:	f1 05       	cpc	r31, r1
    2ebc:	08 f0       	brcs	.+2      	; 0x2ec0 <Modebus_receve_finish+0x36>
    2ebe:	5b c5       	rjmp	.+2742   	; 0x3976 <Modebus_receve_finish+0xaec>
    2ec0:	ea 55       	subi	r30, 0x5A	; 90
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
		{
			case(MD_Device_ID):
				send_Modstr.function = MD_Device_ID;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <send_Modstr+0x1>
}

extern void Modebus_receve_finish(void){
	if (Read_Modstr.CRC == CRC_receive)
	{
		int8_t i=0;
    2ece:	40 e0       	ldi	r20, 0x00	; 0
		switch(Read_Modstr.function)
		{
			case(MD_Device_ID):
				send_Modstr.function = MD_Device_ID;
								
				while(i<sizeof(flash_Device_ID)){
    2ed0:	0f c0       	rjmp	.+30     	; 0x2ef0 <Modebus_receve_finish+0x66>
					send_Modstr.data[i] = flash_Device_ID[i];
    2ed2:	84 2f       	mov	r24, r20
    2ed4:	04 2e       	mov	r0, r20
    2ed6:	00 0c       	add	r0, r0
    2ed8:	99 0b       	sbc	r25, r25
    2eda:	9c 01       	movw	r18, r24
    2edc:	22 52       	subi	r18, 0x22	; 34
    2ede:	3c 4f       	sbci	r19, 0xFC	; 252
    2ee0:	f9 01       	movw	r30, r18
    2ee2:	24 91       	lpm	r18, Z
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	a6 57       	subi	r26, 0x76	; 118
    2ee8:	bb 4f       	sbci	r27, 0xFB	; 251
    2eea:	13 96       	adiw	r26, 0x03	; 3
    2eec:	2c 93       	st	X, r18
					i++;
    2eee:	4f 5f       	subi	r20, 0xFF	; 255
		switch(Read_Modstr.function)
		{
			case(MD_Device_ID):
				send_Modstr.function = MD_Device_ID;
								
				while(i<sizeof(flash_Device_ID)){
    2ef0:	84 2f       	mov	r24, r20
    2ef2:	41 31       	cpi	r20, 0x11	; 17
    2ef4:	70 f3       	brcs	.-36     	; 0x2ed2 <Modebus_receve_finish+0x48>
					send_Modstr.data[i] = flash_Device_ID[i];
					i++;
				}
				send_Modstr.nb = i-1;
    2ef6:	81 50       	subi	r24, 0x01	; 1
    2ef8:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <send_Modstr+0x2>
				send_Modstr.data[i] = 0;
    2efc:	e4 2f       	mov	r30, r20
    2efe:	44 0f       	add	r20, r20
    2f00:	ff 0b       	sbc	r31, r31
    2f02:	e6 57       	subi	r30, 0x76	; 118
    2f04:	fb 4f       	sbci	r31, 0xFB	; 251
    2f06:	13 82       	std	Z+3, r1	; 0x03
				//send_Modstr.address = eeprom_read_byte((uint8_t*)Slave_address);
				 //"CLOCK_TIMER_V.1.2"	
				//send_Modstr.CRC = CRC_receive;	
				Reply_modbus(send_Modstr);
    2f08:	8d b7       	in	r24, 0x3d	; 61
    2f0a:	9e b7       	in	r25, 0x3e	; 62
    2f0c:	85 54       	subi	r24, 0x45	; 69
    2f0e:	91 09       	sbc	r25, r1
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	9e bf       	out	0x3e, r25	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	8d bf       	out	0x3d, r24	; 61
    2f1a:	ad b7       	in	r26, 0x3d	; 61
    2f1c:	be b7       	in	r27, 0x3e	; 62
    2f1e:	11 96       	adiw	r26, 0x01	; 1
    2f20:	85 e4       	ldi	r24, 0x45	; 69
    2f22:	ea e8       	ldi	r30, 0x8A	; 138
    2f24:	f4 e0       	ldi	r31, 0x04	; 4
    2f26:	01 90       	ld	r0, Z+
    2f28:	0d 92       	st	X+, r0
    2f2a:	8a 95       	dec	r24
    2f2c:	e1 f7       	brne	.-8      	; 0x2f26 <Modebus_receve_finish+0x9c>
    2f2e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    2f32:	ed b7       	in	r30, 0x3d	; 61
    2f34:	fe b7       	in	r31, 0x3e	; 62
    2f36:	eb 5b       	subi	r30, 0xBB	; 187
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	fe bf       	out	0x3e, r31	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	ed bf       	out	0x3d, r30	; 61
    2f44:	18 c5       	rjmp	.+2608   	; 0x3976 <Modebus_receve_finish+0xaec>
			case(MD_Set_Address):
				cli();
    2f46:	f8 94       	cli
				eeprom_write_byte ((uint8_t*)Slave_address,Read_Modstr.data[0]);
    2f48:	60 91 d8 04 	lds	r22, 0x04D8	; 0x8004d8 <Read_Modstr+0x3>
    2f4c:	8c e1       	ldi	r24, 0x1C	; 28
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
				sei();
    2f54:	78 94       	sei
				send_Modstr.function = MD_Set_Address;
    2f56:	ea e8       	ldi	r30, 0x8A	; 138
    2f58:	f4 e0       	ldi	r31, 0x04	; 4
    2f5a:	82 e1       	ldi	r24, 0x12	; 18
    2f5c:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    2f5e:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    2f60:	8d b7       	in	r24, 0x3d	; 61
    2f62:	9e b7       	in	r25, 0x3e	; 62
    2f64:	85 54       	subi	r24, 0x45	; 69
    2f66:	91 09       	sbc	r25, r1
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	9e bf       	out	0x3e, r25	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	8d bf       	out	0x3d, r24	; 61
    2f72:	ad b7       	in	r26, 0x3d	; 61
    2f74:	be b7       	in	r27, 0x3e	; 62
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	85 e4       	ldi	r24, 0x45	; 69
    2f7a:	01 90       	ld	r0, Z+
    2f7c:	0d 92       	st	X+, r0
    2f7e:	8a 95       	dec	r24
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <Modebus_receve_finish+0xf0>
    2f82:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    2f86:	ed b7       	in	r30, 0x3d	; 61
    2f88:	fe b7       	in	r31, 0x3e	; 62
    2f8a:	eb 5b       	subi	r30, 0xBB	; 187
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	fe bf       	out	0x3e, r31	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	ed bf       	out	0x3d, r30	; 61
    2f98:	ee c4       	rjmp	.+2524   	; 0x3976 <Modebus_receve_finish+0xaec>
			case(MD_Read_Brightness):
				send_Modstr.function = MD_Read_Brightness;
    2f9a:	ea e8       	ldi	r30, 0x8A	; 138
    2f9c:	f4 e0       	ldi	r31, 0x04	; 4
    2f9e:	80 e1       	ldi	r24, 0x10	; 16
    2fa0:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0] = sram_brigt;
    2fa2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sram_brigt>
    2fa6:	83 83       	std	Z+3, r24	; 0x03
				send_Modstr.data[1] = 0;
    2fa8:	14 82       	std	Z+4, r1	; 0x04
				send_Modstr.nb =1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	82 83       	std	Z+2, r24	; 0x02
				Reply_modbus(send_Modstr);
    2fae:	8d b7       	in	r24, 0x3d	; 61
    2fb0:	9e b7       	in	r25, 0x3e	; 62
    2fb2:	85 54       	subi	r24, 0x45	; 69
    2fb4:	91 09       	sbc	r25, r1
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	9e bf       	out	0x3e, r25	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	8d bf       	out	0x3d, r24	; 61
    2fc0:	ad b7       	in	r26, 0x3d	; 61
    2fc2:	be b7       	in	r27, 0x3e	; 62
    2fc4:	11 96       	adiw	r26, 0x01	; 1
    2fc6:	85 e4       	ldi	r24, 0x45	; 69
    2fc8:	01 90       	ld	r0, Z+
    2fca:	0d 92       	st	X+, r0
    2fcc:	8a 95       	dec	r24
    2fce:	e1 f7       	brne	.-8      	; 0x2fc8 <Modebus_receve_finish+0x13e>
    2fd0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    2fd4:	ed b7       	in	r30, 0x3d	; 61
    2fd6:	fe b7       	in	r31, 0x3e	; 62
    2fd8:	eb 5b       	subi	r30, 0xBB	; 187
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	fe bf       	out	0x3e, r31	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	ed bf       	out	0x3d, r30	; 61
    2fe6:	c7 c4       	rjmp	.+2446   	; 0x3976 <Modebus_receve_finish+0xaec>
			case(MD_Set_Brightness):
				cli();
    2fe8:	f8 94       	cli
				eeprom_write_byte((uint8_t*)F_eep + Brightness,Read_Modstr.data[0]);
    2fea:	60 91 d8 04 	lds	r22, 0x04D8	; 0x8004d8 <Read_Modstr+0x3>
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
				sei();
    2ff6:	78 94       	sei
				send_Modstr.function = MD_Set_Brightness;
    2ff8:	ea e8       	ldi	r30, 0x8A	; 138
    2ffa:	f4 e0       	ldi	r31, 0x04	; 4
    2ffc:	81 e1       	ldi	r24, 0x11	; 17
    2ffe:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    3000:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3002:	8d b7       	in	r24, 0x3d	; 61
    3004:	9e b7       	in	r25, 0x3e	; 62
    3006:	85 54       	subi	r24, 0x45	; 69
    3008:	91 09       	sbc	r25, r1
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	9e bf       	out	0x3e, r25	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	8d bf       	out	0x3d, r24	; 61
    3014:	ad b7       	in	r26, 0x3d	; 61
    3016:	be b7       	in	r27, 0x3e	; 62
    3018:	11 96       	adiw	r26, 0x01	; 1
    301a:	85 e4       	ldi	r24, 0x45	; 69
    301c:	01 90       	ld	r0, Z+
    301e:	0d 92       	st	X+, r0
    3020:	8a 95       	dec	r24
    3022:	e1 f7       	brne	.-8      	; 0x301c <Modebus_receve_finish+0x192>
    3024:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3028:	ed b7       	in	r30, 0x3d	; 61
    302a:	fe b7       	in	r31, 0x3e	; 62
    302c:	eb 5b       	subi	r30, 0xBB	; 187
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	fe bf       	out	0x3e, r31	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	ed bf       	out	0x3d, r30	; 61
    303a:	9d c4       	rjmp	.+2362   	; 0x3976 <Modebus_receve_finish+0xaec>
#ifdef TIMER_DISPLAY
			case(MD_Start_Countdown1):
				if (user_instruction != 'A' && user_instruction != 'a') {
    303c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3040:	81 34       	cpi	r24, 0x41	; 65
    3042:	69 f0       	breq	.+26     	; 0x305e <Modebus_receve_finish+0x1d4>
    3044:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3048:	81 36       	cpi	r24, 0x61	; 97
    304a:	49 f0       	breq	.+18     	; 0x305e <Modebus_receve_finish+0x1d4>
					user_instruction = 'A'; // This means Counter down 1
    304c:	81 e4       	ldi	r24, 0x41	; 65
    304e:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    3052:	8f ef       	ldi	r24, 0xFF	; 255
    3054:	9f ef       	ldi	r25, 0xFF	; 255
    3056:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    305a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				}
				send_Modstr.function = MD_Start_Countdown1;
    305e:	ea e8       	ldi	r30, 0x8A	; 138
    3060:	f4 e0       	ldi	r31, 0x04	; 4
    3062:	85 e0       	ldi	r24, 0x05	; 5
    3064:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    3066:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3068:	8d b7       	in	r24, 0x3d	; 61
    306a:	9e b7       	in	r25, 0x3e	; 62
    306c:	85 54       	subi	r24, 0x45	; 69
    306e:	91 09       	sbc	r25, r1
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	9e bf       	out	0x3e, r25	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	8d bf       	out	0x3d, r24	; 61
    307a:	ad b7       	in	r26, 0x3d	; 61
    307c:	be b7       	in	r27, 0x3e	; 62
    307e:	11 96       	adiw	r26, 0x01	; 1
    3080:	85 e4       	ldi	r24, 0x45	; 69
    3082:	01 90       	ld	r0, Z+
    3084:	0d 92       	st	X+, r0
    3086:	8a 95       	dec	r24
    3088:	e1 f7       	brne	.-8      	; 0x3082 <Modebus_receve_finish+0x1f8>
    308a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    308e:	ed b7       	in	r30, 0x3d	; 61
    3090:	fe b7       	in	r31, 0x3e	; 62
    3092:	eb 5b       	subi	r30, 0xBB	; 187
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	fe bf       	out	0x3e, r31	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	ed bf       	out	0x3d, r30	; 61
    30a0:	6a c4       	rjmp	.+2260   	; 0x3976 <Modebus_receve_finish+0xaec>
			case(MD_Start_Countdown2):
				if (user_instruction != 'B' && user_instruction != 'b') {
    30a2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    30a6:	82 34       	cpi	r24, 0x42	; 66
    30a8:	69 f0       	breq	.+26     	; 0x30c4 <Modebus_receve_finish+0x23a>
    30aa:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    30ae:	82 36       	cpi	r24, 0x62	; 98
    30b0:	49 f0       	breq	.+18     	; 0x30c4 <Modebus_receve_finish+0x23a>
					user_instruction = 'B'; // This means Counter down 1
    30b2:	82 e4       	ldi	r24, 0x42	; 66
    30b4:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    30b8:	8f ef       	ldi	r24, 0xFF	; 255
    30ba:	9f ef       	ldi	r25, 0xFF	; 255
    30bc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    30c0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				}
				send_Modstr.function = MD_Start_Countdown2;
    30c4:	ea e8       	ldi	r30, 0x8A	; 138
    30c6:	f4 e0       	ldi	r31, 0x04	; 4
    30c8:	86 e0       	ldi	r24, 0x06	; 6
    30ca:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    30cc:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    30ce:	8d b7       	in	r24, 0x3d	; 61
    30d0:	9e b7       	in	r25, 0x3e	; 62
    30d2:	85 54       	subi	r24, 0x45	; 69
    30d4:	91 09       	sbc	r25, r1
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	9e bf       	out	0x3e, r25	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	8d bf       	out	0x3d, r24	; 61
    30e0:	ad b7       	in	r26, 0x3d	; 61
    30e2:	be b7       	in	r27, 0x3e	; 62
    30e4:	11 96       	adiw	r26, 0x01	; 1
    30e6:	85 e4       	ldi	r24, 0x45	; 69
    30e8:	01 90       	ld	r0, Z+
    30ea:	0d 92       	st	X+, r0
    30ec:	8a 95       	dec	r24
    30ee:	e1 f7       	brne	.-8      	; 0x30e8 <Modebus_receve_finish+0x25e>
    30f0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    30f4:	ed b7       	in	r30, 0x3d	; 61
    30f6:	fe b7       	in	r31, 0x3e	; 62
    30f8:	eb 5b       	subi	r30, 0xBB	; 187
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	fe bf       	out	0x3e, r31	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	ed bf       	out	0x3d, r30	; 61
    3106:	37 c4       	rjmp	.+2158   	; 0x3976 <Modebus_receve_finish+0xaec>
			/*
				if (user_instruction != 'U' && user_instruction != 'u') {
					user_instruction = 'U'; // This means Up counter
					key = -1;
				} */
				user_instruction = 'U'; // This means Up counter
    3108:	85 e5       	ldi	r24, 0x55	; 85
    310a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
				key = -1;
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	9f ef       	ldi	r25, 0xFF	; 255
    3112:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3116:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				TCCR2B=0;
    311a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				TCNT2=0;
    311e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
				timer[0]=0;timer[1]=0;timer[2]=0;
    3122:	e6 e7       	ldi	r30, 0x76	; 118
    3124:	f4 e0       	ldi	r31, 0x04	; 4
    3126:	10 82       	st	Z, r1
    3128:	11 82       	std	Z+1, r1	; 0x01
    312a:	12 82       	std	Z+2, r1	; 0x02
#ifndef SCOREBOARD
				milliseconds_count=0;
#endif
				Timer_blink_on=0x80;
    312c:	80 e8       	ldi	r24, 0x80	; 128
    312e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <Timer_blink_on>
				
				send_Modstr.function = MD_Start_Upcounter;
    3132:	ea e8       	ldi	r30, 0x8A	; 138
    3134:	f4 e0       	ldi	r31, 0x04	; 4
    3136:	87 e0       	ldi	r24, 0x07	; 7
    3138:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    313a:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    313c:	8d b7       	in	r24, 0x3d	; 61
    313e:	9e b7       	in	r25, 0x3e	; 62
    3140:	85 54       	subi	r24, 0x45	; 69
    3142:	91 09       	sbc	r25, r1
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	9e bf       	out	0x3e, r25	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	8d bf       	out	0x3d, r24	; 61
    314e:	ad b7       	in	r26, 0x3d	; 61
    3150:	be b7       	in	r27, 0x3e	; 62
    3152:	11 96       	adiw	r26, 0x01	; 1
    3154:	85 e4       	ldi	r24, 0x45	; 69
    3156:	01 90       	ld	r0, Z+
    3158:	0d 92       	st	X+, r0
    315a:	8a 95       	dec	r24
    315c:	e1 f7       	brne	.-8      	; 0x3156 <Modebus_receve_finish+0x2cc>
    315e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3162:	ed b7       	in	r30, 0x3d	; 61
    3164:	fe b7       	in	r31, 0x3e	; 62
    3166:	eb 5b       	subi	r30, 0xBB	; 187
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	fe bf       	out	0x3e, r31	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	ed bf       	out	0x3d, r30	; 61
    3174:	00 c4       	rjmp	.+2048   	; 0x3976 <Modebus_receve_finish+0xaec>
			case(MD_StartStop_timer):
				key=ok;
    3176:	87 e1       	ldi	r24, 0x17	; 23
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    317e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				send_Modstr.function = MD_StartStop_timer;
    3182:	ea e8       	ldi	r30, 0x8A	; 138
    3184:	f4 e0       	ldi	r31, 0x04	; 4
    3186:	82 e2       	ldi	r24, 0x22	; 34
    3188:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    318a:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    318c:	8d b7       	in	r24, 0x3d	; 61
    318e:	9e b7       	in	r25, 0x3e	; 62
    3190:	85 54       	subi	r24, 0x45	; 69
    3192:	91 09       	sbc	r25, r1
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	9e bf       	out	0x3e, r25	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	8d bf       	out	0x3d, r24	; 61
    319e:	ad b7       	in	r26, 0x3d	; 61
    31a0:	be b7       	in	r27, 0x3e	; 62
    31a2:	11 96       	adiw	r26, 0x01	; 1
    31a4:	85 e4       	ldi	r24, 0x45	; 69
    31a6:	01 90       	ld	r0, Z+
    31a8:	0d 92       	st	X+, r0
    31aa:	8a 95       	dec	r24
    31ac:	e1 f7       	brne	.-8      	; 0x31a6 <Modebus_receve_finish+0x31c>
    31ae:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    31b2:	ed b7       	in	r30, 0x3d	; 61
    31b4:	fe b7       	in	r31, 0x3e	; 62
    31b6:	eb 5b       	subi	r30, 0xBB	; 187
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	fe bf       	out	0x3e, r31	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	ed bf       	out	0x3d, r30	; 61
    31c4:	d8 c3       	rjmp	.+1968   	; 0x3976 <Modebus_receve_finish+0xaec>

			case(MD_Start_timer):
				cli();
    31c6:	f8 94       	cli
				if (eeprom_read_byte((uint8_t*)FAV_eep + Centimeter)){
    31c8:	8e e0       	ldi	r24, 0x0E	; 14
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    31d0:	88 23       	and	r24, r24
    31d2:	21 f0       	breq	.+8      	; 0x31dc <Modebus_receve_finish+0x352>
					TCCR2B = 0b00000001; //start timer for seconds
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    31da:	03 c0       	rjmp	.+6      	; 0x31e2 <Modebus_receve_finish+0x358>
				}else{
					TCCR2B = 0b00000101; //start timer for seconds
    31dc:	85 e0       	ldi	r24, 0x05	; 5
    31de:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				}
				sei();
    31e2:	78 94       	sei
				send_Modstr.function = MD_Start_timer;
    31e4:	ea e8       	ldi	r30, 0x8A	; 138
    31e6:	f4 e0       	ldi	r31, 0x04	; 4
    31e8:	88 e1       	ldi	r24, 0x18	; 24
    31ea:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    31ec:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    31ee:	8d b7       	in	r24, 0x3d	; 61
    31f0:	9e b7       	in	r25, 0x3e	; 62
    31f2:	85 54       	subi	r24, 0x45	; 69
    31f4:	91 09       	sbc	r25, r1
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	9e bf       	out	0x3e, r25	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	8d bf       	out	0x3d, r24	; 61
    3200:	ad b7       	in	r26, 0x3d	; 61
    3202:	be b7       	in	r27, 0x3e	; 62
    3204:	11 96       	adiw	r26, 0x01	; 1
    3206:	85 e4       	ldi	r24, 0x45	; 69
    3208:	01 90       	ld	r0, Z+
    320a:	0d 92       	st	X+, r0
    320c:	8a 95       	dec	r24
    320e:	e1 f7       	brne	.-8      	; 0x3208 <Modebus_receve_finish+0x37e>
    3210:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				Buzzer(1,8600);
    3214:	ed b7       	in	r30, 0x3d	; 61
    3216:	fe b7       	in	r31, 0x3e	; 62
    3218:	eb 5b       	subi	r30, 0xBB	; 187
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	fe bf       	out	0x3e, r31	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	ed bf       	out	0x3d, r30	; 61
    3226:	68 e9       	ldi	r22, 0x98	; 152
    3228:	71 e2       	ldi	r23, 0x21	; 33
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    3232:	ff ef       	ldi	r31, 0xFF	; 255
    3234:	22 e5       	ldi	r18, 0x52	; 82
    3236:	87 e0       	ldi	r24, 0x07	; 7
    3238:	f1 50       	subi	r31, 0x01	; 1
    323a:	20 40       	sbci	r18, 0x00	; 0
    323c:	80 40       	sbci	r24, 0x00	; 0
    323e:	e1 f7       	brne	.-8      	; 0x3238 <Modebus_receve_finish+0x3ae>
    3240:	00 c0       	rjmp	.+0      	; 0x3242 <Modebus_receve_finish+0x3b8>
    3242:	00 00       	nop
				_delay_ms(300);
				Buzzer(0,0);
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	70 e0       	ldi	r23, 0x00	; 0
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				break;
    3250:	92 c3       	rjmp	.+1828   	; 0x3976 <Modebus_receve_finish+0xaec>
//#endif
			case(MD_Stop_timer):
				TCCR2B=0;
    3252:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				send_Modstr.function = MD_Stop_timer;
    3256:	ea e8       	ldi	r30, 0x8A	; 138
    3258:	f4 e0       	ldi	r31, 0x04	; 4
    325a:	89 e1       	ldi	r24, 0x19	; 25
    325c:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    325e:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3260:	ed b7       	in	r30, 0x3d	; 61
    3262:	fe b7       	in	r31, 0x3e	; 62
    3264:	e5 54       	subi	r30, 0x45	; 69
    3266:	f1 09       	sbc	r31, r1
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	fe bf       	out	0x3e, r31	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	ed bf       	out	0x3d, r30	; 61
    3272:	ad b7       	in	r26, 0x3d	; 61
    3274:	be b7       	in	r27, 0x3e	; 62
    3276:	11 96       	adiw	r26, 0x01	; 1
    3278:	85 e4       	ldi	r24, 0x45	; 69
    327a:	ea e8       	ldi	r30, 0x8A	; 138
    327c:	f4 e0       	ldi	r31, 0x04	; 4
    327e:	01 90       	ld	r0, Z+
    3280:	0d 92       	st	X+, r0
    3282:	8a 95       	dec	r24
    3284:	e1 f7       	brne	.-8      	; 0x327e <Modebus_receve_finish+0x3f4>
    3286:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				Buzzer(1,8600);
    328a:	8d b7       	in	r24, 0x3d	; 61
    328c:	9e b7       	in	r25, 0x3e	; 62
    328e:	8b 5b       	subi	r24, 0xBB	; 187
    3290:	9f 4f       	sbci	r25, 0xFF	; 255
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	9e bf       	out	0x3e, r25	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	8d bf       	out	0x3d, r24	; 61
    329c:	68 e9       	ldi	r22, 0x98	; 152
    329e:	71 e2       	ldi	r23, 0x21	; 33
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    32a8:	9f ef       	ldi	r25, 0xFF	; 255
    32aa:	e2 e5       	ldi	r30, 0x52	; 82
    32ac:	f7 e0       	ldi	r31, 0x07	; 7
    32ae:	91 50       	subi	r25, 0x01	; 1
    32b0:	e0 40       	sbci	r30, 0x00	; 0
    32b2:	f0 40       	sbci	r31, 0x00	; 0
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <Modebus_receve_finish+0x424>
    32b6:	00 c0       	rjmp	.+0      	; 0x32b8 <Modebus_receve_finish+0x42e>
    32b8:	00 00       	nop
				_delay_ms(300);
				Buzzer(0,0);
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				break;
    32c6:	57 c3       	rjmp	.+1710   	; 0x3976 <Modebus_receve_finish+0xaec>
			case(MD_Exit_Timing):
				send_Modstr.function = MD_Exit_Timing;
    32c8:	ea e8       	ldi	r30, 0x8A	; 138
    32ca:	f4 e0       	ldi	r31, 0x04	; 4
    32cc:	84 e0       	ldi	r24, 0x04	; 4
    32ce:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    32d0:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    32d2:	8d b7       	in	r24, 0x3d	; 61
    32d4:	9e b7       	in	r25, 0x3e	; 62
    32d6:	85 54       	subi	r24, 0x45	; 69
    32d8:	91 09       	sbc	r25, r1
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	9e bf       	out	0x3e, r25	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	8d bf       	out	0x3d, r24	; 61
    32e4:	ad b7       	in	r26, 0x3d	; 61
    32e6:	be b7       	in	r27, 0x3e	; 62
    32e8:	11 96       	adiw	r26, 0x01	; 1
    32ea:	85 e4       	ldi	r24, 0x45	; 69
    32ec:	01 90       	ld	r0, Z+
    32ee:	0d 92       	st	X+, r0
    32f0:	8a 95       	dec	r24
    32f2:	e1 f7       	brne	.-8      	; 0x32ec <Modebus_receve_finish+0x462>
    32f4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				user_instruction = 0;
    32f8:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
				Set_countdown_bank = 0;
    32fc:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
				display_init(1);
    3300:	ed b7       	in	r30, 0x3d	; 61
    3302:	fe b7       	in	r31, 0x3e	; 62
    3304:	eb 5b       	subi	r30, 0xBB	; 187
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	fe bf       	out	0x3e, r31	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	ed bf       	out	0x3d, r30	; 61
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
				break;
    331a:	2d c3       	rjmp	.+1626   	; 0x3976 <Modebus_receve_finish+0xaec>
//.....................................................................
			case (MD_Set_Fav_Menu):
				i=0;
				cli();
    331c:	f8 94       	cli
				Set_countdown_bank = 0;
				display_init(1);
				break;
//.....................................................................
			case (MD_Set_Fav_Menu):
				i=0;
    331e:	c0 e0       	ldi	r28, 0x00	; 0
				cli();
				while(i<sizeof(FAV_eep)){
    3320:	0d c0       	rjmp	.+26     	; 0x333c <Modebus_receve_finish+0x4b2>
					eeprom_write_byte ((uint8_t*) FAV_eep + i, Read_Modstr.data[i]);
    3322:	8c 2f       	mov	r24, r28
    3324:	0c 2e       	mov	r0, r28
    3326:	00 0c       	add	r0, r0
    3328:	99 0b       	sbc	r25, r25
    332a:	fc 01       	movw	r30, r24
    332c:	eb 52       	subi	r30, 0x2B	; 43
    332e:	fb 4f       	sbci	r31, 0xFB	; 251
    3330:	63 81       	ldd	r22, Z+3	; 0x03
    3332:	88 5f       	subi	r24, 0xF8	; 248
    3334:	9f 4f       	sbci	r25, 0xFF	; 255
    3336:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
					i++;
    333a:	cf 5f       	subi	r28, 0xFF	; 255
				break;
//.....................................................................
			case (MD_Set_Fav_Menu):
				i=0;
				cli();
				while(i<sizeof(FAV_eep)){
    333c:	c8 30       	cpi	r28, 0x08	; 8
    333e:	88 f3       	brcs	.-30     	; 0x3322 <Modebus_receve_finish+0x498>
					eeprom_write_byte ((uint8_t*) FAV_eep + i, Read_Modstr.data[i]);
					i++;
				}
				sei();
    3340:	78 94       	sei
				send_Modstr.function = MD_Set_Fav_Menu;
    3342:	ea e8       	ldi	r30, 0x8A	; 138
    3344:	f4 e0       	ldi	r31, 0x04	; 4
    3346:	88 e2       	ldi	r24, 0x28	; 40
    3348:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    334a:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    334c:	8d b7       	in	r24, 0x3d	; 61
    334e:	9e b7       	in	r25, 0x3e	; 62
    3350:	85 54       	subi	r24, 0x45	; 69
    3352:	91 09       	sbc	r25, r1
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	9e bf       	out	0x3e, r25	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	8d bf       	out	0x3d, r24	; 61
    335e:	ad b7       	in	r26, 0x3d	; 61
    3360:	be b7       	in	r27, 0x3e	; 62
    3362:	11 96       	adiw	r26, 0x01	; 1
    3364:	85 e4       	ldi	r24, 0x45	; 69
    3366:	01 90       	ld	r0, Z+
    3368:	0d 92       	st	X+, r0
    336a:	8a 95       	dec	r24
    336c:	e1 f7       	brne	.-8      	; 0x3366 <Modebus_receve_finish+0x4dc>
    336e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3372:	ed b7       	in	r30, 0x3d	; 61
    3374:	fe b7       	in	r31, 0x3e	; 62
    3376:	eb 5b       	subi	r30, 0xBB	; 187
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	fe bf       	out	0x3e, r31	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	ed bf       	out	0x3d, r30	; 61
    3384:	f8 c2       	rjmp	.+1520   	; 0x3976 <Modebus_receve_finish+0xaec>
				break;
#endif
//#ifndef GAS_PRICES 
//#ifdef TIMER_DISPLAY
			case (MD_Exit): //check 'EXIT' button
	            user_instruction = 0;
    3386:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
				Set_countdown_bank = 0;
    338a:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
	            display_init(1);
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
				send_Modstr.function = MD_Start_Countdown2;
    3396:	ea e8       	ldi	r30, 0x8A	; 138
    3398:	f4 e0       	ldi	r31, 0x04	; 4
    339a:	86 e0       	ldi	r24, 0x06	; 6
    339c:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    339e:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    33a0:	8d b7       	in	r24, 0x3d	; 61
    33a2:	9e b7       	in	r25, 0x3e	; 62
    33a4:	85 54       	subi	r24, 0x45	; 69
    33a6:	91 09       	sbc	r25, r1
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	9e bf       	out	0x3e, r25	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	8d bf       	out	0x3d, r24	; 61
    33b2:	ad b7       	in	r26, 0x3d	; 61
    33b4:	be b7       	in	r27, 0x3e	; 62
    33b6:	11 96       	adiw	r26, 0x01	; 1
    33b8:	85 e4       	ldi	r24, 0x45	; 69
    33ba:	01 90       	ld	r0, Z+
    33bc:	0d 92       	st	X+, r0
    33be:	8a 95       	dec	r24
    33c0:	e1 f7       	brne	.-8      	; 0x33ba <Modebus_receve_finish+0x530>
    33c2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
	            break;
    33c6:	ed b7       	in	r30, 0x3d	; 61
    33c8:	fe b7       	in	r31, 0x3e	; 62
    33ca:	eb 5b       	subi	r30, 0xBB	; 187
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	fe bf       	out	0x3e, r31	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	ed bf       	out	0x3d, r30	; 61
    33d8:	ce c2       	rjmp	.+1436   	; 0x3976 <Modebus_receve_finish+0xaec>
//#endif		
#ifdef SCOREBOARD
			case (MD_Read_Display):
				if (Game_on){Status_Byte =1;}
    33da:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    33de:	81 11       	cpse	r24, r1
    33e0:	81 e0       	ldi	r24, 0x01	; 1
				if (TCCR2B){Status_Byte |=2;}
    33e2:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    33e6:	91 11       	cpse	r25, r1
    33e8:	82 60       	ori	r24, 0x02	; 2
				if (user_instruction=='U'){
    33ea:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <user_instruction>
    33ee:	95 35       	cpi	r25, 0x55	; 85
    33f0:	11 f4       	brne	.+4      	; 0x33f6 <Modebus_receve_finish+0x56c>
					Status_Byte |=0b10000000;
    33f2:	80 68       	ori	r24, 0x80	; 128
    33f4:	0b c0       	rjmp	.+22     	; 0x340c <Modebus_receve_finish+0x582>
					}else if (user_instruction=='A'){
    33f6:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <user_instruction>
    33fa:	91 34       	cpi	r25, 0x41	; 65
    33fc:	11 f4       	brne	.+4      	; 0x3402 <Modebus_receve_finish+0x578>
					Status_Byte |=0b01000000;
    33fe:	80 64       	ori	r24, 0x40	; 64
    3400:	05 c0       	rjmp	.+10     	; 0x340c <Modebus_receve_finish+0x582>
					}else if (user_instruction=='B'){
    3402:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <user_instruction>
    3406:	92 34       	cpi	r25, 0x42	; 66
    3408:	09 f4       	brne	.+2      	; 0x340c <Modebus_receve_finish+0x582>
					Status_Byte |=0b00100000;
    340a:	80 62       	ori	r24, 0x20	; 32
				}
				send_Modstr.data[0]=timer[0];
    340c:	a6 e7       	ldi	r26, 0x76	; 118
    340e:	b4 e0       	ldi	r27, 0x04	; 4
    3410:	9c 91       	ld	r25, X
    3412:	ea e8       	ldi	r30, 0x8A	; 138
    3414:	f4 e0       	ldi	r31, 0x04	; 4
    3416:	93 83       	std	Z+3, r25	; 0x03
				send_Modstr.data[1]=timer[1];
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	9c 91       	ld	r25, X
    341c:	11 97       	sbiw	r26, 0x01	; 1
    341e:	94 83       	std	Z+4, r25	; 0x04
				send_Modstr.data[2]=timer[2];
    3420:	12 96       	adiw	r26, 0x02	; 2
    3422:	9c 91       	ld	r25, X
    3424:	95 83       	std	Z+5, r25	; 0x05
				send_Modstr.data[3]=Score_home;
    3426:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <Score_home>
    342a:	96 83       	std	Z+6, r25	; 0x06
				send_Modstr.data[4]=Score_guest;
    342c:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <Score_guest>
    3430:	97 83       	std	Z+7, r25	; 0x07
				send_Modstr.data[5]=Status_Byte;
    3432:	80 87       	std	Z+8, r24	; 0x08
				send_Modstr.nb = 6;
    3434:	86 e0       	ldi	r24, 0x06	; 6
    3436:	82 83       	std	Z+2, r24	; 0x02
				send_Modstr.function = MD_Read_Display;
    3438:	80 e2       	ldi	r24, 0x20	; 32
    343a:	81 83       	std	Z+1, r24	; 0x01
				Reply_modbus(send_Modstr);
    343c:	8d b7       	in	r24, 0x3d	; 61
    343e:	9e b7       	in	r25, 0x3e	; 62
    3440:	85 54       	subi	r24, 0x45	; 69
    3442:	91 09       	sbc	r25, r1
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	9e bf       	out	0x3e, r25	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	8d bf       	out	0x3d, r24	; 61
    344e:	ad b7       	in	r26, 0x3d	; 61
    3450:	be b7       	in	r27, 0x3e	; 62
    3452:	11 96       	adiw	r26, 0x01	; 1
    3454:	85 e4       	ldi	r24, 0x45	; 69
    3456:	01 90       	ld	r0, Z+
    3458:	0d 92       	st	X+, r0
    345a:	8a 95       	dec	r24
    345c:	e1 f7       	brne	.-8      	; 0x3456 <Modebus_receve_finish+0x5cc>
    345e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3462:	ed b7       	in	r30, 0x3d	; 61
    3464:	fe b7       	in	r31, 0x3e	; 62
    3466:	eb 5b       	subi	r30, 0xBB	; 187
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	fe bf       	out	0x3e, r31	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	ed bf       	out	0x3d, r30	; 61
    3474:	80 c2       	rjmp	.+1280   	; 0x3976 <Modebus_receve_finish+0xaec>
				Reply_modbus(send_Modstr);
				break;
*/

			case (MD_Score1_plus):
				if (Game_on){
    3476:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    347a:	88 23       	and	r24, r24
    347c:	09 f4       	brne	.+2      	; 0x3480 <Modebus_receve_finish+0x5f6>
    347e:	7b c2       	rjmp	.+1270   	; 0x3976 <Modebus_receve_finish+0xaec>
					Score_home++;
    3480:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    3484:	8f 5f       	subi	r24, 0xFF	; 255
    3486:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					if (Score_home>99){Score_home=0;}
    348a:	84 36       	cpi	r24, 0x64	; 100
    348c:	10 f0       	brcs	.+4      	; 0x3492 <Modebus_receve_finish+0x608>
    348e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
					update_score_display();
    3492:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3496:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score1_plus;
    349a:	ea e8       	ldi	r30, 0x8A	; 138
    349c:	f4 e0       	ldi	r31, 0x04	; 4
    349e:	81 e6       	ldi	r24, 0x61	; 97
    34a0:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    34a2:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    34a4:	8d b7       	in	r24, 0x3d	; 61
    34a6:	9e b7       	in	r25, 0x3e	; 62
    34a8:	85 54       	subi	r24, 0x45	; 69
    34aa:	91 09       	sbc	r25, r1
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	9e bf       	out	0x3e, r25	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	8d bf       	out	0x3d, r24	; 61
    34b6:	ad b7       	in	r26, 0x3d	; 61
    34b8:	be b7       	in	r27, 0x3e	; 62
    34ba:	11 96       	adiw	r26, 0x01	; 1
    34bc:	85 e4       	ldi	r24, 0x45	; 69
    34be:	01 90       	ld	r0, Z+
    34c0:	0d 92       	st	X+, r0
    34c2:	8a 95       	dec	r24
    34c4:	e1 f7       	brne	.-8      	; 0x34be <Modebus_receve_finish+0x634>
    34c6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    34ca:	ed b7       	in	r30, 0x3d	; 61
    34cc:	fe b7       	in	r31, 0x3e	; 62
    34ce:	eb 5b       	subi	r30, 0xBB	; 187
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	fe bf       	out	0x3e, r31	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	ed bf       	out	0x3d, r30	; 61
    34dc:	4c c2       	rjmp	.+1176   	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Score1_minus):
				if (Game_on){
    34de:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    34e2:	88 23       	and	r24, r24
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <Modebus_receve_finish+0x65e>
    34e6:	47 c2       	rjmp	.+1166   	; 0x3976 <Modebus_receve_finish+0xaec>
					Score_home--;
    34e8:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    34ec:	81 50       	subi	r24, 0x01	; 1
    34ee:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					if (Score_home>99){Score_home=99;}
    34f2:	84 36       	cpi	r24, 0x64	; 100
    34f4:	18 f0       	brcs	.+6      	; 0x34fc <Modebus_receve_finish+0x672>
    34f6:	83 e6       	ldi	r24, 0x63	; 99
    34f8:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					update_score_display();
    34fc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3500:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score1_minus;
    3504:	ea e8       	ldi	r30, 0x8A	; 138
    3506:	f4 e0       	ldi	r31, 0x04	; 4
    3508:	82 e6       	ldi	r24, 0x62	; 98
    350a:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    350c:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    350e:	8d b7       	in	r24, 0x3d	; 61
    3510:	9e b7       	in	r25, 0x3e	; 62
    3512:	85 54       	subi	r24, 0x45	; 69
    3514:	91 09       	sbc	r25, r1
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	9e bf       	out	0x3e, r25	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	8d bf       	out	0x3d, r24	; 61
    3520:	ad b7       	in	r26, 0x3d	; 61
    3522:	be b7       	in	r27, 0x3e	; 62
    3524:	11 96       	adiw	r26, 0x01	; 1
    3526:	85 e4       	ldi	r24, 0x45	; 69
    3528:	01 90       	ld	r0, Z+
    352a:	0d 92       	st	X+, r0
    352c:	8a 95       	dec	r24
    352e:	e1 f7       	brne	.-8      	; 0x3528 <Modebus_receve_finish+0x69e>
    3530:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3534:	ed b7       	in	r30, 0x3d	; 61
    3536:	fe b7       	in	r31, 0x3e	; 62
    3538:	eb 5b       	subi	r30, 0xBB	; 187
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	fe bf       	out	0x3e, r31	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	ed bf       	out	0x3d, r30	; 61
    3546:	17 c2       	rjmp	.+1070   	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Score2_plus):
				if (Game_on){
    3548:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    354c:	88 23       	and	r24, r24
    354e:	09 f4       	brne	.+2      	; 0x3552 <Modebus_receve_finish+0x6c8>
    3550:	12 c2       	rjmp	.+1060   	; 0x3976 <Modebus_receve_finish+0xaec>
					Score_guest++;
    3552:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					if (Score_guest>99){Score_guest=0;}
    355c:	84 36       	cpi	r24, 0x64	; 100
    355e:	10 f0       	brcs	.+4      	; 0x3564 <Modebus_receve_finish+0x6da>
    3560:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
					update_score_display();
    3564:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3568:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score2_plus;
    356c:	ea e8       	ldi	r30, 0x8A	; 138
    356e:	f4 e0       	ldi	r31, 0x04	; 4
    3570:	83 e6       	ldi	r24, 0x63	; 99
    3572:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    3574:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    3576:	8d b7       	in	r24, 0x3d	; 61
    3578:	9e b7       	in	r25, 0x3e	; 62
    357a:	85 54       	subi	r24, 0x45	; 69
    357c:	91 09       	sbc	r25, r1
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	9e bf       	out	0x3e, r25	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	8d bf       	out	0x3d, r24	; 61
    3588:	ad b7       	in	r26, 0x3d	; 61
    358a:	be b7       	in	r27, 0x3e	; 62
    358c:	11 96       	adiw	r26, 0x01	; 1
    358e:	85 e4       	ldi	r24, 0x45	; 69
    3590:	01 90       	ld	r0, Z+
    3592:	0d 92       	st	X+, r0
    3594:	8a 95       	dec	r24
    3596:	e1 f7       	brne	.-8      	; 0x3590 <Modebus_receve_finish+0x706>
    3598:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    359c:	ed b7       	in	r30, 0x3d	; 61
    359e:	fe b7       	in	r31, 0x3e	; 62
    35a0:	eb 5b       	subi	r30, 0xBB	; 187
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	fe bf       	out	0x3e, r31	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	ed bf       	out	0x3d, r30	; 61
    35ae:	e3 c1       	rjmp	.+966    	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Score2_minus):
				if (Game_on){
    35b0:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    35b4:	88 23       	and	r24, r24
    35b6:	09 f4       	brne	.+2      	; 0x35ba <Modebus_receve_finish+0x730>
    35b8:	de c1       	rjmp	.+956    	; 0x3976 <Modebus_receve_finish+0xaec>
					Score_guest--;
    35ba:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    35be:	81 50       	subi	r24, 0x01	; 1
    35c0:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					if (Score_guest>99){Score_guest=99;}
    35c4:	84 36       	cpi	r24, 0x64	; 100
    35c6:	18 f0       	brcs	.+6      	; 0x35ce <Modebus_receve_finish+0x744>
    35c8:	83 e6       	ldi	r24, 0x63	; 99
    35ca:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					update_score_display();
    35ce:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    35d2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score2_minus;
    35d6:	ea e8       	ldi	r30, 0x8A	; 138
    35d8:	f4 e0       	ldi	r31, 0x04	; 4
    35da:	84 e6       	ldi	r24, 0x64	; 100
    35dc:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    35de:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    35e0:	8d b7       	in	r24, 0x3d	; 61
    35e2:	9e b7       	in	r25, 0x3e	; 62
    35e4:	85 54       	subi	r24, 0x45	; 69
    35e6:	91 09       	sbc	r25, r1
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	9e bf       	out	0x3e, r25	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	8d bf       	out	0x3d, r24	; 61
    35f2:	ad b7       	in	r26, 0x3d	; 61
    35f4:	be b7       	in	r27, 0x3e	; 62
    35f6:	11 96       	adiw	r26, 0x01	; 1
    35f8:	85 e4       	ldi	r24, 0x45	; 69
    35fa:	01 90       	ld	r0, Z+
    35fc:	0d 92       	st	X+, r0
    35fe:	8a 95       	dec	r24
    3600:	e1 f7       	brne	.-8      	; 0x35fa <Modebus_receve_finish+0x770>
    3602:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3606:	ed b7       	in	r30, 0x3d	; 61
    3608:	fe b7       	in	r31, 0x3e	; 62
    360a:	eb 5b       	subi	r30, 0xBB	; 187
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	fe bf       	out	0x3e, r31	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	ed bf       	out	0x3d, r30	; 61
    3618:	ae c1       	rjmp	.+860    	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Set_Score):
				if (Game_on){
    361a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    361e:	88 23       	and	r24, r24
    3620:	09 f4       	brne	.+2      	; 0x3624 <Modebus_receve_finish+0x79a>
    3622:	a9 c1       	rjmp	.+850    	; 0x3976 <Modebus_receve_finish+0xaec>
					Score_home = Read_Modstr.data[0];
    3624:	e5 ed       	ldi	r30, 0xD5	; 213
    3626:	f4 e0       	ldi	r31, 0x04	; 4
    3628:	83 81       	ldd	r24, Z+3	; 0x03
    362a:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					Score_guest = Read_Modstr.data[1];
    362e:	84 81       	ldd	r24, Z+4	; 0x04
    3630:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					update_score_display();
    3634:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3638:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Set_Score;
    363c:	ea e8       	ldi	r30, 0x8A	; 138
    363e:	f4 e0       	ldi	r31, 0x04	; 4
    3640:	81 e2       	ldi	r24, 0x21	; 33
    3642:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    3644:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    3646:	8d b7       	in	r24, 0x3d	; 61
    3648:	9e b7       	in	r25, 0x3e	; 62
    364a:	85 54       	subi	r24, 0x45	; 69
    364c:	91 09       	sbc	r25, r1
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	9e bf       	out	0x3e, r25	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	8d bf       	out	0x3d, r24	; 61
    3658:	ad b7       	in	r26, 0x3d	; 61
    365a:	be b7       	in	r27, 0x3e	; 62
    365c:	11 96       	adiw	r26, 0x01	; 1
    365e:	85 e4       	ldi	r24, 0x45	; 69
    3660:	01 90       	ld	r0, Z+
    3662:	0d 92       	st	X+, r0
    3664:	8a 95       	dec	r24
    3666:	e1 f7       	brne	.-8      	; 0x3660 <Modebus_receve_finish+0x7d6>
    3668:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    366c:	ed b7       	in	r30, 0x3d	; 61
    366e:	fe b7       	in	r31, 0x3e	; 62
    3670:	eb 5b       	subi	r30, 0xBB	; 187
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	fe bf       	out	0x3e, r31	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	ed bf       	out	0x3d, r30	; 61
    367e:	7b c1       	rjmp	.+758    	; 0x3976 <Modebus_receve_finish+0xaec>
				}				
				break;
			case (MD_TF1_plus):
				if (Game_on){
    3680:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    3684:	88 23       	and	r24, r24
    3686:	09 f4       	brne	.+2      	; 0x368a <Modebus_receve_finish+0x800>
    3688:	76 c1       	rjmp	.+748    	; 0x3976 <Modebus_receve_finish+0xaec>
					display_out_buf[8]++;
    368a:	ef e7       	ldi	r30, 0x7F	; 127
    368c:	f4 e0       	ldi	r31, 0x04	; 4
    368e:	80 85       	ldd	r24, Z+8	; 0x08
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	80 87       	std	Z+8, r24	; 0x08
					if (display_out_buf[8]>9){display_out_buf[8]=0;}
    3694:	8a 30       	cpi	r24, 0x0A	; 10
    3696:	10 f0       	brcs	.+4      	; 0x369c <Modebus_receve_finish+0x812>
    3698:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <display_out_buf+0x8>
					Display_Out();
    369c:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
					send_Modstr.function = MD_TF1_plus;
    36a0:	ea e8       	ldi	r30, 0x8A	; 138
    36a2:	f4 e0       	ldi	r31, 0x04	; 4
    36a4:	85 e6       	ldi	r24, 0x65	; 101
    36a6:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    36a8:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    36aa:	8d b7       	in	r24, 0x3d	; 61
    36ac:	9e b7       	in	r25, 0x3e	; 62
    36ae:	85 54       	subi	r24, 0x45	; 69
    36b0:	91 09       	sbc	r25, r1
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	9e bf       	out	0x3e, r25	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	8d bf       	out	0x3d, r24	; 61
    36bc:	ad b7       	in	r26, 0x3d	; 61
    36be:	be b7       	in	r27, 0x3e	; 62
    36c0:	11 96       	adiw	r26, 0x01	; 1
    36c2:	85 e4       	ldi	r24, 0x45	; 69
    36c4:	01 90       	ld	r0, Z+
    36c6:	0d 92       	st	X+, r0
    36c8:	8a 95       	dec	r24
    36ca:	e1 f7       	brne	.-8      	; 0x36c4 <Modebus_receve_finish+0x83a>
    36cc:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    36d0:	ed b7       	in	r30, 0x3d	; 61
    36d2:	fe b7       	in	r31, 0x3e	; 62
    36d4:	eb 5b       	subi	r30, 0xBB	; 187
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	fe bf       	out	0x3e, r31	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	ed bf       	out	0x3d, r30	; 61
    36e2:	49 c1       	rjmp	.+658    	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_TF2_plus):
				if (Game_on){
    36e4:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    36e8:	88 23       	and	r24, r24
    36ea:	09 f4       	brne	.+2      	; 0x36ee <Modebus_receve_finish+0x864>
    36ec:	44 c1       	rjmp	.+648    	; 0x3976 <Modebus_receve_finish+0xaec>
					display_out_buf[9]++;
    36ee:	ef e7       	ldi	r30, 0x7F	; 127
    36f0:	f4 e0       	ldi	r31, 0x04	; 4
    36f2:	81 85       	ldd	r24, Z+9	; 0x09
    36f4:	8f 5f       	subi	r24, 0xFF	; 255
    36f6:	81 87       	std	Z+9, r24	; 0x09
					if (display_out_buf[9]>9){display_out_buf[9]=0;}
    36f8:	8a 30       	cpi	r24, 0x0A	; 10
    36fa:	10 f0       	brcs	.+4      	; 0x3700 <Modebus_receve_finish+0x876>
    36fc:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <display_out_buf+0x9>
					Display_Out();
    3700:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
					send_Modstr.function = MD_TF2_plus;
    3704:	ea e8       	ldi	r30, 0x8A	; 138
    3706:	f4 e0       	ldi	r31, 0x04	; 4
    3708:	86 e6       	ldi	r24, 0x66	; 102
    370a:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    370c:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    370e:	8d b7       	in	r24, 0x3d	; 61
    3710:	9e b7       	in	r25, 0x3e	; 62
    3712:	85 54       	subi	r24, 0x45	; 69
    3714:	91 09       	sbc	r25, r1
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	9e bf       	out	0x3e, r25	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	8d bf       	out	0x3d, r24	; 61
    3720:	ad b7       	in	r26, 0x3d	; 61
    3722:	be b7       	in	r27, 0x3e	; 62
    3724:	11 96       	adiw	r26, 0x01	; 1
    3726:	85 e4       	ldi	r24, 0x45	; 69
    3728:	01 90       	ld	r0, Z+
    372a:	0d 92       	st	X+, r0
    372c:	8a 95       	dec	r24
    372e:	e1 f7       	brne	.-8      	; 0x3728 <Modebus_receve_finish+0x89e>
    3730:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3734:	ed b7       	in	r30, 0x3d	; 61
    3736:	fe b7       	in	r31, 0x3e	; 62
    3738:	eb 5b       	subi	r30, 0xBB	; 187
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	fe bf       	out	0x3e, r31	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	ed bf       	out	0x3d, r30	; 61
    3746:	17 c1       	rjmp	.+558    	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;				
			case (MD_period_plus):
				if (Game_on){
    3748:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    374c:	88 23       	and	r24, r24
    374e:	09 f4       	brne	.+2      	; 0x3752 <Modebus_receve_finish+0x8c8>
    3750:	12 c1       	rjmp	.+548    	; 0x3976 <Modebus_receve_finish+0xaec>
					display_out_buf[10]++;
    3752:	ef e7       	ldi	r30, 0x7F	; 127
    3754:	f4 e0       	ldi	r31, 0x04	; 4
    3756:	82 85       	ldd	r24, Z+10	; 0x0a
    3758:	8f 5f       	subi	r24, 0xFF	; 255
    375a:	82 87       	std	Z+10, r24	; 0x0a
					if (display_out_buf[10]>9){display_out_buf[10]=0;}
    375c:	8a 30       	cpi	r24, 0x0A	; 10
    375e:	10 f0       	brcs	.+4      	; 0x3764 <Modebus_receve_finish+0x8da>
    3760:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <display_out_buf+0xa>
					Display_Out();
    3764:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
					send_Modstr.function = MD_period_plus;
    3768:	ea e8       	ldi	r30, 0x8A	; 138
    376a:	f4 e0       	ldi	r31, 0x04	; 4
    376c:	87 e6       	ldi	r24, 0x67	; 103
    376e:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    3770:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    3772:	8d b7       	in	r24, 0x3d	; 61
    3774:	9e b7       	in	r25, 0x3e	; 62
    3776:	85 54       	subi	r24, 0x45	; 69
    3778:	91 09       	sbc	r25, r1
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	9e bf       	out	0x3e, r25	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	8d bf       	out	0x3d, r24	; 61
    3784:	ad b7       	in	r26, 0x3d	; 61
    3786:	be b7       	in	r27, 0x3e	; 62
    3788:	11 96       	adiw	r26, 0x01	; 1
    378a:	85 e4       	ldi	r24, 0x45	; 69
    378c:	01 90       	ld	r0, Z+
    378e:	0d 92       	st	X+, r0
    3790:	8a 95       	dec	r24
    3792:	e1 f7       	brne	.-8      	; 0x378c <Modebus_receve_finish+0x902>
    3794:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3798:	ed b7       	in	r30, 0x3d	; 61
    379a:	fe b7       	in	r31, 0x3e	; 62
    379c:	eb 5b       	subi	r30, 0xBB	; 187
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	fe bf       	out	0x3e, r31	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	ed bf       	out	0x3d, r30	; 61
    37aa:	e5 c0       	rjmp	.+458    	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;					
			case (MD_Change_Timer):
				if (Game_on){
    37ac:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    37b0:	88 23       	and	r24, r24
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <Modebus_receve_finish+0x92c>
    37b4:	e0 c0       	rjmp	.+448    	; 0x3976 <Modebus_receve_finish+0xaec>
					timer[0]=Read_Modstr.data[0];
    37b6:	a5 ed       	ldi	r26, 0xD5	; 213
    37b8:	b4 e0       	ldi	r27, 0x04	; 4
    37ba:	13 96       	adiw	r26, 0x03	; 3
    37bc:	8c 91       	ld	r24, X
    37be:	13 97       	sbiw	r26, 0x03	; 3
    37c0:	e6 e7       	ldi	r30, 0x76	; 118
    37c2:	f4 e0       	ldi	r31, 0x04	; 4
    37c4:	80 83       	st	Z, r24
					timer[1]=Read_Modstr.data[1];
    37c6:	14 96       	adiw	r26, 0x04	; 4
    37c8:	8c 91       	ld	r24, X
    37ca:	14 97       	sbiw	r26, 0x04	; 4
    37cc:	81 83       	std	Z+1, r24	; 0x01
					timer[2]=Read_Modstr.data[2];
    37ce:	15 96       	adiw	r26, 0x05	; 5
    37d0:	8c 91       	ld	r24, X
    37d2:	82 83       	std	Z+2, r24	; 0x02
					TCNT2 = 0;
    37d4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
					timer_display();
    37d8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Change_Timer;
    37dc:	ea e8       	ldi	r30, 0x8A	; 138
    37de:	f4 e0       	ldi	r31, 0x04	; 4
    37e0:	84 e2       	ldi	r24, 0x24	; 36
    37e2:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    37e4:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    37e6:	8d b7       	in	r24, 0x3d	; 61
    37e8:	9e b7       	in	r25, 0x3e	; 62
    37ea:	85 54       	subi	r24, 0x45	; 69
    37ec:	91 09       	sbc	r25, r1
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	f8 94       	cli
    37f2:	9e bf       	out	0x3e, r25	; 62
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	8d bf       	out	0x3d, r24	; 61
    37f8:	ad b7       	in	r26, 0x3d	; 61
    37fa:	be b7       	in	r27, 0x3e	; 62
    37fc:	11 96       	adiw	r26, 0x01	; 1
    37fe:	85 e4       	ldi	r24, 0x45	; 69
    3800:	01 90       	ld	r0, Z+
    3802:	0d 92       	st	X+, r0
    3804:	8a 95       	dec	r24
    3806:	e1 f7       	brne	.-8      	; 0x3800 <Modebus_receve_finish+0x976>
    3808:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    380c:	ed b7       	in	r30, 0x3d	; 61
    380e:	fe b7       	in	r31, 0x3e	; 62
    3810:	eb 5b       	subi	r30, 0xBB	; 187
    3812:	ff 4f       	sbci	r31, 0xFF	; 255
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	fe bf       	out	0x3e, r31	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	ed bf       	out	0x3d, r30	; 61
    381e:	ab c0       	rjmp	.+342    	; 0x3976 <Modebus_receve_finish+0xaec>
				}
				break;
#endif
			case (MD_Read_F_Menu):
				i=0;
				cli();
    3820:	f8 94       	cli
					Reply_modbus(send_Modstr);
				}
				break;
#endif
			case (MD_Read_F_Menu):
				i=0;
    3822:	10 e0       	ldi	r17, 0x00	; 0
				cli();
				while(i<sizeof(F_eep)){
    3824:	0d c0       	rjmp	.+26     	; 0x3840 <Modebus_receve_finish+0x9b6>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)F_eep + i);
    3826:	c1 2f       	mov	r28, r17
    3828:	01 2e       	mov	r0, r17
    382a:	00 0c       	add	r0, r0
    382c:	dd 0b       	sbc	r29, r29
    382e:	ce 01       	movw	r24, r28
    3830:	80 50       	subi	r24, 0x00	; 0
    3832:	90 40       	sbci	r25, 0x00	; 0
    3834:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    3838:	c6 57       	subi	r28, 0x76	; 118
    383a:	db 4f       	sbci	r29, 0xFB	; 251
    383c:	8b 83       	std	Y+3, r24	; 0x03
					i++;
    383e:	1f 5f       	subi	r17, 0xFF	; 255
				break;
#endif
			case (MD_Read_F_Menu):
				i=0;
				cli();
				while(i<sizeof(F_eep)){
    3840:	18 30       	cpi	r17, 0x08	; 8
    3842:	88 f3       	brcs	.-30     	; 0x3826 <Modebus_receve_finish+0x99c>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)F_eep + i);
					i++;
				}
				sei();
    3844:	78 94       	sei
				send_Modstr.nb = sizeof(F_eep);
    3846:	ea e8       	ldi	r30, 0x8A	; 138
    3848:	f4 e0       	ldi	r31, 0x04	; 4
    384a:	88 e0       	ldi	r24, 0x08	; 8
    384c:	82 83       	std	Z+2, r24	; 0x02
				send_Modstr.function = MD_Read_F_Menu;
    384e:	85 e2       	ldi	r24, 0x25	; 37
    3850:	81 83       	std	Z+1, r24	; 0x01
				Reply_modbus(send_Modstr);
    3852:	8d b7       	in	r24, 0x3d	; 61
    3854:	9e b7       	in	r25, 0x3e	; 62
    3856:	85 54       	subi	r24, 0x45	; 69
    3858:	91 09       	sbc	r25, r1
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	9e bf       	out	0x3e, r25	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	8d bf       	out	0x3d, r24	; 61
    3864:	ad b7       	in	r26, 0x3d	; 61
    3866:	be b7       	in	r27, 0x3e	; 62
    3868:	11 96       	adiw	r26, 0x01	; 1
    386a:	85 e4       	ldi	r24, 0x45	; 69
    386c:	01 90       	ld	r0, Z+
    386e:	0d 92       	st	X+, r0
    3870:	8a 95       	dec	r24
    3872:	e1 f7       	brne	.-8      	; 0x386c <Modebus_receve_finish+0x9e2>
    3874:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3878:	ed b7       	in	r30, 0x3d	; 61
    387a:	fe b7       	in	r31, 0x3e	; 62
    387c:	eb 5b       	subi	r30, 0xBB	; 187
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	0f b6       	in	r0, 0x3f	; 63
    3882:	f8 94       	cli
    3884:	fe bf       	out	0x3e, r31	; 62
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	ed bf       	out	0x3d, r30	; 61
    388a:	75 c0       	rjmp	.+234    	; 0x3976 <Modebus_receve_finish+0xaec>
//#if defined (FAV_eep)
			case (MD_Read_Fav_Menu):
				i=0;
				cli();
    388c:	f8 94       	cli
				send_Modstr.function = MD_Read_F_Menu;
				Reply_modbus(send_Modstr);
				break;
//#if defined (FAV_eep)
			case (MD_Read_Fav_Menu):
				i=0;
    388e:	10 e0       	ldi	r17, 0x00	; 0
				cli();
				while(i<sizeof(FAV_eep)){
    3890:	0d c0       	rjmp	.+26     	; 0x38ac <Modebus_receve_finish+0xa22>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)FAV_eep + i);
    3892:	c1 2f       	mov	r28, r17
    3894:	01 2e       	mov	r0, r17
    3896:	00 0c       	add	r0, r0
    3898:	dd 0b       	sbc	r29, r29
    389a:	ce 01       	movw	r24, r28
    389c:	88 5f       	subi	r24, 0xF8	; 248
    389e:	9f 4f       	sbci	r25, 0xFF	; 255
    38a0:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    38a4:	c6 57       	subi	r28, 0x76	; 118
    38a6:	db 4f       	sbci	r29, 0xFB	; 251
    38a8:	8b 83       	std	Y+3, r24	; 0x03
					i++;
    38aa:	1f 5f       	subi	r17, 0xFF	; 255
				break;
//#if defined (FAV_eep)
			case (MD_Read_Fav_Menu):
				i=0;
				cli();
				while(i<sizeof(FAV_eep)){
    38ac:	18 30       	cpi	r17, 0x08	; 8
    38ae:	88 f3       	brcs	.-30     	; 0x3892 <Modebus_receve_finish+0xa08>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)FAV_eep + i);
					i++;
				}
				sei();
    38b0:	78 94       	sei
				send_Modstr.nb = sizeof(FAV_eep);
    38b2:	ea e8       	ldi	r30, 0x8A	; 138
    38b4:	f4 e0       	ldi	r31, 0x04	; 4
    38b6:	88 e0       	ldi	r24, 0x08	; 8
    38b8:	82 83       	std	Z+2, r24	; 0x02
				send_Modstr.function = MD_Read_Fav_Menu;
    38ba:	86 e2       	ldi	r24, 0x26	; 38
    38bc:	81 83       	std	Z+1, r24	; 0x01
				Reply_modbus(send_Modstr);
    38be:	8d b7       	in	r24, 0x3d	; 61
    38c0:	9e b7       	in	r25, 0x3e	; 62
    38c2:	85 54       	subi	r24, 0x45	; 69
    38c4:	91 09       	sbc	r25, r1
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	f8 94       	cli
    38ca:	9e bf       	out	0x3e, r25	; 62
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	8d bf       	out	0x3d, r24	; 61
    38d0:	ad b7       	in	r26, 0x3d	; 61
    38d2:	be b7       	in	r27, 0x3e	; 62
    38d4:	11 96       	adiw	r26, 0x01	; 1
    38d6:	85 e4       	ldi	r24, 0x45	; 69
    38d8:	01 90       	ld	r0, Z+
    38da:	0d 92       	st	X+, r0
    38dc:	8a 95       	dec	r24
    38de:	e1 f7       	brne	.-8      	; 0x38d8 <Modebus_receve_finish+0xa4e>
    38e0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    38e4:	ed b7       	in	r30, 0x3d	; 61
    38e6:	fe b7       	in	r31, 0x3e	; 62
    38e8:	eb 5b       	subi	r30, 0xBB	; 187
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	fe bf       	out	0x3e, r31	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	ed bf       	out	0x3d, r30	; 61
    38f6:	3f c0       	rjmp	.+126    	; 0x3976 <Modebus_receve_finish+0xaec>
//#endif
			case (MD_Set_F_Menu):
				i=0;
				cli();
    38f8:	f8 94       	cli
				send_Modstr.function = MD_Read_Fav_Menu;
				Reply_modbus(send_Modstr);
				break;
//#endif
			case (MD_Set_F_Menu):
				i=0;
    38fa:	c0 e0       	ldi	r28, 0x00	; 0
				cli();
				while(i<sizeof(F_eep)){
    38fc:	0d c0       	rjmp	.+26     	; 0x3918 <Modebus_receve_finish+0xa8e>
					eeprom_write_byte ((uint8_t*) F_eep + i, Read_Modstr.data[i]);
    38fe:	8c 2f       	mov	r24, r28
    3900:	0c 2e       	mov	r0, r28
    3902:	00 0c       	add	r0, r0
    3904:	99 0b       	sbc	r25, r25
    3906:	fc 01       	movw	r30, r24
    3908:	eb 52       	subi	r30, 0x2B	; 43
    390a:	fb 4f       	sbci	r31, 0xFB	; 251
    390c:	63 81       	ldd	r22, Z+3	; 0x03
    390e:	80 50       	subi	r24, 0x00	; 0
    3910:	90 40       	sbci	r25, 0x00	; 0
    3912:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <eeprom_write_byte>
					i++;
    3916:	cf 5f       	subi	r28, 0xFF	; 255
				break;
//#endif
			case (MD_Set_F_Menu):
				i=0;
				cli();
				while(i<sizeof(F_eep)){
    3918:	c8 30       	cpi	r28, 0x08	; 8
    391a:	88 f3       	brcs	.-30     	; 0x38fe <Modebus_receve_finish+0xa74>
					eeprom_write_byte ((uint8_t*) F_eep + i, Read_Modstr.data[i]);
					i++;
				}
				sei();
    391c:	78 94       	sei
				send_Modstr.function = MD_Set_F_Menu;
    391e:	ea e8       	ldi	r30, 0x8A	; 138
    3920:	f4 e0       	ldi	r31, 0x04	; 4
    3922:	87 e2       	ldi	r24, 0x27	; 39
    3924:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    3926:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3928:	8d b7       	in	r24, 0x3d	; 61
    392a:	9e b7       	in	r25, 0x3e	; 62
    392c:	85 54       	subi	r24, 0x45	; 69
    392e:	91 09       	sbc	r25, r1
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	9e bf       	out	0x3e, r25	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	8d bf       	out	0x3d, r24	; 61
    393a:	ad b7       	in	r26, 0x3d	; 61
    393c:	be b7       	in	r27, 0x3e	; 62
    393e:	11 96       	adiw	r26, 0x01	; 1
    3940:	85 e4       	ldi	r24, 0x45	; 69
    3942:	01 90       	ld	r0, Z+
    3944:	0d 92       	st	X+, r0
    3946:	8a 95       	dec	r24
    3948:	e1 f7       	brne	.-8      	; 0x3942 <Modebus_receve_finish+0xab8>
    394a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    394e:	ed b7       	in	r30, 0x3d	; 61
    3950:	fe b7       	in	r31, 0x3e	; 62
    3952:	eb 5b       	subi	r30, 0xBB	; 187
    3954:	ff 4f       	sbci	r31, 0xFF	; 255
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	fe bf       	out	0x3e, r31	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	ed bf       	out	0x3d, r30	; 61
    3960:	0a c0       	rjmp	.+20     	; 0x3976 <Modebus_receve_finish+0xaec>
				Reply_modbus(send_Modstr);
				Gas_Prices_Refresh();
				break;
#endif
			case (MD_Buzzer_sound):
				Buzzer(1,8600);
    3962:	68 e9       	ldi	r22, 0x98	; 152
    3964:	71 e2       	ldi	r23, 0x21	; 33
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				Speaker_delay_open=Read_Modstr.data[0];
    396e:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <Read_Modstr+0x3>
    3972:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Speaker_delay_open>
				break;
		}
	}else{
		//answer for wrong CRC
	}
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	08 95       	ret

0000397e <Check_receive_modbus>:
	Read_Modstr.data[0]=0;
	TCCR4B = 0;
}

extern void Check_receive_modbus()
{
    397e:	1f 93       	push	r17
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
	uint16_t c = uart0_getc();
    3984:	0e 94 1c 08 	call	0x1038	; 0x1038 <uart0_getc>
    3988:	ec 01       	movw	r28, r24
	uint8_t c_byte = c &0xff;
	uint8_t error_c = (c >> 8);
	if (!error_c)
    398a:	d1 11       	cpse	r29, r1
    398c:	5f c0       	rjmp	.+190    	; 0x3a4c <Check_receive_modbus+0xce>
	{		
		switch (Modbus_intex)
    398e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <Modbus_intex>
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	e1 f0       	breq	.+56     	; 0x39ce <Check_receive_modbus+0x50>
    3996:	30 f0       	brcs	.+12     	; 0x39a4 <Check_receive_modbus+0x26>
    3998:	82 30       	cpi	r24, 0x02	; 2
    399a:	41 f1       	breq	.+80     	; 0x39ec <Check_receive_modbus+0x6e>
    399c:	83 30       	cpi	r24, 0x03	; 3
    399e:	09 f4       	brne	.+2      	; 0x39a2 <Check_receive_modbus+0x24>
    39a0:	45 c0       	rjmp	.+138    	; 0x3a2c <Check_receive_modbus+0xae>
    39a2:	75 c0       	rjmp	.+234    	; 0x3a8e <Check_receive_modbus+0x110>
		{
			case (0): // first incoming byte = address
			//uart1_putc((uint8_t)(c & 0x00ff));
				cli();
    39a4:	f8 94       	cli
				if (c_byte==Broadcast_address || c_byte == eeprom_read_byte((uint8_t*)Slave_address))
    39a6:	cc 23       	and	r28, r28
    39a8:	31 f0       	breq	.+12     	; 0x39b6 <Check_receive_modbus+0x38>
    39aa:	8c e1       	ldi	r24, 0x1C	; 28
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    39b2:	c8 13       	cpse	r28, r24
    39b4:	0a c0       	rjmp	.+20     	; 0x39ca <Check_receive_modbus+0x4c>
				{
					Modbus_intex =1;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
					Read_Modstr.address = c_byte;
    39bc:	c0 93 d5 04 	sts	0x04D5, r28	; 0x8004d5 <Read_Modstr>
					Put_CRC(c_byte);					
    39c0:	8c 2f       	mov	r24, r28
    39c2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
					Modbus_data_store = 0;
    39c6:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Modbus_data_store>
					//break;
				}
				sei();
    39ca:	78 94       	sei
				break;
    39cc:	60 c0       	rjmp	.+192    	; 0x3a8e <Check_receive_modbus+0x110>
			case (1): // second incoming byte = function		
				Put_CRC(c_byte);
    39ce:	8c 2f       	mov	r24, r28
    39d0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
				Read_Modstr.function = c_byte;
    39d4:	e5 ed       	ldi	r30, 0xD5	; 213
    39d6:	f4 e0       	ldi	r31, 0x04	; 4
    39d8:	c1 83       	std	Z+1, r28	; 0x01
				Modbus_data_count = Check_MDdata_Length(Read_Modstr.function);
    39da:	81 81       	ldd	r24, Z+1	; 0x01
    39dc:	0e 94 87 03 	call	0x70e	; 0x70e <Check_MDdata_Length>
    39e0:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Modbus_data_count>
				Modbus_intex =2;
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
				break;
    39ea:	51 c0       	rjmp	.+162    	; 0x3a8e <Check_receive_modbus+0x110>
			case (2): // First CRC incoming byte = function		
				if (Modbus_data_count)
    39ec:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <Modbus_data_count>
    39f0:	88 23       	and	r24, r24
    39f2:	99 f0       	breq	.+38     	; 0x3a1a <Check_receive_modbus+0x9c>
				{
					Read_Modstr.data[Modbus_data_store++]=c_byte;
    39f4:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <Modbus_data_store>
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	8e 0f       	add	r24, r30
    39fc:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <Modbus_data_store>
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	eb 52       	subi	r30, 0x2B	; 43
    3a04:	fb 4f       	sbci	r31, 0xFB	; 251
    3a06:	c3 83       	std	Z+3, r28	; 0x03
					Put_CRC(c_byte);
    3a08:	8c 2f       	mov	r24, r28
    3a0a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
					Modbus_data_count--;
    3a0e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <Modbus_data_count>
    3a12:	81 50       	subi	r24, 0x01	; 1
    3a14:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Modbus_data_count>
    3a18:	3a c0       	rjmp	.+116    	; 0x3a8e <Check_receive_modbus+0x110>
    3a1a:	dd 27       	eor	r29, r29
					//Modbus_intex=2;
					//break;
				}else{
					Read_Modstr.CRC = c_byte;
    3a1c:	d0 93 19 05 	sts	0x0519, r29	; 0x800519 <Read_Modstr+0x44>
    3a20:	c0 93 18 05 	sts	0x0518, r28	; 0x800518 <Read_Modstr+0x43>
					Modbus_intex=3;
    3a24:	83 e0       	ldi	r24, 0x03	; 3
    3a26:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
    3a2a:	31 c0       	rjmp	.+98     	; 0x3a8e <Check_receive_modbus+0x110>
					
				}
				break;
			case (3): // second CRC incoming byte = function
				Read_Modstr.CRC += c_byte<<8;
    3a2c:	e8 e1       	ldi	r30, 0x18	; 24
    3a2e:	f5 e0       	ldi	r31, 0x05	; 5
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	dc 2f       	mov	r29, r28
    3a36:	cc 27       	eor	r28, r28
    3a38:	c8 0f       	add	r28, r24
    3a3a:	d9 1f       	adc	r29, r25
    3a3c:	d1 83       	std	Z+1, r29	; 0x01
    3a3e:	c0 83       	st	Z, r28
				Modbus_intex=0xff;
    3a40:	8f ef       	ldi	r24, 0xFF	; 255
    3a42:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
				Modebus_receve_finish();
    3a46:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <Modebus_receve_finish>
				break;
    3a4a:	21 c0       	rjmp	.+66     	; 0x3a8e <Check_receive_modbus+0x110>
		}
	}else{
		send_Modstr.function = MD_Communication_Error;
    3a4c:	ea e8       	ldi	r30, 0x8A	; 138
    3a4e:	f4 e0       	ldi	r31, 0x04	; 4
    3a50:	80 ef       	ldi	r24, 0xF0	; 240
    3a52:	81 83       	std	Z+1, r24	; 0x01
		send_Modstr.data[0]=0;
    3a54:	13 82       	std	Z+3, r1	; 0x03
		Reply_modbus(send_Modstr);
    3a56:	8d b7       	in	r24, 0x3d	; 61
    3a58:	9e b7       	in	r25, 0x3e	; 62
    3a5a:	85 54       	subi	r24, 0x45	; 69
    3a5c:	91 09       	sbc	r25, r1
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	9e bf       	out	0x3e, r25	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	8d bf       	out	0x3d, r24	; 61
    3a68:	ad b7       	in	r26, 0x3d	; 61
    3a6a:	be b7       	in	r27, 0x3e	; 62
    3a6c:	11 96       	adiw	r26, 0x01	; 1
    3a6e:	85 e4       	ldi	r24, 0x45	; 69
    3a70:	01 90       	ld	r0, Z+
    3a72:	0d 92       	st	X+, r0
    3a74:	8a 95       	dec	r24
    3a76:	e1 f7       	brne	.-8      	; 0x3a70 <Check_receive_modbus+0xf2>
    3a78:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3a7c:	8d b7       	in	r24, 0x3d	; 61
    3a7e:	9e b7       	in	r25, 0x3e	; 62
    3a80:	8b 5b       	subi	r24, 0xBB	; 187
    3a82:	9f 4f       	sbci	r25, 0xFF	; 255
    3a84:	0f b6       	in	r0, 0x3f	; 63
    3a86:	f8 94       	cli
    3a88:	9e bf       	out	0x3e, r25	; 62
    3a8a:	0f be       	out	0x3f, r0	; 63
    3a8c:	8d bf       	out	0x3d, r24	; 61
	}
	Reset_Modbus_Timeout();
    3a8e:	0e 94 4c 03 	call	0x698	; 0x698 <Reset_Modbus_Timeout>
}
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	08 95       	ret

00003a9a <__vector_20>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    3a9a:	1f 92       	push	r1
    3a9c:	0f 92       	push	r0
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	0f 92       	push	r0
    3aa2:	11 24       	eor	r1, r1
    3aa4:	2f 93       	push	r18
    3aa6:	3f 93       	push	r19
    3aa8:	4f 93       	push	r20
    3aaa:	5f 93       	push	r21
    3aac:	6f 93       	push	r22
    3aae:	7f 93       	push	r23
    3ab0:	8f 93       	push	r24
    3ab2:	9f 93       	push	r25
    3ab4:	af 93       	push	r26
    3ab6:	bf 93       	push	r27
    3ab8:	cf 93       	push	r28
    3aba:	ef 93       	push	r30
    3abc:	ff 93       	push	r31
    /* read UART status register and UART data register */
#if defined(AVR1_USART0)
    usr  = USART0_RXDATAH;
    data = USART0.RXDATAL;
#else
    usr  = UART0_STATUS;
    3abe:	c0 91 c0 00 	lds	r28, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
    3ac2:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART0)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    3ac6:	c8 71       	andi	r28, 0x18	; 24
#elif defined (AVR1_USART0)
    lastRxError = (usr & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm));
#endif

    /* calculate buffer index */
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    3ac8:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <UART_RxHead>
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	01 96       	adiw	r24, 0x01	; 1
    3ad0:	8f 77       	andi	r24, 0x7F	; 127
    3ad2:	99 27       	eor	r25, r25

    if (tmphead == UART_RxTail) {
    3ad4:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <UART_RxTail>
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	82 17       	cp	r24, r18
    3adc:	93 07       	cpc	r25, r19
    3ade:	49 f0       	breq	.+18     	; 0x3af2 <__vector_20+0x58>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    3ae0:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	e8 56       	subi	r30, 0x68	; 104
    3ae8:	fd 4f       	sbci	r31, 0xFD	; 253
    3aea:	40 83       	st	Z, r20
#if defined(MODBUS)
		Check_receive_modbus();
    3aec:	0e 94 bf 1c 	call	0x397e	; 0x397e <Check_receive_modbus>
    3af0:	01 c0       	rjmp	.+2      	; 0x3af4 <__vector_20+0x5a>
    /* calculate buffer index */
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;

    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3af2:	c2 e0       	ldi	r28, 0x02	; 2
#if defined(MODBUS)
		Check_receive_modbus();
#endif		
		
    }
    UART_LastRxError = lastRxError;
    3af4:	c0 93 93 02 	sts	0x0293, r28	; 0x800293 <UART_LastRxError>
}
    3af8:	ff 91       	pop	r31
    3afa:	ef 91       	pop	r30
    3afc:	cf 91       	pop	r28
    3afe:	bf 91       	pop	r27
    3b00:	af 91       	pop	r26
    3b02:	9f 91       	pop	r25
    3b04:	8f 91       	pop	r24
    3b06:	7f 91       	pop	r23
    3b08:	6f 91       	pop	r22
    3b0a:	5f 91       	pop	r21
    3b0c:	4f 91       	pop	r20
    3b0e:	3f 91       	pop	r19
    3b10:	2f 91       	pop	r18
    3b12:	0f 90       	pop	r0
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	0f 90       	pop	r0
    3b18:	1f 90       	pop	r1
    3b1a:	18 95       	reti

00003b1c <Change_Timer>:
	shift=0;
	Clock_blink=0;
	Menu_blink_on=0;
}

void Change_Timer(){
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
		uint8_t Timer_val=TCCR2B;
    3b20:	e1 eb       	ldi	r30, 0xB1	; 177
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	c0 81       	ld	r28, Z
		TCCR2B =0;
    3b26:	10 82       	st	Z, r1
		Change_timer_on=1;
    3b28:	d1 e0       	ldi	r29, 0x01	; 1
    3b2a:	d0 93 1c 04 	sts	0x041C, r29	; 0x80041c <Change_timer_on>
		set_clock_buf[0]= ( timer[0]&0xf0)>>4;
    3b2e:	a6 e7       	ldi	r26, 0x76	; 118
    3b30:	b4 e0       	ldi	r27, 0x04	; 4
    3b32:	8c 91       	ld	r24, X
    3b34:	98 2f       	mov	r25, r24
    3b36:	92 95       	swap	r25
    3b38:	9f 70       	andi	r25, 0x0F	; 15
    3b3a:	e9 e7       	ldi	r30, 0x79	; 121
    3b3c:	f4 e0       	ldi	r31, 0x04	; 4
    3b3e:	90 83       	st	Z, r25
		set_clock_buf[1]= ( timer[0]&0x0f);  //adding dot
    3b40:	8f 70       	andi	r24, 0x0F	; 15
    3b42:	81 83       	std	Z+1, r24	; 0x01
		set_clock_buf[2]= (( timer[1]&0xf0)>>4);  //adding dot;
    3b44:	11 96       	adiw	r26, 0x01	; 1
    3b46:	8c 91       	ld	r24, X
    3b48:	11 97       	sbiw	r26, 0x01	; 1
    3b4a:	98 2f       	mov	r25, r24
    3b4c:	92 95       	swap	r25
    3b4e:	9f 70       	andi	r25, 0x0F	; 15
    3b50:	92 83       	std	Z+2, r25	; 0x02
		set_clock_buf[3]= ( timer[1]&0x0f);
    3b52:	8f 70       	andi	r24, 0x0F	; 15
    3b54:	83 83       	std	Z+3, r24	; 0x03
		set_clock_buf[4]= (( timer[2]&0xf0)>>4);
    3b56:	12 96       	adiw	r26, 0x02	; 2
    3b58:	8c 91       	ld	r24, X
    3b5a:	98 2f       	mov	r25, r24
    3b5c:	92 95       	swap	r25
    3b5e:	9f 70       	andi	r25, 0x0F	; 15
    3b60:	94 83       	std	Z+4, r25	; 0x04
		set_clock_buf[5]= ( timer[2]&0x0f);
    3b62:	8f 70       	andi	r24, 0x0F	; 15
    3b64:	85 83       	std	Z+5, r24	; 0x05
		Display_set_clock();
    3b66:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
		cursor=0;Menu_blink_on=1;
    3b6a:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    3b6e:	d0 93 1f 04 	sts	0x041F, r29	; 0x80041f <Menu_blink_on>
		while(key!=ok && key!=exit_button)
    3b72:	99 c0       	rjmp	.+306    	; 0x3ca6 <Change_Timer+0x18a>
		{
			if(key>=0 && key<10)
    3b74:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3b78:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3b7c:	99 23       	and	r25, r25
    3b7e:	d4 f1       	brlt	.+116    	; 0x3bf4 <Change_Timer+0xd8>
    3b80:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3b84:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3b88:	0a 97       	sbiw	r24, 0x0a	; 10
    3b8a:	a4 f5       	brge	.+104    	; 0x3bf4 <Change_Timer+0xd8>
			{
				set_clock_buf[cursor]= key;
    3b8c:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    3b90:	0e 2e       	mov	r0, r30
    3b92:	00 0c       	add	r0, r0
    3b94:	ff 0b       	sbc	r31, r31
    3b96:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3b9a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3b9e:	e7 58       	subi	r30, 0x87	; 135
    3ba0:	fb 4f       	sbci	r31, 0xFB	; 251
    3ba2:	80 83       	st	Z, r24
				if (cursor==1 || cursor==2 || cursor==3 )
    3ba4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3ba8:	81 30       	cpi	r24, 0x01	; 1
    3baa:	41 f0       	breq	.+16     	; 0x3bbc <Change_Timer+0xa0>
    3bac:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3bb0:	82 30       	cpi	r24, 0x02	; 2
    3bb2:	21 f0       	breq	.+8      	; 0x3bbc <Change_Timer+0xa0>
    3bb4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3bb8:	83 30       	cpi	r24, 0x03	; 3
    3bba:	51 f4       	brne	.+20     	; 0x3bd0 <Change_Timer+0xb4>
				{
					set_clock_buf[cursor]|=0x80;
    3bbc:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    3bc0:	0e 2e       	mov	r0, r30
    3bc2:	00 0c       	add	r0, r0
    3bc4:	ff 0b       	sbc	r31, r31
    3bc6:	e7 58       	subi	r30, 0x87	; 135
    3bc8:	fb 4f       	sbci	r31, 0xFB	; 251
    3bca:	80 81       	ld	r24, Z
    3bcc:	80 68       	ori	r24, 0x80	; 128
    3bce:	80 83       	st	Z, r24
				}
				key=-1;
    3bd0:	8f ef       	ldi	r24, 0xFF	; 255
    3bd2:	9f ef       	ldi	r25, 0xFF	; 255
    3bd4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3bd8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    3bdc:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3be0:	85 30       	cpi	r24, 0x05	; 5
    3be2:	28 f4       	brcc	.+10     	; 0x3bee <Change_Timer+0xd2>
    3be4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3be8:	8f 5f       	subi	r24, 0xFF	; 255
    3bea:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    3bee:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    3bf2:	59 c0       	rjmp	.+178    	; 0x3ca6 <Change_Timer+0x18a>
			}
			else if (key==left)		//check for left <-
    3bf4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3bf8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3bfc:	45 97       	sbiw	r24, 0x15	; 21
    3bfe:	99 f4       	brne	.+38     	; 0x3c26 <Change_Timer+0x10a>
			{
				if(cursor!=0)
    3c00:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c04:	88 23       	and	r24, r24
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <Change_Timer+0xee>
    3c08:	4e c0       	rjmp	.+156    	; 0x3ca6 <Change_Timer+0x18a>
				{
					cursor--;
    3c0a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c0e:	81 50       	subi	r24, 0x01	; 1
    3c10:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
					Display_set_clock();
    3c14:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
					key=-1;
    3c18:	8f ef       	ldi	r24, 0xFF	; 255
    3c1a:	9f ef       	ldi	r25, 0xFF	; 255
    3c1c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3c20:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3c24:	40 c0       	rjmp	.+128    	; 0x3ca6 <Change_Timer+0x18a>
				}
			}
			else if (key==right)		//check for right ->
    3c26:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3c2a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3c2e:	46 97       	sbiw	r24, 0x16	; 22
    3c30:	91 f4       	brne	.+36     	; 0x3c56 <Change_Timer+0x13a>
			{
				if(cursor<sizeof(set_clock_buf)-1)
    3c32:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c36:	85 30       	cpi	r24, 0x05	; 5
    3c38:	b0 f5       	brcc	.+108    	; 0x3ca6 <Change_Timer+0x18a>
				{
					cursor++;
    3c3a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c3e:	8f 5f       	subi	r24, 0xFF	; 255
    3c40:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
					Display_set_clock();
    3c44:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
					key=-1;
    3c48:	8f ef       	ldi	r24, 0xFF	; 255
    3c4a:	9f ef       	ldi	r25, 0xFF	; 255
    3c4c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3c50:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3c54:	28 c0       	rjmp	.+80     	; 0x3ca6 <Change_Timer+0x18a>
				}
				
			}
			else if (key==ok)
    3c56:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3c5a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3c5e:	47 97       	sbiw	r24, 0x17	; 23
    3c60:	11 f5       	brne	.+68     	; 0x3ca6 <Change_Timer+0x18a>
			{
				int8_t byte_get;
				byte_get=(set_clock_buf[0] & 0x0f)<<4;
    3c62:	e9 e7       	ldi	r30, 0x79	; 121
    3c64:	f4 e0       	ldi	r31, 0x04	; 4
    3c66:	80 81       	ld	r24, Z
    3c68:	20 e1       	ldi	r18, 0x10	; 16
    3c6a:	82 9f       	mul	r24, r18
    3c6c:	c0 01       	movw	r24, r0
    3c6e:	11 24       	eor	r1, r1
				byte_get=byte_get | (set_clock_buf[1] & 0x0f);
    3c70:	91 81       	ldd	r25, Z+1	; 0x01
    3c72:	9f 70       	andi	r25, 0x0F	; 15
    3c74:	89 2b       	or	r24, r25
				timer[0] = byte_get;
    3c76:	a6 e7       	ldi	r26, 0x76	; 118
    3c78:	b4 e0       	ldi	r27, 0x04	; 4
    3c7a:	8c 93       	st	X, r24
				byte_get=(set_clock_buf[2] & 0x0f)<<4;
    3c7c:	82 81       	ldd	r24, Z+2	; 0x02
    3c7e:	20 e1       	ldi	r18, 0x10	; 16
    3c80:	82 9f       	mul	r24, r18
    3c82:	c0 01       	movw	r24, r0
    3c84:	11 24       	eor	r1, r1
				byte_get=byte_get | (set_clock_buf[3] & 0x0f);
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	9f 70       	andi	r25, 0x0F	; 15
    3c8a:	89 2b       	or	r24, r25
				timer[1] = byte_get;
    3c8c:	11 96       	adiw	r26, 0x01	; 1
    3c8e:	8c 93       	st	X, r24
    3c90:	11 97       	sbiw	r26, 0x01	; 1
				byte_get=(set_clock_buf[4] & 0x0f)<<4;
    3c92:	84 81       	ldd	r24, Z+4	; 0x04
    3c94:	20 e1       	ldi	r18, 0x10	; 16
    3c96:	82 9f       	mul	r24, r18
    3c98:	c0 01       	movw	r24, r0
    3c9a:	11 24       	eor	r1, r1
				byte_get=byte_get | (set_clock_buf[5] & 0x0f);
    3c9c:	95 81       	ldd	r25, Z+5	; 0x05
    3c9e:	9f 70       	andi	r25, 0x0F	; 15
    3ca0:	89 2b       	or	r24, r25
				timer[2] = byte_get;
    3ca2:	12 96       	adiw	r26, 0x02	; 2
    3ca4:	8c 93       	st	X, r24
		set_clock_buf[3]= ( timer[1]&0x0f);
		set_clock_buf[4]= (( timer[2]&0xf0)>>4);
		set_clock_buf[5]= ( timer[2]&0x0f);
		Display_set_clock();
		cursor=0;Menu_blink_on=1;
		while(key!=ok && key!=exit_button)
    3ca6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3caa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3cae:	47 97       	sbiw	r24, 0x17	; 23
    3cb0:	39 f0       	breq	.+14     	; 0x3cc0 <Change_Timer+0x1a4>
    3cb2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3cb6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3cba:	8f 97       	sbiw	r24, 0x2f	; 47
    3cbc:	09 f0       	breq	.+2      	; 0x3cc0 <Change_Timer+0x1a4>
    3cbe:	5a cf       	rjmp	.-332    	; 0x3b74 <Change_Timer+0x58>
				byte_get=(set_clock_buf[4] & 0x0f)<<4;
				byte_get=byte_get | (set_clock_buf[5] & 0x0f);
				timer[2] = byte_get;
			}
		}
		cursor=0;
    3cc0:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
		shift=0;
    3cc4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
		Clock_blink=0;
    3cc8:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
		Menu_blink_on=0;
    3ccc:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <Menu_blink_on>
		TCCR2B=Timer_val;
    3cd0:	c0 93 b1 00 	sts	0x00B1, r28	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		update_score_display();
    3cd4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
		timer_display();		
    3cd8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
		if (key==ok)	{
    3cdc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3ce0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3ce4:	47 97       	sbiw	r24, 0x17	; 23
    3ce6:	99 f4       	brne	.+38     	; 0x3d0e <Change_Timer+0x1f2>
			Buzzer(1,8600);
    3ce8:	68 e9       	ldi	r22, 0x98	; 152
    3cea:	71 e2       	ldi	r23, 0x21	; 33
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    3cf2:	8f ef       	ldi	r24, 0xFF	; 255
    3cf4:	92 e5       	ldi	r25, 0x52	; 82
    3cf6:	27 e0       	ldi	r18, 0x07	; 7
    3cf8:	81 50       	subi	r24, 0x01	; 1
    3cfa:	90 40       	sbci	r25, 0x00	; 0
    3cfc:	20 40       	sbci	r18, 0x00	; 0
    3cfe:	e1 f7       	brne	.-8      	; 0x3cf8 <Change_Timer+0x1dc>
    3d00:	00 c0       	rjmp	.+0      	; 0x3d02 <Change_Timer+0x1e6>
    3d02:	00 00       	nop
			_delay_ms(300);
			Buzzer(0,0);
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	70 e0       	ldi	r23, 0x00	; 0
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}		
		key=-1;
    3d0e:	8f ef       	ldi	r24, 0xFF	; 255
    3d10:	9f ef       	ldi	r25, 0xFF	; 255
    3d12:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3d16:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
		Change_timer_on=0;
    3d1a:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <Change_timer_on>
}
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	08 95       	ret

00003d24 <remote_instruction>:
		display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
	}
	
}

void remote_instruction(void) {
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <remote_instruction+0x8>
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    uint16_t command;
    /* Poll for new RC5 command */
    if (RC5_NewCommandReceived( & command)) {
    3d30:	ce 01       	movw	r24, r28
    3d32:	01 96       	adiw	r24, 0x01	; 1
    3d34:	0e 94 3e 03 	call	0x67c	; 0x67c <RC5_NewCommandReceived>
    3d38:	88 23       	and	r24, r24
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <remote_instruction+0x1a>
    3d3c:	d7 c1       	rjmp	.+942    	; 0x40ec <remote_instruction+0x3c8>
        /* Reset RC5 lib so the next command
         * can be decoded. This is a must! */
        RC5_Reset();
    3d3e:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
        /* Toggle the LED on PB5 */
        PORTE ^= RED_LED;
    3d42:	9e b1       	in	r25, 0x0e	; 14
    3d44:	84 e0       	ldi	r24, 0x04	; 4
    3d46:	89 27       	eor	r24, r25
    3d48:	8e b9       	out	0x0e, r24	; 14
        /* Do something with the command 
        Perhaps validate the start bits and output
        it via UART... */
        if (RC5_GetStartBits(command) != 3) {
    3d4a:	29 81       	ldd	r18, Y+1	; 0x01
    3d4c:	3a 81       	ldd	r19, Y+2	; 0x02
            /* ERROR */
        }
        uint8_t cmdaddress = RC5_GetAddressBits(command);
    3d4e:	c9 01       	movw	r24, r18
    3d50:	80 7c       	andi	r24, 0xC0	; 192
    3d52:	97 70       	andi	r25, 0x07	; 7
    3d54:	00 24       	eor	r0, r0
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	00 1c       	adc	r0, r0
    3d5c:	88 0f       	add	r24, r24
    3d5e:	99 1f       	adc	r25, r25
    3d60:	00 1c       	adc	r0, r0
    3d62:	89 2f       	mov	r24, r25
    3d64:	90 2d       	mov	r25, r0
        uint8_t cmdnum = RC5_GetCommandBits(command);
    3d66:	12 2f       	mov	r17, r18
    3d68:	1f 73       	andi	r17, 0x3F	; 63
        uint8_t toggle = RC5_GetToggleBit(command);
    3d6a:	22 27       	eor	r18, r18
    3d6c:	38 70       	andi	r19, 0x08	; 8
    3d6e:	93 2f       	mov	r25, r19
    3d70:	96 95       	lsr	r25
    3d72:	96 95       	lsr	r25
    3d74:	96 95       	lsr	r25
		//display_out_buf[5]= cmdaddress;
        if (previews_togle != toggle && cmdaddress == 0 || previews_togle != toggle && cmdaddress == 3) {
    3d76:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <previews_togle>
    3d7a:	04 2e       	mov	r0, r20
    3d7c:	00 0c       	add	r0, r0
    3d7e:	55 0b       	sbc	r21, r21
    3d80:	29 2f       	mov	r18, r25
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	42 17       	cp	r20, r18
    3d86:	53 07       	cpc	r21, r19
    3d88:	11 f0       	breq	.+4      	; 0x3d8e <remote_instruction+0x6a>
    3d8a:	88 23       	and	r24, r24
    3d8c:	61 f0       	breq	.+24     	; 0x3da6 <remote_instruction+0x82>
    3d8e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <previews_togle>
    3d92:	04 2e       	mov	r0, r20
    3d94:	00 0c       	add	r0, r0
    3d96:	55 0b       	sbc	r21, r21
    3d98:	24 17       	cp	r18, r20
    3d9a:	35 07       	cpc	r19, r21
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <remote_instruction+0x7c>
    3d9e:	2e c1       	rjmp	.+604    	; 0x3ffc <remote_instruction+0x2d8>
    3da0:	83 30       	cpi	r24, 0x03	; 3
    3da2:	09 f0       	breq	.+2      	; 0x3da6 <remote_instruction+0x82>
    3da4:	2b c1       	rjmp	.+598    	; 0x3ffc <remote_instruction+0x2d8>
            previews_togle = toggle;
    3da6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <previews_togle>
            key = cmdnum;
    3daa:	81 2f       	mov	r24, r17
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3db2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
            switch (cmdnum) {
    3db6:	81 2f       	mov	r24, r17
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	fc 01       	movw	r30, r24
    3dbc:	3a 97       	sbiw	r30, 0x0a	; 10
    3dbe:	e5 33       	cpi	r30, 0x35	; 53
    3dc0:	f1 05       	cpc	r31, r1
    3dc2:	08 f0       	brcs	.+2      	; 0x3dc6 <remote_instruction+0xa2>
    3dc4:	89 c1       	rjmp	.+786    	; 0x40d8 <remote_instruction+0x3b4>
    3dc6:	e3 5f       	subi	r30, 0xF3	; 243
    3dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dca:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
				case  (forward):
					Score_home=0;Score_guest=0;
    3dce:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
    3dd2:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
					display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
    3dd6:	ef e7       	ldi	r30, 0x7F	; 127
    3dd8:	f4 e0       	ldi	r31, 0x04	; 4
    3dda:	10 86       	std	Z+8, r1	; 0x08
    3ddc:	11 86       	std	Z+9, r1	; 0x09
    3dde:	12 86       	std	Z+10, r1	; 0x0a
					update_score_display();
    3de0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					key = -1;
    3de4:	8f ef       	ldi	r24, 0xFF	; 255
    3de6:	9f ef       	ldi	r25, 0xFF	; 255
    3de8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3dec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;
    3df0:	73 c1       	rjmp	.+742    	; 0x40d8 <remote_instruction+0x3b4>
				case  (countdown_timer1):
				if (user_instruction != 'A' && user_instruction != 'a') {
    3df2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3df6:	81 34       	cpi	r24, 0x41	; 65
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <remote_instruction+0xd8>
    3dfa:	6e c1       	rjmp	.+732    	; 0x40d8 <remote_instruction+0x3b4>
    3dfc:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e00:	81 36       	cpi	r24, 0x61	; 97
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <remote_instruction+0xe2>
    3e04:	69 c1       	rjmp	.+722    	; 0x40d8 <remote_instruction+0x3b4>
					user_instruction = 'A'; // This means Counter down 1
    3e06:	81 e4       	ldi	r24, 0x41	; 65
    3e08:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    3e0c:	8f ef       	ldi	r24, 0xFF	; 255
    3e0e:	9f ef       	ldi	r25, 0xFF	; 255
    3e10:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e14:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3e18:	5f c1       	rjmp	.+702    	; 0x40d8 <remote_instruction+0x3b4>
				}
				break;
				case  (countdown_timer2):
				if (user_instruction != 'B' && user_instruction != 'b') {
    3e1a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e1e:	82 34       	cpi	r24, 0x42	; 66
    3e20:	09 f4       	brne	.+2      	; 0x3e24 <remote_instruction+0x100>
    3e22:	5a c1       	rjmp	.+692    	; 0x40d8 <remote_instruction+0x3b4>
    3e24:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e28:	82 36       	cpi	r24, 0x62	; 98
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <remote_instruction+0x10a>
    3e2c:	55 c1       	rjmp	.+682    	; 0x40d8 <remote_instruction+0x3b4>
					user_instruction = 'B'; // This means Counter down 1
    3e2e:	82 e4       	ldi	r24, 0x42	; 66
    3e30:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    3e34:	8f ef       	ldi	r24, 0xFF	; 255
    3e36:	9f ef       	ldi	r25, 0xFF	; 255
    3e38:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e3c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3e40:	4b c1       	rjmp	.+662    	; 0x40d8 <remote_instruction+0x3b4>
				}
				break;
				case  (up_timer):
					if (user_instruction != 'U' && user_instruction != 'u') {
    3e42:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e46:	85 35       	cpi	r24, 0x55	; 85
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <remote_instruction+0x128>
    3e4a:	46 c1       	rjmp	.+652    	; 0x40d8 <remote_instruction+0x3b4>
    3e4c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e50:	85 37       	cpi	r24, 0x75	; 117
    3e52:	09 f4       	brne	.+2      	; 0x3e56 <remote_instruction+0x132>
    3e54:	41 c1       	rjmp	.+642    	; 0x40d8 <remote_instruction+0x3b4>
					    user_instruction = 'U'; // This means Up counter
    3e56:	85 e5       	ldi	r24, 0x55	; 85
    3e58:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					    key = -1;
    3e5c:	8f ef       	ldi	r24, 0xFF	; 255
    3e5e:	9f ef       	ldi	r25, 0xFF	; 255
    3e60:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e64:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3e68:	37 c1       	rjmp	.+622    	; 0x40d8 <remote_instruction+0x3b4>
					}
					break;
				case (info): //button [INFO]
					if (user_instruction != 'S' && user_instruction != 's') {
    3e6a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e6e:	83 35       	cpi	r24, 0x53	; 83
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <remote_instruction+0x150>
    3e72:	32 c1       	rjmp	.+612    	; 0x40d8 <remote_instruction+0x3b4>
    3e74:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e78:	83 37       	cpi	r24, 0x73	; 115
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <remote_instruction+0x15a>
    3e7c:	2d c1       	rjmp	.+602    	; 0x40d8 <remote_instruction+0x3b4>
					    user_instruction = 'S'; // This means Set cklock
    3e7e:	83 e5       	ldi	r24, 0x53	; 83
    3e80:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					    key = -1;
    3e84:	8f ef       	ldi	r24, 0xFF	; 255
    3e86:	9f ef       	ldi	r25, 0xFF	; 255
    3e88:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e8c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3e90:	23 c1       	rjmp	.+582    	; 0x40d8 <remote_instruction+0x3b4>
					}
					break;
	            case (nettv):
	                if (user_instruction != 'D' && user_instruction != 'd') {
    3e92:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e96:	84 34       	cpi	r24, 0x44	; 68
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <remote_instruction+0x178>
    3e9a:	1e c1       	rjmp	.+572    	; 0x40d8 <remote_instruction+0x3b4>
    3e9c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ea0:	84 36       	cpi	r24, 0x64	; 100
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <remote_instruction+0x182>
    3ea4:	19 c1       	rjmp	.+562    	; 0x40d8 <remote_instruction+0x3b4>
	                    user_instruction = 'D'; // This means set date
    3ea6:	84 e4       	ldi	r24, 0x44	; 68
    3ea8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	                    key = -1;
    3eac:	8f ef       	ldi	r24, 0xFF	; 255
    3eae:	9f ef       	ldi	r25, 0xFF	; 255
    3eb0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3eb4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3eb8:	0f c1       	rjmp	.+542    	; 0x40d8 <remote_instruction+0x3b4>
	                }
	                break;
	            case (source):
	                if (user_instruction != 'F' && user_instruction != 'f') {
    3eba:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ebe:	86 34       	cpi	r24, 0x46	; 70
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <remote_instruction+0x1a0>
    3ec2:	0a c1       	rjmp	.+532    	; 0x40d8 <remote_instruction+0x3b4>
    3ec4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ec8:	86 36       	cpi	r24, 0x66	; 102
    3eca:	09 f4       	brne	.+2      	; 0x3ece <remote_instruction+0x1aa>
    3ecc:	05 c1       	rjmp	.+522    	; 0x40d8 <remote_instruction+0x3b4>
	                    user_instruction = 'F'; // This means set F menu 
    3ece:	86 e4       	ldi	r24, 0x46	; 70
    3ed0:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	                    key = -1;
    3ed4:	8f ef       	ldi	r24, 0xFF	; 255
    3ed6:	9f ef       	ldi	r25, 0xFF	; 255
    3ed8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3edc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3ee0:	fb c0       	rjmp	.+502    	; 0x40d8 <remote_instruction+0x3b4>
	                }
	                break;
				case (fav):
	                if (user_instruction != 'E' && user_instruction != 'e') {
    3ee2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ee6:	85 34       	cpi	r24, 0x45	; 69
    3ee8:	09 f4       	brne	.+2      	; 0x3eec <remote_instruction+0x1c8>
    3eea:	f6 c0       	rjmp	.+492    	; 0x40d8 <remote_instruction+0x3b4>
    3eec:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ef0:	85 36       	cpi	r24, 0x65	; 101
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <remote_instruction+0x1d2>
    3ef4:	f1 c0       	rjmp	.+482    	; 0x40d8 <remote_instruction+0x3b4>
	                    user_instruction = 'E'; // This means set F menu 
    3ef6:	85 e4       	ldi	r24, 0x45	; 69
    3ef8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	                    key = -1;
    3efc:	8f ef       	ldi	r24, 0xFF	; 255
    3efe:	9f ef       	ldi	r25, 0xFF	; 255
    3f00:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f04:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f08:	e7 c0       	rjmp	.+462    	; 0x40d8 <remote_instruction+0x3b4>
	                }
	                break;
				case (countdown_set):
	                if (user_instruction != 'C' && user_instruction != 'c') {
    3f0a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f0e:	83 34       	cpi	r24, 0x43	; 67
    3f10:	89 f0       	breq	.+34     	; 0x3f34 <remote_instruction+0x210>
    3f12:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f16:	83 36       	cpi	r24, 0x63	; 99
    3f18:	69 f0       	breq	.+26     	; 0x3f34 <remote_instruction+0x210>
	                    user_instruction = 'C'; // This means Counter down menu 1
    3f1a:	83 e4       	ldi	r24, 0x43	; 67
    3f1c:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
						Set_countdown_bank = 1;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3f26:	8f ef       	ldi	r24, 0xFF	; 255
    3f28:	9f ef       	ldi	r25, 0xFF	; 255
    3f2a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f2e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f32:	d2 c0       	rjmp	.+420    	; 0x40d8 <remote_instruction+0x3b4>
	                }else if (user_instruction == 'C' || user_instruction == 'c')
    3f34:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f38:	83 34       	cpi	r24, 0x43	; 67
    3f3a:	29 f0       	breq	.+10     	; 0x3f46 <remote_instruction+0x222>
    3f3c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f40:	83 36       	cpi	r24, 0x63	; 99
    3f42:	09 f0       	breq	.+2      	; 0x3f46 <remote_instruction+0x222>
    3f44:	c9 c0       	rjmp	.+402    	; 0x40d8 <remote_instruction+0x3b4>
	                {
						user_instruction = 0;	// This means Counter down menu 2
    3f46:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
						Set_countdown_bank = 2; //Set this =2 to recall the function with bank2
    3f4a:	82 e0       	ldi	r24, 0x02	; 2
    3f4c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3f50:	8f ef       	ldi	r24, 0xFF	; 255
    3f52:	9f ef       	ldi	r25, 0xFF	; 255
    3f54:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f58:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f5c:	bd c0       	rjmp	.+378    	; 0x40d8 <remote_instruction+0x3b4>
	                }
	                break;
				case (countdown_alarm_set):
	                if (user_instruction != 'C' && user_instruction != 'c' && Set_countdown_bank != 3) {
    3f5e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f62:	83 34       	cpi	r24, 0x43	; 67
    3f64:	a9 f0       	breq	.+42     	; 0x3f90 <remote_instruction+0x26c>
    3f66:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f6a:	83 36       	cpi	r24, 0x63	; 99
    3f6c:	89 f0       	breq	.+34     	; 0x3f90 <remote_instruction+0x26c>
    3f6e:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    3f72:	83 30       	cpi	r24, 0x03	; 3
    3f74:	69 f0       	breq	.+26     	; 0x3f90 <remote_instruction+0x26c>
	                    user_instruction = 'C'; // This means Counter down menu 1
    3f76:	83 e4       	ldi	r24, 0x43	; 67
    3f78:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
						Set_countdown_bank = 3; // Means Set countown alarm 1
    3f7c:	83 e0       	ldi	r24, 0x03	; 3
    3f7e:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
    3f84:	9f ef       	ldi	r25, 0xFF	; 255
    3f86:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f8a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f8e:	a4 c0       	rjmp	.+328    	; 0x40d8 <remote_instruction+0x3b4>
	                }else if (user_instruction == 'c' && Set_countdown_bank == 3)
    3f90:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f94:	83 36       	cpi	r24, 0x63	; 99
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <remote_instruction+0x276>
    3f98:	9f c0       	rjmp	.+318    	; 0x40d8 <remote_instruction+0x3b4>
    3f9a:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    3f9e:	83 30       	cpi	r24, 0x03	; 3
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <remote_instruction+0x280>
    3fa2:	9a c0       	rjmp	.+308    	; 0x40d8 <remote_instruction+0x3b4>
	                {
						user_instruction = 0;	// This means Counter down menu 2
    3fa4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
						Set_countdown_bank = 4; //Set this =2 to recall the function with bank2
    3fa8:	84 e0       	ldi	r24, 0x04	; 4
    3faa:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	9f ef       	ldi	r25, 0xFF	; 255
    3fb2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3fb6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3fba:	8e c0       	rjmp	.+284    	; 0x40d8 <remote_instruction+0x3b4>
	                }
	                break;
	            case (exit_button): //check 'EXIT' button	                
	                if (!Change_timer_on){	  
    3fbc:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <Change_timer_on>
    3fc0:	81 11       	cpse	r24, r1
    3fc2:	8a c0       	rjmp	.+276    	; 0x40d8 <remote_instruction+0x3b4>
						user_instruction = 0;
    3fc4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
						Set_countdown_bank = 0;             
    3fc8:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
						display_init(1);
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
    3fd2:	82 c0       	rjmp	.+260    	; 0x40d8 <remote_instruction+0x3b4>
					}
	                break;
				case (Shift_source): //unstruction to show brightness
					if (user_instruction != 'O' && user_instruction != 'O') {
    3fd4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3fd8:	8f 34       	cpi	r24, 0x4F	; 79
    3fda:	09 f4       	brne	.+2      	; 0x3fde <remote_instruction+0x2ba>
    3fdc:	7d c0       	rjmp	.+250    	; 0x40d8 <remote_instruction+0x3b4>
    3fde:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3fe2:	8f 34       	cpi	r24, 0x4F	; 79
    3fe4:	09 f4       	brne	.+2      	; 0x3fe8 <remote_instruction+0x2c4>
    3fe6:	78 c0       	rjmp	.+240    	; 0x40d8 <remote_instruction+0x3b4>
						user_instruction = 'O'; // This means show brightness
    3fe8:	8f e4       	ldi	r24, 0x4F	; 79
    3fea:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
						key = -1;
    3fee:	8f ef       	ldi	r24, 0xFF	; 255
    3ff0:	9f ef       	ldi	r25, 0xFF	; 255
    3ff2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3ff6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3ffa:	6e c0       	rjmp	.+220    	; 0x40d8 <remote_instruction+0x3b4>
					}
					break;
			}
		}else if (Game_on){
    3ffc:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    4000:	88 23       	and	r24, r24
    4002:	09 f4       	brne	.+2      	; 0x4006 <remote_instruction+0x2e2>
    4004:	69 c0       	rjmp	.+210    	; 0x40d8 <remote_instruction+0x3b4>
        switch (cmdnum) {
    4006:	81 2f       	mov	r24, r17
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	fc 01       	movw	r30, r24
    400c:	37 97       	sbiw	r30, 0x07	; 7
    400e:	eb 31       	cpi	r30, 0x1B	; 27
    4010:	f1 05       	cpc	r31, r1
    4012:	08 f0       	brcs	.+2      	; 0x4016 <remote_instruction+0x2f2>
    4014:	61 c0       	rjmp	.+194    	; 0x40d8 <remote_instruction+0x3b4>
    4016:	ee 5b       	subi	r30, 0xBE	; 190
    4018:	fe 4f       	sbci	r31, 0xFE	; 254
    401a:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
			case (V_plus):
				Score_home++;
    401e:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    4022:	8f 5f       	subi	r24, 0xFF	; 255
    4024:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=0;}
    4028:	84 36       	cpi	r24, 0x64	; 100
    402a:	10 f0       	brcs	.+4      	; 0x4030 <remote_instruction+0x30c>
    402c:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
				update_score_display();
    4030:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    4034:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    4038:	4f c0       	rjmp	.+158    	; 0x40d8 <remote_instruction+0x3b4>
			case (V_minus):
				Score_home--;
    403a:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    403e:	81 50       	subi	r24, 0x01	; 1
    4040:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=99;}
    4044:	84 36       	cpi	r24, 0x64	; 100
    4046:	18 f0       	brcs	.+6      	; 0x404e <remote_instruction+0x32a>
    4048:	83 e6       	ldi	r24, 0x63	; 99
    404a:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				update_score_display();
    404e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    4052:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    4056:	40 c0       	rjmp	.+128    	; 0x40d8 <remote_instruction+0x3b4>
			case (P_plus):
				Score_guest++;
    4058:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    405c:	8f 5f       	subi	r24, 0xFF	; 255
    405e:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=0;}
    4062:	84 36       	cpi	r24, 0x64	; 100
    4064:	10 f0       	brcs	.+4      	; 0x406a <remote_instruction+0x346>
    4066:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
				update_score_display();
    406a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    406e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    4072:	32 c0       	rjmp	.+100    	; 0x40d8 <remote_instruction+0x3b4>
			case (P_minus):
				Score_guest--;
    4074:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    4078:	81 50       	subi	r24, 0x01	; 1
    407a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=99;}
    407e:	84 36       	cpi	r24, 0x64	; 100
    4080:	18 f0       	brcs	.+6      	; 0x4088 <remote_instruction+0x364>
    4082:	83 e6       	ldi	r24, 0x63	; 99
    4084:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				update_score_display();
    4088:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    408c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    4090:	23 c0       	rjmp	.+70     	; 0x40d8 <remote_instruction+0x3b4>
			case (7): //change TF1
				display_out_buf[8]++;
    4092:	ef e7       	ldi	r30, 0x7F	; 127
    4094:	f4 e0       	ldi	r31, 0x04	; 4
    4096:	80 85       	ldd	r24, Z+8	; 0x08
    4098:	8f 5f       	subi	r24, 0xFF	; 255
    409a:	80 87       	std	Z+8, r24	; 0x08
				if (display_out_buf[8]>9){display_out_buf[8]=0;}
    409c:	8a 30       	cpi	r24, 0x0A	; 10
    409e:	10 f0       	brcs	.+4      	; 0x40a4 <remote_instruction+0x380>
    40a0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <display_out_buf+0x8>
				Display_Out();				
    40a4:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				break;
    40a8:	17 c0       	rjmp	.+46     	; 0x40d8 <remote_instruction+0x3b4>
			case (8): //change TF2
				display_out_buf[9]++;
    40aa:	ef e7       	ldi	r30, 0x7F	; 127
    40ac:	f4 e0       	ldi	r31, 0x04	; 4
    40ae:	81 85       	ldd	r24, Z+9	; 0x09
    40b0:	8f 5f       	subi	r24, 0xFF	; 255
    40b2:	81 87       	std	Z+9, r24	; 0x09
				if (display_out_buf[9]>9){display_out_buf[9]=0;}
    40b4:	8a 30       	cpi	r24, 0x0A	; 10
    40b6:	10 f0       	brcs	.+4      	; 0x40bc <remote_instruction+0x398>
    40b8:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <display_out_buf+0x9>
				Display_Out();
    40bc:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				break;
    40c0:	0b c0       	rjmp	.+22     	; 0x40d8 <remote_instruction+0x3b4>
			case (9): //change period
				display_out_buf[10]++;
    40c2:	ef e7       	ldi	r30, 0x7F	; 127
    40c4:	f4 e0       	ldi	r31, 0x04	; 4
    40c6:	82 85       	ldd	r24, Z+10	; 0x0a
    40c8:	8f 5f       	subi	r24, 0xFF	; 255
    40ca:	82 87       	std	Z+10, r24	; 0x0a
				if (display_out_buf[10]>9){display_out_buf[10]=0;}
    40cc:	8a 30       	cpi	r24, 0x0A	; 10
    40ce:	10 f0       	brcs	.+4      	; 0x40d4 <remote_instruction+0x3b0>
    40d0:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <display_out_buf+0xa>
				Display_Out();
    40d4:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				break;
			}
		}
		
        if (cmdnum==Speaker){
    40d8:	1d 30       	cpi	r17, 0x0D	; 13
    40da:	41 f4       	brne	.+16     	; 0x40ec <remote_instruction+0x3c8>
			Buzzer(1,8600);
    40dc:	68 e9       	ldi	r22, 0x98	; 152
    40de:	71 e2       	ldi	r23, 0x21	; 33
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
			Speaker_delay_open=2;
    40e6:	82 e0       	ldi	r24, 0x02	; 2
    40e8:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Speaker_delay_open>
	        //_delay_ms(300);
	        //Buzzer(0,0);
			}

    }
}
    40ec:	0f 90       	pop	r0
    40ee:	0f 90       	pop	r0
    40f0:	df 91       	pop	r29
    40f2:	cf 91       	pop	r28
    40f4:	1f 91       	pop	r17
    40f6:	08 95       	ret

000040f8 <__vector_3>:
}

#else

ISR(INT2_vect)
{
    40f8:	1f 92       	push	r1
    40fa:	0f 92       	push	r0
    40fc:	0f b6       	in	r0, 0x3f	; 63
    40fe:	0f 92       	push	r0
    4100:	11 24       	eor	r1, r1
    4102:	2f 93       	push	r18
    4104:	3f 93       	push	r19
    4106:	4f 93       	push	r20
    4108:	5f 93       	push	r21
    410a:	6f 93       	push	r22
    410c:	7f 93       	push	r23
    410e:	8f 93       	push	r24
    4110:	9f 93       	push	r25
    4112:	af 93       	push	r26
    4114:	bf 93       	push	r27
    4116:	cf 93       	push	r28
    4118:	ef 93       	push	r30
    411a:	ff 93       	push	r31
    uint16_t delay = TCNT1;
    411c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    4120:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     *  0 - short space
     *  2 - short pulse
     *  4 - long space
     *  6 - long pulse
     */
    uint8_t event = (PINB & _BV(PINB2)) ? 2 : 0;
    4124:	1a 9b       	sbis	0x03, 2	; 3
    4126:	02 c0       	rjmp	.+4      	; 0x412c <__vector_3+0x34>
    4128:	c2 e0       	ldi	r28, 0x02	; 2
    412a:	01 c0       	rjmp	.+2      	; 0x412e <__vector_3+0x36>
    412c:	c0 e0       	ldi	r28, 0x00	; 0
    
    if(delay > LONG_MIN && delay < LONG_MAX)
    412e:	9c 01       	movw	r18, r24
    4130:	27 53       	subi	r18, 0x37	; 55
    4132:	35 40       	sbci	r19, 0x05	; 5
    4134:	27 37       	cpi	r18, 0x77	; 119
    4136:	33 40       	sbci	r19, 0x03	; 3
    4138:	10 f4       	brcc	.+4      	; 0x413e <__vector_3+0x46>
    {
        event += 4;
    413a:	cc 5f       	subi	r28, 0xFC	; 252
    413c:	07 c0       	rjmp	.+14     	; 0x414c <__vector_3+0x54>
    }
    else if(delay < SHORT_MIN || delay > SHORT_MAX)
    413e:	8c 5b       	subi	r24, 0xBC	; 188
    4140:	91 40       	sbci	r25, 0x01	; 1
    4142:	8a 37       	cpi	r24, 0x7A	; 122
    4144:	93 40       	sbci	r25, 0x03	; 3
    4146:	10 f0       	brcs	.+4      	; 0x414c <__vector_3+0x54>
    {
        /* If delay wasn't long and isn't short then
         * it is erroneous so we need to reset but
         * we don't return from interrupt so we don't
         * loose the edge currently detected. */
        RC5_Reset();
    4148:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
    }

    if(state == STATE_BEGIN)
    414c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <state>
    4150:	25 30       	cpi	r18, 0x05	; 5
    4152:	01 f5       	brne	.+64     	; 0x4194 <__vector_3+0x9c>
    {
        ccounter--;
    4154:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <ccounter>
    4158:	81 50       	subi	r24, 0x01	; 1
    415a:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <ccounter>
        command |= 1 << ccounter;
    415e:	21 e0       	ldi	r18, 0x01	; 1
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	a9 01       	movw	r20, r18
    4164:	02 c0       	rjmp	.+4      	; 0x416a <__vector_3+0x72>
    4166:	44 0f       	add	r20, r20
    4168:	55 1f       	adc	r21, r21
    416a:	8a 95       	dec	r24
    416c:	e2 f7       	brpl	.-8      	; 0x4166 <__vector_3+0x6e>
    416e:	ca 01       	movw	r24, r20
    4170:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <command>
    4174:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <command+0x1>
    4178:	82 2b       	or	r24, r18
    417a:	93 2b       	or	r25, r19
    417c:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <command+0x1>
    4180:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <command>
        state = STATE_MID1;
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
        TCNT1 = 0;
    418a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    418e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
        return;
    4192:	4c c0       	rjmp	.+152    	; 0x422c <__vector_3+0x134>
    }
    
    State newstate = (trans[state] >> event) & 0x03;
    4194:	e2 2f       	mov	r30, r18
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	e6 5f       	subi	r30, 0xF6	; 246
    419a:	fe 4f       	sbci	r31, 0xFE	; 254
    419c:	80 81       	ld	r24, Z
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <__vector_3+0xae>
    41a2:	95 95       	asr	r25
    41a4:	87 95       	ror	r24
    41a6:	ca 95       	dec	r28
    41a8:	e2 f7       	brpl	.-8      	; 0x41a2 <__vector_3+0xaa>
    41aa:	83 70       	andi	r24, 0x03	; 3

    if(newstate == state || state > STATE_START0)
    41ac:	28 17       	cp	r18, r24
    41ae:	11 f0       	breq	.+4      	; 0x41b4 <__vector_3+0xbc>
    41b0:	24 30       	cpi	r18, 0x04	; 4
    41b2:	18 f0       	brcs	.+6      	; 0x41ba <__vector_3+0xc2>
    {
        /* No state change or wrong state means
         * error so reset. */
        RC5_Reset();
    41b4:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
        return;
    41b8:	39 c0       	rjmp	.+114    	; 0x422c <__vector_3+0x134>
    }
    
    state = newstate;
    41ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
    
    /* Emit 0 - jest decrement bit position counter
     * cause data is already zeroed by default. */
    if(state == STATE_MID0)
    41be:	82 30       	cpi	r24, 0x02	; 2
    41c0:	31 f4       	brne	.+12     	; 0x41ce <__vector_3+0xd6>
    {
        ccounter--;
    41c2:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <ccounter>
    41c6:	91 50       	subi	r25, 0x01	; 1
    41c8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <ccounter>
    41cc:	18 c0       	rjmp	.+48     	; 0x41fe <__vector_3+0x106>
    }
    else if(state == STATE_MID1)
    41ce:	81 30       	cpi	r24, 0x01	; 1
    41d0:	b1 f4       	brne	.+44     	; 0x41fe <__vector_3+0x106>
    {
        /* Emit 1 */
        ccounter--;
    41d2:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <ccounter>
    41d6:	91 50       	subi	r25, 0x01	; 1
    41d8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <ccounter>
        command |= 1 << ccounter;
    41dc:	21 e0       	ldi	r18, 0x01	; 1
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	02 c0       	rjmp	.+4      	; 0x41e6 <__vector_3+0xee>
    41e2:	22 0f       	add	r18, r18
    41e4:	33 1f       	adc	r19, r19
    41e6:	9a 95       	dec	r25
    41e8:	e2 f7       	brpl	.-8      	; 0x41e2 <__vector_3+0xea>
    41ea:	40 91 d0 04 	lds	r20, 0x04D0	; 0x8004d0 <command>
    41ee:	50 91 d1 04 	lds	r21, 0x04D1	; 0x8004d1 <command+0x1>
    41f2:	24 2b       	or	r18, r20
    41f4:	35 2b       	or	r19, r21
    41f6:	30 93 d1 04 	sts	0x04D1, r19	; 0x8004d1 <command+0x1>
    41fa:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <command>
    }
    
    /* The only valid end states are MID0 and START1.
     * Mid0 is ok, but if we finish in MID1 we need to wait
     * for START1 so the last edge is consumed. */
    if(ccounter == 0 && (state == STATE_START1 || state == STATE_MID0))
    41fe:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <ccounter>
    4202:	91 11       	cpse	r25, r1
    4204:	0f c0       	rjmp	.+30     	; 0x4224 <__vector_3+0x12c>
    4206:	88 23       	and	r24, r24
    4208:	11 f0       	breq	.+4      	; 0x420e <__vector_3+0x116>
    420a:	82 30       	cpi	r24, 0x02	; 2
    420c:	59 f4       	brne	.+22     	; 0x4224 <__vector_3+0x12c>
    {
        state = STATE_END;
    420e:	86 e0       	ldi	r24, 0x06	; 6
    4210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
        has_new = 1;
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <has_new>
        
        /* Disable INT0 */
        EIMSK &= ~_BV(INT2);
    421a:	8d b3       	in	r24, 0x1d	; 29
    421c:	8b 7f       	andi	r24, 0xFB	; 251
    421e:	8d bb       	out	0x1d, r24	; 29
	remote_instruction();
    4220:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <remote_instruction>
    }
    
    TCNT1 = 0;
    4224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
    422c:	ff 91       	pop	r31
    422e:	ef 91       	pop	r30
    4230:	cf 91       	pop	r28
    4232:	bf 91       	pop	r27
    4234:	af 91       	pop	r26
    4236:	9f 91       	pop	r25
    4238:	8f 91       	pop	r24
    423a:	7f 91       	pop	r23
    423c:	6f 91       	pop	r22
    423e:	5f 91       	pop	r21
    4240:	4f 91       	pop	r20
    4242:	3f 91       	pop	r19
    4244:	2f 91       	pop	r18
    4246:	0f 90       	pop	r0
    4248:	0f be       	out	0x3f, r0	; 63
    424a:	0f 90       	pop	r0
    424c:	1f 90       	pop	r1
    424e:	18 95       	reti

00004250 <rf_instruction>:

void rf_instruction(uint8_t button){
    4250:	cf 93       	push	r28
    4252:	c8 2f       	mov	r28, r24
	if (eeprom_read_byte((uint8_t*)FAV_eep + RF_remote))
    4254:	8c e0       	ldi	r24, 0x0C	; 12
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    425c:	88 23       	and	r24, r24
    425e:	09 f4       	brne	.+2      	; 0x4262 <rf_instruction+0x12>
    4260:	cb c0       	rjmp	.+406    	; 0x43f8 <rf_instruction+0x1a8>
	{
	switch(button){
    4262:	c2 30       	cpi	r28, 0x02	; 2
    4264:	61 f0       	breq	.+24     	; 0x427e <rf_instruction+0x2e>
    4266:	20 f4       	brcc	.+8      	; 0x4270 <rf_instruction+0x20>
    4268:	c1 30       	cpi	r28, 0x01	; 1
    426a:	09 f4       	brne	.+2      	; 0x426e <rf_instruction+0x1e>
    426c:	92 c0       	rjmp	.+292    	; 0x4392 <rf_instruction+0x142>
    426e:	e2 c0       	rjmp	.+452    	; 0x4434 <rf_instruction+0x1e4>
    4270:	c4 30       	cpi	r28, 0x04	; 4
    4272:	09 f4       	brne	.+2      	; 0x4276 <rf_instruction+0x26>
    4274:	ba c0       	rjmp	.+372    	; 0x43ea <rf_instruction+0x19a>
    4276:	c8 30       	cpi	r28, 0x08	; 8
    4278:	09 f4       	brne	.+2      	; 0x427c <rf_instruction+0x2c>
    427a:	5f c0       	rjmp	.+190    	; 0x433a <rf_instruction+0xea>
    427c:	db c0       	rjmp	.+438    	; 0x4434 <rf_instruction+0x1e4>
		
		case (RF_BUTTON_1):
		if (Game_on && !Timer_Butt_Minus){
    427e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    4282:	88 23       	and	r24, r24
    4284:	69 f0       	breq	.+26     	; 0x42a0 <rf_instruction+0x50>
    4286:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    428a:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    428e:	89 2b       	or	r24, r25
    4290:	39 f4       	brne	.+14     	; 0x42a0 <rf_instruction+0x50>
			key=ok;			
    4292:	87 e1       	ldi	r24, 0x17	; 23
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    429a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    429e:	ca c0       	rjmp	.+404    	; 0x4434 <rf_instruction+0x1e4>
		}else if (Timer_Butt_Start){
    42a0:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <Timer_Butt_Start>
    42a4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <Timer_Butt_Start+0x1>
    42a8:	89 2b       	or	r24, r25
    42aa:	91 f1       	breq	.+100    	; 0x4310 <rf_instruction+0xc0>
			uint8_t Start_setting = eeprom_read_byte((uint8_t*)FAV_eep + Start_game_choice);
    42ac:	8b e0       	ldi	r24, 0x0B	; 11
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
			switch (Start_setting){
    42b4:	81 30       	cpi	r24, 0x01	; 1
    42b6:	71 f0       	breq	.+28     	; 0x42d4 <rf_instruction+0x84>
    42b8:	18 f0       	brcs	.+6      	; 0x42c0 <rf_instruction+0x70>
    42ba:	82 30       	cpi	r24, 0x02	; 2
    42bc:	a9 f0       	breq	.+42     	; 0x42e8 <rf_instruction+0x98>
    42be:	1e c0       	rjmp	.+60     	; 0x42fc <rf_instruction+0xac>
				case (0):
					user_instruction = 'U'; // This means Up counter
    42c0:	85 e5       	ldi	r24, 0x55	; 85
    42c2:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    42c6:	8f ef       	ldi	r24, 0xFF	; 255
    42c8:	9f ef       	ldi	r25, 0xFF	; 255
    42ca:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    42ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;
    42d2:	b0 c0       	rjmp	.+352    	; 0x4434 <rf_instruction+0x1e4>
				case (1):
					user_instruction = 'A'; // This means Counter Down 1
    42d4:	81 e4       	ldi	r24, 0x41	; 65
    42d6:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    42da:	8f ef       	ldi	r24, 0xFF	; 255
    42dc:	9f ef       	ldi	r25, 0xFF	; 255
    42de:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    42e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;
    42e6:	a6 c0       	rjmp	.+332    	; 0x4434 <rf_instruction+0x1e4>
				case (2):
					user_instruction = 'B'; // This means Counter Down 2
    42e8:	82 e4       	ldi	r24, 0x42	; 66
    42ea:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    42ee:	8f ef       	ldi	r24, 0xFF	; 255
    42f0:	9f ef       	ldi	r25, 0xFF	; 255
    42f2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    42f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				break;
    42fa:	9c c0       	rjmp	.+312    	; 0x4434 <rf_instruction+0x1e4>
				default:
					user_instruction = 'U'; // This means Up counter
    42fc:	85 e5       	ldi	r24, 0x55	; 85
    42fe:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    4302:	8f ef       	ldi	r24, 0xFF	; 255
    4304:	9f ef       	ldi	r25, 0xFF	; 255
    4306:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    430a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;				
    430e:	92 c0       	rjmp	.+292    	; 0x4434 <rf_instruction+0x1e4>
			}
		}else if (Timer_Butt_Minus){	//this is stop game
    4310:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    4314:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    4318:	89 2b       	or	r24, r25
    431a:	41 f0       	breq	.+16     	; 0x432c <rf_instruction+0xdc>
			user_instruction = 0;
    431c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			Set_countdown_bank = 0;
    4320:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
			display_init(1);
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
			break;
    432a:	84 c0       	rjmp	.+264    	; 0x4434 <rf_instruction+0x1e4>
		}else{
			Timer_Butt_Start = RF_REPEAT_TIME;
    432c:	80 ea       	ldi	r24, 0xA0	; 160
    432e:	9f e0       	ldi	r25, 0x0F	; 15
    4330:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <Timer_Butt_Start+0x1>
    4334:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <Timer_Butt_Start>
    4338:	7d c0       	rjmp	.+250    	; 0x4434 <rf_instruction+0x1e4>
		}		
		break;	
//--------------------------------------------------------------
		case (RF_BUTTON_3):
			if (!Game_on)
    433a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    433e:	88 23       	and	r24, r24
    4340:	09 f4       	brne	.+2      	; 0x4344 <rf_instruction+0xf4>
    4342:	78 c0       	rjmp	.+240    	; 0x4434 <rf_instruction+0x1e4>
				break;
			if (Timer_Butt_Minus){
    4344:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    4348:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    434c:	89 2b       	or	r24, r25
    434e:	99 f0       	breq	.+38     	; 0x4376 <rf_instruction+0x126>
				Timer_Butt_Minus = RF_REPEAT_TIME;
    4350:	80 ea       	ldi	r24, 0xA0	; 160
    4352:	9f e0       	ldi	r25, 0x0F	; 15
    4354:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    4358:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
				Score_home--;
    435c:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    4360:	81 50       	subi	r24, 0x01	; 1
    4362:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=99;}
    4366:	84 36       	cpi	r24, 0x64	; 100
    4368:	18 f0       	brcs	.+6      	; 0x4370 <rf_instruction+0x120>
    436a:	83 e6       	ldi	r24, 0x63	; 99
    436c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				update_score_display();
    4370:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
    4374:	09 c0       	rjmp	.+18     	; 0x4388 <rf_instruction+0x138>
			}else{
				Score_home++;
    4376:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    437a:	8f 5f       	subi	r24, 0xFF	; 255
    437c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=0;}
    4380:	84 36       	cpi	r24, 0x64	; 100
    4382:	10 f0       	brcs	.+4      	; 0x4388 <rf_instruction+0x138>
    4384:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
			}
			update_score_display();
    4388:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
			timer_display();
    438c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
			break;
    4390:	51 c0       	rjmp	.+162    	; 0x4434 <rf_instruction+0x1e4>
//--------------------------------------------------------------			
		case (RF_BUTTON_4):
			if (!Game_on)
    4392:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    4396:	88 23       	and	r24, r24
    4398:	09 f4       	brne	.+2      	; 0x439c <rf_instruction+0x14c>
    439a:	4c c0       	rjmp	.+152    	; 0x4434 <rf_instruction+0x1e4>
				break;
			if (Timer_Butt_Minus){
    439c:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    43a0:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    43a4:	89 2b       	or	r24, r25
    43a6:	99 f0       	breq	.+38     	; 0x43ce <rf_instruction+0x17e>
				Timer_Butt_Minus = RF_REPEAT_TIME;
    43a8:	80 ea       	ldi	r24, 0xA0	; 160
    43aa:	9f e0       	ldi	r25, 0x0F	; 15
    43ac:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    43b0:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
				Score_guest--;
    43b4:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    43b8:	81 50       	subi	r24, 0x01	; 1
    43ba:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=99;}
    43be:	84 36       	cpi	r24, 0x64	; 100
    43c0:	18 f0       	brcs	.+6      	; 0x43c8 <rf_instruction+0x178>
    43c2:	83 e6       	ldi	r24, 0x63	; 99
    43c4:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				update_score_display();
    43c8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
    43cc:	09 c0       	rjmp	.+18     	; 0x43e0 <rf_instruction+0x190>
				}else{
				Score_guest++;
    43ce:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=0;}
    43d8:	84 36       	cpi	r24, 0x64	; 100
    43da:	10 f0       	brcs	.+4      	; 0x43e0 <rf_instruction+0x190>
    43dc:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
			}
			update_score_display();
    43e0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
			timer_display();
    43e4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
			break;
    43e8:	25 c0       	rjmp	.+74     	; 0x4434 <rf_instruction+0x1e4>
//--------------------------------------------------------------
		case (RF_BUTTON_2):
			Timer_Butt_Minus = RF_REPEAT_TIME;
    43ea:	80 ea       	ldi	r24, 0xA0	; 160
    43ec:	9f e0       	ldi	r25, 0x0F	; 15
    43ee:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    43f2:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
			break;		
    43f6:	1e c0       	rjmp	.+60     	; 0x4434 <rf_instruction+0x1e4>
		}
	}else if (Game_on){
    43f8:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    43fc:	88 23       	and	r24, r24
    43fe:	d1 f0       	breq	.+52     	; 0x4434 <rf_instruction+0x1e4>
		switch(button){
    4400:	c2 30       	cpi	r28, 0x02	; 2
    4402:	69 f0       	breq	.+26     	; 0x441e <rf_instruction+0x1ce>
    4404:	18 f4       	brcc	.+6      	; 0x440c <rf_instruction+0x1bc>
    4406:	c1 30       	cpi	r28, 0x01	; 1
    4408:	31 f0       	breq	.+12     	; 0x4416 <rf_instruction+0x1c6>
    440a:	14 c0       	rjmp	.+40     	; 0x4434 <rf_instruction+0x1e4>
    440c:	c4 30       	cpi	r28, 0x04	; 4
    440e:	59 f0       	breq	.+22     	; 0x4426 <rf_instruction+0x1d6>
    4410:	c8 30       	cpi	r28, 0x08	; 8
    4412:	69 f0       	breq	.+26     	; 0x442e <rf_instruction+0x1de>
    4414:	0f c0       	rjmp	.+30     	; 0x4434 <rf_instruction+0x1e4>
			//Here starts is the Box Button check 
			case (BOX_BUTTON_1):
				Button_Key=1;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;				
    441c:	0b c0       	rjmp	.+22     	; 0x4434 <rf_instruction+0x1e4>
			case (BOX_BUTTON_2):
				Button_Key=2;
    441e:	82 e0       	ldi	r24, 0x02	; 2
    4420:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;
    4424:	07 c0       	rjmp	.+14     	; 0x4434 <rf_instruction+0x1e4>
			case (BOX_BUTTON_3):
				Button_Key=3;
    4426:	83 e0       	ldi	r24, 0x03	; 3
    4428:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;				
    442c:	03 c0       	rjmp	.+6      	; 0x4434 <rf_instruction+0x1e4>
			case (BOX_BUTTON_4):
				Button_Key=4;
    442e:	84 e0       	ldi	r24, 0x04	; 4
    4430:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;
		}
	}
}
    4434:	cf 91       	pop	r28
    4436:	08 95       	ret

00004438 <__vector_7>:
	PCICR = 0b00001000;
	PCMSK3 = 0b11110000;
}

ISR(PCINT3_vect)
{
    4438:	1f 92       	push	r1
    443a:	0f 92       	push	r0
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	0f 92       	push	r0
    4440:	11 24       	eor	r1, r1
    4442:	2f 93       	push	r18
    4444:	3f 93       	push	r19
    4446:	4f 93       	push	r20
    4448:	5f 93       	push	r21
    444a:	6f 93       	push	r22
    444c:	7f 93       	push	r23
    444e:	8f 93       	push	r24
    4450:	9f 93       	push	r25
    4452:	af 93       	push	r26
    4454:	bf 93       	push	r27
    4456:	ef 93       	push	r30
    4458:	ff 93       	push	r31
	uint8_t Input = ~RF_Pins;
    445a:	89 b1       	in	r24, 0x09	; 9
    445c:	80 95       	com	r24
	Input =Input>>4;
    445e:	82 95       	swap	r24
    4460:	8f 70       	andi	r24, 0x0F	; 15
	
	rf_instruction(Input);
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	0e 94 28 21 	call	0x4250	; 0x4250 <rf_instruction>
	
	

}
    4468:	ff 91       	pop	r31
    446a:	ef 91       	pop	r30
    446c:	bf 91       	pop	r27
    446e:	af 91       	pop	r26
    4470:	9f 91       	pop	r25
    4472:	8f 91       	pop	r24
    4474:	7f 91       	pop	r23
    4476:	6f 91       	pop	r22
    4478:	5f 91       	pop	r21
    447a:	4f 91       	pop	r20
    447c:	3f 91       	pop	r19
    447e:	2f 91       	pop	r18
    4480:	0f 90       	pop	r0
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	0f 90       	pop	r0
    4486:	1f 90       	pop	r1
    4488:	18 95       	reti

0000448a <Buttons_Score>:

void Buttons_Score(){
	switch(Button_Key){
    448a:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Button_Key>
    448e:	82 30       	cpi	r24, 0x02	; 2
    4490:	99 f0       	breq	.+38     	; 0x44b8 <Buttons_Score+0x2e>
    4492:	1c f4       	brge	.+6      	; 0x449a <Buttons_Score+0x10>
    4494:	81 30       	cpi	r24, 0x01	; 1
    4496:	31 f0       	breq	.+12     	; 0x44a4 <Buttons_Score+0x1a>
    4498:	2e c0       	rjmp	.+92     	; 0x44f6 <Buttons_Score+0x6c>
    449a:	83 30       	cpi	r24, 0x03	; 3
    449c:	c1 f0       	breq	.+48     	; 0x44ce <Buttons_Score+0x44>
    449e:	84 30       	cpi	r24, 0x04	; 4
    44a0:	01 f1       	breq	.+64     	; 0x44e2 <Buttons_Score+0x58>
    44a2:	29 c0       	rjmp	.+82     	; 0x44f6 <Buttons_Score+0x6c>
		case (1):
		Score_home++;
    44a4:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    44a8:	8f 5f       	subi	r24, 0xFF	; 255
    44aa:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
		if (Score_home>99){Score_home=0;}
    44ae:	84 36       	cpi	r24, 0x64	; 100
    44b0:	10 f1       	brcs	.+68     	; 0x44f6 <Buttons_Score+0x6c>
    44b2:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
    44b6:	1f c0       	rjmp	.+62     	; 0x44f6 <Buttons_Score+0x6c>
		break;		
		case (2):
		Score_home--;
    44b8:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    44bc:	81 50       	subi	r24, 0x01	; 1
    44be:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
		if (Score_home>99){Score_home=99;}
    44c2:	84 36       	cpi	r24, 0x64	; 100
    44c4:	c0 f0       	brcs	.+48     	; 0x44f6 <Buttons_Score+0x6c>
    44c6:	83 e6       	ldi	r24, 0x63	; 99
    44c8:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
    44cc:	14 c0       	rjmp	.+40     	; 0x44f6 <Buttons_Score+0x6c>
		break;
		case (3):
		Score_guest++;
    44ce:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    44d2:	8f 5f       	subi	r24, 0xFF	; 255
    44d4:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
		if (Score_guest>99){Score_guest=0;}
    44d8:	84 36       	cpi	r24, 0x64	; 100
    44da:	68 f0       	brcs	.+26     	; 0x44f6 <Buttons_Score+0x6c>
    44dc:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
    44e0:	0a c0       	rjmp	.+20     	; 0x44f6 <Buttons_Score+0x6c>
		break;		
		case (4):
		Score_guest--;
    44e2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    44e6:	81 50       	subi	r24, 0x01	; 1
    44e8:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
		if (Score_guest>99){Score_guest=99;}
    44ec:	84 36       	cpi	r24, 0x64	; 100
    44ee:	18 f0       	brcs	.+6      	; 0x44f6 <Buttons_Score+0x6c>
    44f0:	83 e6       	ldi	r24, 0x63	; 99
    44f2:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
		break;
	}
	update_score_display();
    44f6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
	timer_display();
    44fa:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	uint8_t i;
	uint8_t Input_PINs;
	for (i=0;i<3;i++){
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	13 c0       	rjmp	.+38     	; 0x4528 <Buttons_Score+0x9e>
    4502:	2f ef       	ldi	r18, 0xFF	; 255
    4504:	39 ef       	ldi	r19, 0xF9	; 249
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	21 50       	subi	r18, 0x01	; 1
    450a:	30 40       	sbci	r19, 0x00	; 0
    450c:	80 40       	sbci	r24, 0x00	; 0
    450e:	e1 f7       	brne	.-8      	; 0x4508 <Buttons_Score+0x7e>
    4510:	00 c0       	rjmp	.+0      	; 0x4512 <Buttons_Score+0x88>
    4512:	00 00       	nop
		_delay_ms(40);
		Input_PINs=0xff;
    4514:	8f ef       	ldi	r24, 0xFF	; 255
		while(Input_PINs){
    4516:	05 c0       	rjmp	.+10     	; 0x4522 <Buttons_Score+0x98>
			wdt_reset();
    4518:	a8 95       	wdr
			Input_PINs = ~RF_Pins;
    451a:	89 b1       	in	r24, 0x09	; 9
    451c:	80 95       	com	r24
			Input_PINs = Input_PINs>>4;
    451e:	82 95       	swap	r24
    4520:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t i;
	uint8_t Input_PINs;
	for (i=0;i<3;i++){
		_delay_ms(40);
		Input_PINs=0xff;
		while(Input_PINs){
    4522:	81 11       	cpse	r24, r1
    4524:	f9 cf       	rjmp	.-14     	; 0x4518 <Buttons_Score+0x8e>
	}
	update_score_display();
	timer_display();
	uint8_t i;
	uint8_t Input_PINs;
	for (i=0;i<3;i++){
    4526:	9f 5f       	subi	r25, 0xFF	; 255
    4528:	93 30       	cpi	r25, 0x03	; 3
    452a:	58 f3       	brcs	.-42     	; 0x4502 <Buttons_Score+0x78>
			wdt_reset();
			Input_PINs = ~RF_Pins;
			Input_PINs = Input_PINs>>4;
		}
	}
	Button_Key=0;
    452c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <Button_Key>
    4530:	08 95       	ret

00004532 <Counter_down>:
	display_out_buf[3]=last_temperature[3] ;
	Display_Out(); */
}

void Counter_down(int8_t bank)
{
    4532:	cf 93       	push	r28
    4534:	df 93       	push	r29
	key=-1;
    4536:	2f ef       	ldi	r18, 0xFF	; 255
    4538:	3f ef       	ldi	r19, 0xFF	; 255
    453a:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <key+0x1>
    453e:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <key>
	TCNT2 = 0;
    4542:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	Timer_blink_on=0x80;
    4546:	90 e8       	ldi	r25, 0x80	; 128
    4548:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <Timer_blink_on>
	
	if (bank==1)
    454c:	81 30       	cpi	r24, 0x01	; 1
    454e:	91 f4       	brne	.+36     	; 0x4574 <Counter_down+0x42>
	{
		timer[0]= eeprom_read_byte((uint8_t*)Countdown1_eep);
    4550:	80 e1       	ldi	r24, 0x10	; 16
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    4558:	c6 e7       	ldi	r28, 0x76	; 118
    455a:	d4 e0       	ldi	r29, 0x04	; 4
    455c:	88 83       	st	Y, r24
		timer[1]= eeprom_read_byte((uint8_t*)Countdown1_eep+1);
    455e:	81 e1       	ldi	r24, 0x11	; 17
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    4566:	89 83       	std	Y+1, r24	; 0x01
		timer[2]= eeprom_read_byte((uint8_t*)Countdown1_eep+2);
    4568:	82 e1       	ldi	r24, 0x12	; 18
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    4570:	8a 83       	std	Y+2, r24	; 0x02
    4572:	13 c0       	rjmp	.+38     	; 0x459a <Counter_down+0x68>
	}else if (bank==2)
    4574:	82 30       	cpi	r24, 0x02	; 2
    4576:	89 f4       	brne	.+34     	; 0x459a <Counter_down+0x68>
	{
		timer[0]= eeprom_read_byte((uint8_t*)Countdown2_eep);
    4578:	83 e1       	ldi	r24, 0x13	; 19
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    4580:	c6 e7       	ldi	r28, 0x76	; 118
    4582:	d4 e0       	ldi	r29, 0x04	; 4
    4584:	88 83       	st	Y, r24
		timer[1]= eeprom_read_byte((uint8_t*)Countdown2_eep+1);
    4586:	84 e1       	ldi	r24, 0x14	; 20
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    458e:	89 83       	std	Y+1, r24	; 0x01
		timer[2]= eeprom_read_byte((uint8_t*)Countdown2_eep+2);
    4590:	85 e1       	ldi	r24, 0x15	; 21
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    4598:	8a 83       	std	Y+2, r24	; 0x02
	}	
	timer_display();
    459a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	while (user_instruction!=0)
    459e:	36 c0       	rjmp	.+108    	; 0x460c <Counter_down+0xda>
	{
		if (key==ok)
    45a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    45a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    45a8:	47 97       	sbiw	r24, 0x17	; 23
    45aa:	19 f5       	brne	.+70     	; 0x45f2 <Counter_down+0xc0>
		{
			if (TCCR2B==0){
    45ac:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    45b0:	81 11       	cpse	r24, r1
    45b2:	04 c0       	rjmp	.+8      	; 0x45bc <Counter_down+0x8a>
				TCCR2B = 0b00000101; //start timer for seconds
    45b4:	85 e0       	ldi	r24, 0x05	; 5
    45b6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <Counter_down+0x8e>
				}else{
				TCCR2B = 0;
    45bc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
			}
			key=-1;
    45c0:	8f ef       	ldi	r24, 0xFF	; 255
    45c2:	9f ef       	ldi	r25, 0xFF	; 255
    45c4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    45c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Buzzer(1,8600);
    45cc:	68 e9       	ldi	r22, 0x98	; 152
    45ce:	71 e2       	ldi	r23, 0x21	; 33
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    45d6:	2f ef       	ldi	r18, 0xFF	; 255
    45d8:	82 e5       	ldi	r24, 0x52	; 82
    45da:	97 e0       	ldi	r25, 0x07	; 7
    45dc:	21 50       	subi	r18, 0x01	; 1
    45de:	80 40       	sbci	r24, 0x00	; 0
    45e0:	90 40       	sbci	r25, 0x00	; 0
    45e2:	e1 f7       	brne	.-8      	; 0x45dc <Counter_down+0xaa>
    45e4:	00 c0       	rjmp	.+0      	; 0x45e6 <Counter_down+0xb4>
    45e6:	00 00       	nop
			_delay_ms(300);
			Buzzer(0,0);
    45e8:	60 e0       	ldi	r22, 0x00	; 0
    45ea:	70 e0       	ldi	r23, 0x00	; 0
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
		if (Button_Key)
    45f2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Button_Key>
    45f6:	81 11       	cpse	r24, r1
		Buttons_Score();
    45f8:	0e 94 45 22 	call	0x448a	; 0x448a <Buttons_Score>
		if (key==play)
    45fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    4600:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    4604:	8d 97       	sbiw	r24, 0x2d	; 45
    4606:	11 f4       	brne	.+4      	; 0x460c <Counter_down+0xda>
		Change_Timer();
    4608:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <Change_Timer>
		timer[0]= eeprom_read_byte((uint8_t*)Countdown2_eep);
		timer[1]= eeprom_read_byte((uint8_t*)Countdown2_eep+1);
		timer[2]= eeprom_read_byte((uint8_t*)Countdown2_eep+2);
	}	
	timer_display();
	while (user_instruction!=0)
    460c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    4610:	81 11       	cpse	r24, r1
    4612:	c6 cf       	rjmp	.-116    	; 0x45a0 <Counter_down+0x6e>
		if (Button_Key)
		Buttons_Score();
		if (key==play)
		Change_Timer();
	}
	TCCR2B = 0;
    4614:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Buzzer(1,18600);
    4618:	68 ea       	ldi	r22, 0xA8	; 168
    461a:	78 e4       	ldi	r23, 0x48	; 72
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4622:	2f ef       	ldi	r18, 0xFF	; 255
    4624:	82 e5       	ldi	r24, 0x52	; 82
    4626:	97 e0       	ldi	r25, 0x07	; 7
    4628:	21 50       	subi	r18, 0x01	; 1
    462a:	80 40       	sbci	r24, 0x00	; 0
    462c:	90 40       	sbci	r25, 0x00	; 0
    462e:	e1 f7       	brne	.-8      	; 0x4628 <Counter_down+0xf6>
    4630:	00 c0       	rjmp	.+0      	; 0x4632 <Counter_down+0x100>
    4632:	00 00       	nop
	_delay_ms(300);
	Buzzer(0,0);
    4634:	60 e0       	ldi	r22, 0x00	; 0
    4636:	70 e0       	ldi	r23, 0x00	; 0
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
}
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	08 95       	ret

00004644 <Up_counter>:

void Up_counter(void)
{
	key=-1;
    4644:	8f ef       	ldi	r24, 0xFF	; 255
    4646:	9f ef       	ldi	r25, 0xFF	; 255
    4648:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    464c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
	TCNT2 = 0;
    4650:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	timer[0]=0;timer[1]=0;timer[2]=0;
    4654:	e6 e7       	ldi	r30, 0x76	; 118
    4656:	f4 e0       	ldi	r31, 0x04	; 4
    4658:	10 82       	st	Z, r1
    465a:	11 82       	std	Z+1, r1	; 0x01
    465c:	12 82       	std	Z+2, r1	; 0x02
	Timer_blink_on=0x80;
    465e:	80 e8       	ldi	r24, 0x80	; 128
    4660:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <Timer_blink_on>
	timer_display();
    4664:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	while (user_instruction!=0)
    4668:	36 c0       	rjmp	.+108    	; 0x46d6 <Up_counter+0x92>
	{
		if (key==ok)
    466a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    466e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    4672:	47 97       	sbiw	r24, 0x17	; 23
    4674:	19 f5       	brne	.+70     	; 0x46bc <Up_counter+0x78>
		{
			if (TCCR2B==0){
    4676:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    467a:	81 11       	cpse	r24, r1
    467c:	04 c0       	rjmp	.+8      	; 0x4686 <Up_counter+0x42>
				TCCR2B = 0b00000101; //start timer for seconds
    467e:	85 e0       	ldi	r24, 0x05	; 5
    4680:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    4684:	02 c0       	rjmp	.+4      	; 0x468a <Up_counter+0x46>
				//key=-1;		
			}else{
				TCCR2B = 0;
    4686:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
			}	
			key=-1;
    468a:	8f ef       	ldi	r24, 0xFF	; 255
    468c:	9f ef       	ldi	r25, 0xFF	; 255
    468e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    4692:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Buzzer(1,8600);
    4696:	68 e9       	ldi	r22, 0x98	; 152
    4698:	71 e2       	ldi	r23, 0x21	; 33
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    46a0:	2f ef       	ldi	r18, 0xFF	; 255
    46a2:	82 e5       	ldi	r24, 0x52	; 82
    46a4:	97 e0       	ldi	r25, 0x07	; 7
    46a6:	21 50       	subi	r18, 0x01	; 1
    46a8:	80 40       	sbci	r24, 0x00	; 0
    46aa:	90 40       	sbci	r25, 0x00	; 0
    46ac:	e1 f7       	brne	.-8      	; 0x46a6 <Up_counter+0x62>
    46ae:	00 c0       	rjmp	.+0      	; 0x46b0 <Up_counter+0x6c>
    46b0:	00 00       	nop
			_delay_ms(300);
			Buzzer(0,0);
    46b2:	60 e0       	ldi	r22, 0x00	; 0
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
		if (Button_Key)
    46bc:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Button_Key>
    46c0:	81 11       	cpse	r24, r1
		Buttons_Score();
    46c2:	0e 94 45 22 	call	0x448a	; 0x448a <Buttons_Score>
		if (key==play)
    46c6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    46ca:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    46ce:	8d 97       	sbiw	r24, 0x2d	; 45
    46d0:	11 f4       	brne	.+4      	; 0x46d6 <Up_counter+0x92>
		Change_Timer();
    46d2:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <Change_Timer>
	key=-1;
	TCNT2 = 0;
	timer[0]=0;timer[1]=0;timer[2]=0;
	Timer_blink_on=0x80;
	timer_display();
	while (user_instruction!=0)
    46d6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    46da:	81 11       	cpse	r24, r1
    46dc:	c6 cf       	rjmp	.-116    	; 0x466a <Up_counter+0x26>
		if (Button_Key)
		Buttons_Score();
		if (key==play)
		Change_Timer();
	}
	TCCR2B = 0;
    46de:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Buzzer(1,18600);
    46e2:	68 ea       	ldi	r22, 0xA8	; 168
    46e4:	78 e4       	ldi	r23, 0x48	; 72
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    46ec:	2f ef       	ldi	r18, 0xFF	; 255
    46ee:	82 e5       	ldi	r24, 0x52	; 82
    46f0:	97 e0       	ldi	r25, 0x07	; 7
    46f2:	21 50       	subi	r18, 0x01	; 1
    46f4:	80 40       	sbci	r24, 0x00	; 0
    46f6:	90 40       	sbci	r25, 0x00	; 0
    46f8:	e1 f7       	brne	.-8      	; 0x46f2 <Up_counter+0xae>
    46fa:	00 c0       	rjmp	.+0      	; 0x46fc <Up_counter+0xb8>
    46fc:	00 00       	nop
	_delay_ms(300);
	Buzzer(0,0);
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4708:	08 95       	ret

0000470a <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    470a:	99 e2       	ldi	r25, 0x29	; 41
    470c:	88 e1       	ldi	r24, 0x18	; 24
    470e:	0f b6       	in	r0, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	a8 95       	wdr
    4714:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    4718:	0f be       	out	0x3f, r0	; 63
    471a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	chek_timer_alarms();
}

int main() {
	wdt_enable(WDTO_8S);
	DDRE = 0b01000011;
    471e:	83 e4       	ldi	r24, 0x43	; 67
    4720:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000010;
    4722:	82 e0       	ldi	r24, 0x02	; 2
    4724:	8e b9       	out	0x0e, r24	; 14
	PORTB = 0B10010001;
    4726:	81 e9       	ldi	r24, 0x91	; 145
    4728:	85 b9       	out	0x05, r24	; 5
	DDRB = 0b01101001;
    472a:	89 e6       	ldi	r24, 0x69	; 105
    472c:	84 b9       	out	0x04, r24	; 4
	PORTD = 0B11110000;
    472e:	80 ef       	ldi	r24, 0xF0	; 240
    4730:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0b00000000;
    4732:	1a b8       	out	0x0a, r1	; 10
	ADMUX = 0b01100110;
    4734:	86 e6       	ldi	r24, 0x66	; 102
    4736:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11100000;
    473a:	80 ee       	ldi	r24, 0xE0	; 224
    473c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000100;
    4740:	84 e0       	ldi	r24, 0x04	; 4
    4742:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b10111111;
    4746:	8f eb       	ldi	r24, 0xBF	; 191
    4748:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	Digits_disp= eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
    474c:	88 e0       	ldi	r24, 0x08	; 8
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <eeprom_read_byte>
    4754:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
	if (Digits_disp<2 || Digits_disp>MAX_DISPLAY_DIGITS)
    4758:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    475c:	82 30       	cpi	r24, 0x02	; 2
    475e:	24 f0       	brlt	.+8      	; 0x4768 <main+0x5e>
    4760:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    4764:	85 31       	cpi	r24, 0x15	; 21
    4766:	1c f0       	brlt	.+6      	; 0x476e <main+0x64>
	Digits_disp=4;
    4768:	84 e0       	ldi	r24, 0x04	; 4
    476a:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
	Init_MBI();
    476e:	0e 94 23 02 	call	0x446	; 0x446 <Init_MBI>
	Init_RF();
    4772:	0e 94 66 09 	call	0x12cc	; 0x12cc <Init_RF>
	uart0_init(BAUD_PRESCALE);
    4776:	83 e3       	ldi	r24, 0x33	; 51
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	0e 94 fb 07 	call	0xff6	; 0xff6 <uart0_init>
	cli();
    477e:	f8 94       	cli
	photo_sample();
    4780:	0e 94 38 0c 	call	0x1870	; 0x1870 <photo_sample>
	DISPLAY_ON();
    4784:	82 b1       	in	r24, 0x02	; 2
    4786:	8b 7f       	andi	r24, 0xFB	; 251
    4788:	82 b9       	out	0x02, r24	; 2
	DoLEDtest();
    478a:	0e 94 45 02 	call	0x48a	; 0x48a <DoLEDtest>
	RC5_Init();
    478e:	0e 94 2e 03 	call	0x65c	; 0x65c <RC5_Init>
	ds1302_init();
    4792:	0e 94 2b 06 	call	0xc56	; 0xc56 <ds1302_init>
	DDRE |= RED_LED;
    4796:	8d b1       	in	r24, 0x0d	; 13
    4798:	84 60       	ori	r24, 0x04	; 4
    479a:	8d b9       	out	0x0d, r24	; 13
	TCCR0B = 0b00000010;
    479c:	82 e0       	ldi	r24, 0x02	; 2
    479e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1;
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TIMSK2 = 1;
    47a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	ASSR |= 1<<AS2;
    47aa:	e6 eb       	ldi	r30, 0xB6	; 182
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	80 81       	ld	r24, Z
    47b0:	80 62       	ori	r24, 0x20	; 32
    47b2:	80 83       	st	Z, r24
	TCCR3A = 0b01000000;
    47b4:	80 e4       	ldi	r24, 0x40	; 64
    47b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	Buzzer(1,16000);
    47ba:	60 e8       	ldi	r22, 0x80	; 128
    47bc:	7e e3       	ldi	r23, 0x3E	; 62
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    47c4:	2f e7       	ldi	r18, 0x7F	; 127
    47c6:	88 e3       	ldi	r24, 0x38	; 56
    47c8:	91 e0       	ldi	r25, 0x01	; 1
    47ca:	21 50       	subi	r18, 0x01	; 1
    47cc:	80 40       	sbci	r24, 0x00	; 0
    47ce:	90 40       	sbci	r25, 0x00	; 0
    47d0:	e1 f7       	brne	.-8      	; 0x47ca <main+0xc0>
    47d2:	00 c0       	rjmp	.+0      	; 0x47d4 <main+0xca>
    47d4:	00 00       	nop
	_delay_ms(50);
	Buzzer(0,0);
    47d6:	60 e0       	ldi	r22, 0x00	; 0
    47d8:	70 e0       	ldi	r23, 0x00	; 0
    47da:	80 e0       	ldi	r24, 0x00	; 0
    47dc:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
	user_instruction = 0;
    47e0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
	display_init(1);
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	uart0_putc('T');
	uart0_putc('E');
	uart0_putc('S');
	uart0_putc('T');
	*/
	update_score_display();
    47ea:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
	sei();
    47ee:	78 94       	sei
	Display_Out();	
    47f0:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
	
	//---------------------------------------------------------------------------
	for (;;) {
		Game_on=0;
    47f4:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <Game_on>
		while (user_instruction != 0)
    47f8:	50 c0       	rjmp	.+160    	; 0x489a <main+0x190>
		switch (user_instruction) {
    47fa:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <user_instruction>
    47fe:	8e 2f       	mov	r24, r30
    4800:	ee 0f       	add	r30, r30
    4802:	99 0b       	sbc	r25, r25
    4804:	aa 0b       	sbc	r26, r26
    4806:	bb 0b       	sbc	r27, r27
    4808:	fc 01       	movw	r30, r24
    480a:	e1 54       	subi	r30, 0x41	; 65
    480c:	f1 09       	sbc	r31, r1
    480e:	e5 31       	cpi	r30, 0x15	; 21
    4810:	f1 05       	cpc	r31, r1
    4812:	08 f0       	brcs	.+2      	; 0x4816 <main+0x10c>
    4814:	42 c0       	rjmp	.+132    	; 0x489a <main+0x190>
    4816:	e3 5a       	subi	r30, 0xA3	; 163
    4818:	fe 4f       	sbci	r31, 0xFE	; 254
    481a:	0c 94 4d 25 	jmp	0x4a9a	; 0x4a9a <__tablejump2__>
			case ('A'):
				Game_on=1;//Score_home=0;Score_guest=0;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Game_on>
				//display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
				update_score_display();
    4824:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				Counter_down(1);
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	0e 94 99 22 	call	0x4532	; 0x4532 <Counter_down>
				break;
    4830:	34 c0       	rjmp	.+104    	; 0x489a <main+0x190>
			case ('B'):
				Game_on=1;//Score_home=0;Score_guest=0;
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Game_on>
				//display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
				update_score_display();
    4838:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				Counter_down(2);
    483c:	82 e0       	ldi	r24, 0x02	; 2
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0e 94 99 22 	call	0x4532	; 0x4532 <Counter_down>
				break;
    4844:	2a c0       	rjmp	.+84     	; 0x489a <main+0x190>
			case ('U'):
				Game_on=1;//Score_home=0;Score_guest=0;
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Game_on>
				//display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
				update_score_display();
    484c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				Up_counter();
    4850:	0e 94 22 23 	call	0x4644	; 0x4644 <Up_counter>
				break;
    4854:	22 c0       	rjmp	.+68     	; 0x489a <main+0x190>
			case ('S'):
				Set_clock();
    4856:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <Set_clock>
				break;
    485a:	1f c0       	rjmp	.+62     	; 0x489a <main+0x190>
			case ('D'):
				Set_date();
    485c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Set_date>
				break;
    4860:	1c c0       	rjmp	.+56     	; 0x489a <main+0x190>
			case ('O'):
				show_brightness();
    4862:	0e 94 da 16 	call	0x2db4	; 0x2db4 <show_brightness>
				break;
    4866:	19 c0       	rjmp	.+50     	; 0x489a <main+0x190>
			case ('F'):
				F_menu();
    4868:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <F_menu>
				break;
    486c:	16 c0       	rjmp	.+44     	; 0x489a <main+0x190>
			case ('E'):
				FAV_menu();
    486e:	0e 94 23 12 	call	0x2446	; 0x2446 <FAV_menu>
				break;
    4872:	13 c0       	rjmp	.+38     	; 0x489a <main+0x190>
			case ('C'):
				Set_countdown(Set_countdown_bank);
    4874:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    4878:	0e 94 cd 14 	call	0x299a	; 0x299a <Set_countdown>
				if (Set_countdown_bank==2) {
    487c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    4880:	82 30       	cpi	r24, 0x02	; 2
    4882:	29 f4       	brne	.+10     	; 0x488e <main+0x184>
					Set_countdown(Set_countdown_bank);
    4884:	0e 94 cd 14 	call	0x299a	; 0x299a <Set_countdown>
					Set_countdown_bank=0;
    4888:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
    488c:	06 c0       	rjmp	.+12     	; 0x489a <main+0x190>
				}else if (Set_countdown_bank==4)
    488e:	84 30       	cpi	r24, 0x04	; 4
    4890:	21 f4       	brne	.+8      	; 0x489a <main+0x190>
				{
					Set_countdown(Set_countdown_bank);
    4892:	0e 94 cd 14 	call	0x299a	; 0x299a <Set_countdown>
					Set_countdown_bank=0;
    4896:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
	Display_Out();	
	
	//---------------------------------------------------------------------------
	for (;;) {
		Game_on=0;
		while (user_instruction != 0)
    489a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    489e:	81 11       	cpse	r24, r1
    48a0:	ac cf       	rjmp	.-168    	; 0x47fa <main+0xf0>
    48a2:	a8 cf       	rjmp	.-176    	; 0x47f4 <main+0xea>

000048a4 <__floatunsisf>:
    48a4:	e8 94       	clt
    48a6:	09 c0       	rjmp	.+18     	; 0x48ba <__floatsisf+0x12>

000048a8 <__floatsisf>:
    48a8:	97 fb       	bst	r25, 7
    48aa:	3e f4       	brtc	.+14     	; 0x48ba <__floatsisf+0x12>
    48ac:	90 95       	com	r25
    48ae:	80 95       	com	r24
    48b0:	70 95       	com	r23
    48b2:	61 95       	neg	r22
    48b4:	7f 4f       	sbci	r23, 0xFF	; 255
    48b6:	8f 4f       	sbci	r24, 0xFF	; 255
    48b8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ba:	99 23       	and	r25, r25
    48bc:	a9 f0       	breq	.+42     	; 0x48e8 <__floatsisf+0x40>
    48be:	f9 2f       	mov	r31, r25
    48c0:	96 e9       	ldi	r25, 0x96	; 150
    48c2:	bb 27       	eor	r27, r27
    48c4:	93 95       	inc	r25
    48c6:	f6 95       	lsr	r31
    48c8:	87 95       	ror	r24
    48ca:	77 95       	ror	r23
    48cc:	67 95       	ror	r22
    48ce:	b7 95       	ror	r27
    48d0:	f1 11       	cpse	r31, r1
    48d2:	f8 cf       	rjmp	.-16     	; 0x48c4 <__floatsisf+0x1c>
    48d4:	fa f4       	brpl	.+62     	; 0x4914 <__floatsisf+0x6c>
    48d6:	bb 0f       	add	r27, r27
    48d8:	11 f4       	brne	.+4      	; 0x48de <__floatsisf+0x36>
    48da:	60 ff       	sbrs	r22, 0
    48dc:	1b c0       	rjmp	.+54     	; 0x4914 <__floatsisf+0x6c>
    48de:	6f 5f       	subi	r22, 0xFF	; 255
    48e0:	7f 4f       	sbci	r23, 0xFF	; 255
    48e2:	8f 4f       	sbci	r24, 0xFF	; 255
    48e4:	9f 4f       	sbci	r25, 0xFF	; 255
    48e6:	16 c0       	rjmp	.+44     	; 0x4914 <__floatsisf+0x6c>
    48e8:	88 23       	and	r24, r24
    48ea:	11 f0       	breq	.+4      	; 0x48f0 <__floatsisf+0x48>
    48ec:	96 e9       	ldi	r25, 0x96	; 150
    48ee:	11 c0       	rjmp	.+34     	; 0x4912 <__floatsisf+0x6a>
    48f0:	77 23       	and	r23, r23
    48f2:	21 f0       	breq	.+8      	; 0x48fc <__floatsisf+0x54>
    48f4:	9e e8       	ldi	r25, 0x8E	; 142
    48f6:	87 2f       	mov	r24, r23
    48f8:	76 2f       	mov	r23, r22
    48fa:	05 c0       	rjmp	.+10     	; 0x4906 <__floatsisf+0x5e>
    48fc:	66 23       	and	r22, r22
    48fe:	71 f0       	breq	.+28     	; 0x491c <__floatsisf+0x74>
    4900:	96 e8       	ldi	r25, 0x86	; 134
    4902:	86 2f       	mov	r24, r22
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	60 e0       	ldi	r22, 0x00	; 0
    4908:	2a f0       	brmi	.+10     	; 0x4914 <__floatsisf+0x6c>
    490a:	9a 95       	dec	r25
    490c:	66 0f       	add	r22, r22
    490e:	77 1f       	adc	r23, r23
    4910:	88 1f       	adc	r24, r24
    4912:	da f7       	brpl	.-10     	; 0x490a <__floatsisf+0x62>
    4914:	88 0f       	add	r24, r24
    4916:	96 95       	lsr	r25
    4918:	87 95       	ror	r24
    491a:	97 f9       	bld	r25, 7
    491c:	08 95       	ret

0000491e <__mulsf3>:
    491e:	0e 94 a2 24 	call	0x4944	; 0x4944 <__mulsf3x>
    4922:	0c 94 13 25 	jmp	0x4a26	; 0x4a26 <__fp_round>
    4926:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__fp_pscA>
    492a:	38 f0       	brcs	.+14     	; 0x493a <__mulsf3+0x1c>
    492c:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__fp_pscB>
    4930:	20 f0       	brcs	.+8      	; 0x493a <__mulsf3+0x1c>
    4932:	95 23       	and	r25, r21
    4934:	11 f0       	breq	.+4      	; 0x493a <__mulsf3+0x1c>
    4936:	0c 94 fc 24 	jmp	0x49f8	; 0x49f8 <__fp_inf>
    493a:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__fp_nan>
    493e:	11 24       	eor	r1, r1
    4940:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__fp_szero>

00004944 <__mulsf3x>:
    4944:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__fp_split3>
    4948:	70 f3       	brcs	.-36     	; 0x4926 <__mulsf3+0x8>

0000494a <__mulsf3_pse>:
    494a:	95 9f       	mul	r25, r21
    494c:	c1 f3       	breq	.-16     	; 0x493e <__mulsf3+0x20>
    494e:	95 0f       	add	r25, r21
    4950:	50 e0       	ldi	r21, 0x00	; 0
    4952:	55 1f       	adc	r21, r21
    4954:	62 9f       	mul	r22, r18
    4956:	f0 01       	movw	r30, r0
    4958:	72 9f       	mul	r23, r18
    495a:	bb 27       	eor	r27, r27
    495c:	f0 0d       	add	r31, r0
    495e:	b1 1d       	adc	r27, r1
    4960:	63 9f       	mul	r22, r19
    4962:	aa 27       	eor	r26, r26
    4964:	f0 0d       	add	r31, r0
    4966:	b1 1d       	adc	r27, r1
    4968:	aa 1f       	adc	r26, r26
    496a:	64 9f       	mul	r22, r20
    496c:	66 27       	eor	r22, r22
    496e:	b0 0d       	add	r27, r0
    4970:	a1 1d       	adc	r26, r1
    4972:	66 1f       	adc	r22, r22
    4974:	82 9f       	mul	r24, r18
    4976:	22 27       	eor	r18, r18
    4978:	b0 0d       	add	r27, r0
    497a:	a1 1d       	adc	r26, r1
    497c:	62 1f       	adc	r22, r18
    497e:	73 9f       	mul	r23, r19
    4980:	b0 0d       	add	r27, r0
    4982:	a1 1d       	adc	r26, r1
    4984:	62 1f       	adc	r22, r18
    4986:	83 9f       	mul	r24, r19
    4988:	a0 0d       	add	r26, r0
    498a:	61 1d       	adc	r22, r1
    498c:	22 1f       	adc	r18, r18
    498e:	74 9f       	mul	r23, r20
    4990:	33 27       	eor	r19, r19
    4992:	a0 0d       	add	r26, r0
    4994:	61 1d       	adc	r22, r1
    4996:	23 1f       	adc	r18, r19
    4998:	84 9f       	mul	r24, r20
    499a:	60 0d       	add	r22, r0
    499c:	21 1d       	adc	r18, r1
    499e:	82 2f       	mov	r24, r18
    49a0:	76 2f       	mov	r23, r22
    49a2:	6a 2f       	mov	r22, r26
    49a4:	11 24       	eor	r1, r1
    49a6:	9f 57       	subi	r25, 0x7F	; 127
    49a8:	50 40       	sbci	r21, 0x00	; 0
    49aa:	9a f0       	brmi	.+38     	; 0x49d2 <__mulsf3_pse+0x88>
    49ac:	f1 f0       	breq	.+60     	; 0x49ea <__mulsf3_pse+0xa0>
    49ae:	88 23       	and	r24, r24
    49b0:	4a f0       	brmi	.+18     	; 0x49c4 <__mulsf3_pse+0x7a>
    49b2:	ee 0f       	add	r30, r30
    49b4:	ff 1f       	adc	r31, r31
    49b6:	bb 1f       	adc	r27, r27
    49b8:	66 1f       	adc	r22, r22
    49ba:	77 1f       	adc	r23, r23
    49bc:	88 1f       	adc	r24, r24
    49be:	91 50       	subi	r25, 0x01	; 1
    49c0:	50 40       	sbci	r21, 0x00	; 0
    49c2:	a9 f7       	brne	.-22     	; 0x49ae <__mulsf3_pse+0x64>
    49c4:	9e 3f       	cpi	r25, 0xFE	; 254
    49c6:	51 05       	cpc	r21, r1
    49c8:	80 f0       	brcs	.+32     	; 0x49ea <__mulsf3_pse+0xa0>
    49ca:	0c 94 fc 24 	jmp	0x49f8	; 0x49f8 <__fp_inf>
    49ce:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__fp_szero>
    49d2:	5f 3f       	cpi	r21, 0xFF	; 255
    49d4:	e4 f3       	brlt	.-8      	; 0x49ce <__mulsf3_pse+0x84>
    49d6:	98 3e       	cpi	r25, 0xE8	; 232
    49d8:	d4 f3       	brlt	.-12     	; 0x49ce <__mulsf3_pse+0x84>
    49da:	86 95       	lsr	r24
    49dc:	77 95       	ror	r23
    49de:	67 95       	ror	r22
    49e0:	b7 95       	ror	r27
    49e2:	f7 95       	ror	r31
    49e4:	e7 95       	ror	r30
    49e6:	9f 5f       	subi	r25, 0xFF	; 255
    49e8:	c1 f7       	brne	.-16     	; 0x49da <__mulsf3_pse+0x90>
    49ea:	fe 2b       	or	r31, r30
    49ec:	88 0f       	add	r24, r24
    49ee:	91 1d       	adc	r25, r1
    49f0:	96 95       	lsr	r25
    49f2:	87 95       	ror	r24
    49f4:	97 f9       	bld	r25, 7
    49f6:	08 95       	ret

000049f8 <__fp_inf>:
    49f8:	97 f9       	bld	r25, 7
    49fa:	9f 67       	ori	r25, 0x7F	; 127
    49fc:	80 e8       	ldi	r24, 0x80	; 128
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	60 e0       	ldi	r22, 0x00	; 0
    4a02:	08 95       	ret

00004a04 <__fp_nan>:
    4a04:	9f ef       	ldi	r25, 0xFF	; 255
    4a06:	80 ec       	ldi	r24, 0xC0	; 192
    4a08:	08 95       	ret

00004a0a <__fp_pscA>:
    4a0a:	00 24       	eor	r0, r0
    4a0c:	0a 94       	dec	r0
    4a0e:	16 16       	cp	r1, r22
    4a10:	17 06       	cpc	r1, r23
    4a12:	18 06       	cpc	r1, r24
    4a14:	09 06       	cpc	r0, r25
    4a16:	08 95       	ret

00004a18 <__fp_pscB>:
    4a18:	00 24       	eor	r0, r0
    4a1a:	0a 94       	dec	r0
    4a1c:	12 16       	cp	r1, r18
    4a1e:	13 06       	cpc	r1, r19
    4a20:	14 06       	cpc	r1, r20
    4a22:	05 06       	cpc	r0, r21
    4a24:	08 95       	ret

00004a26 <__fp_round>:
    4a26:	09 2e       	mov	r0, r25
    4a28:	03 94       	inc	r0
    4a2a:	00 0c       	add	r0, r0
    4a2c:	11 f4       	brne	.+4      	; 0x4a32 <__fp_round+0xc>
    4a2e:	88 23       	and	r24, r24
    4a30:	52 f0       	brmi	.+20     	; 0x4a46 <__fp_round+0x20>
    4a32:	bb 0f       	add	r27, r27
    4a34:	40 f4       	brcc	.+16     	; 0x4a46 <__fp_round+0x20>
    4a36:	bf 2b       	or	r27, r31
    4a38:	11 f4       	brne	.+4      	; 0x4a3e <__fp_round+0x18>
    4a3a:	60 ff       	sbrs	r22, 0
    4a3c:	04 c0       	rjmp	.+8      	; 0x4a46 <__fp_round+0x20>
    4a3e:	6f 5f       	subi	r22, 0xFF	; 255
    4a40:	7f 4f       	sbci	r23, 0xFF	; 255
    4a42:	8f 4f       	sbci	r24, 0xFF	; 255
    4a44:	9f 4f       	sbci	r25, 0xFF	; 255
    4a46:	08 95       	ret

00004a48 <__fp_split3>:
    4a48:	57 fd       	sbrc	r21, 7
    4a4a:	90 58       	subi	r25, 0x80	; 128
    4a4c:	44 0f       	add	r20, r20
    4a4e:	55 1f       	adc	r21, r21
    4a50:	59 f0       	breq	.+22     	; 0x4a68 <__fp_splitA+0x10>
    4a52:	5f 3f       	cpi	r21, 0xFF	; 255
    4a54:	71 f0       	breq	.+28     	; 0x4a72 <__fp_splitA+0x1a>
    4a56:	47 95       	ror	r20

00004a58 <__fp_splitA>:
    4a58:	88 0f       	add	r24, r24
    4a5a:	97 fb       	bst	r25, 7
    4a5c:	99 1f       	adc	r25, r25
    4a5e:	61 f0       	breq	.+24     	; 0x4a78 <__fp_splitA+0x20>
    4a60:	9f 3f       	cpi	r25, 0xFF	; 255
    4a62:	79 f0       	breq	.+30     	; 0x4a82 <__fp_splitA+0x2a>
    4a64:	87 95       	ror	r24
    4a66:	08 95       	ret
    4a68:	12 16       	cp	r1, r18
    4a6a:	13 06       	cpc	r1, r19
    4a6c:	14 06       	cpc	r1, r20
    4a6e:	55 1f       	adc	r21, r21
    4a70:	f2 cf       	rjmp	.-28     	; 0x4a56 <__fp_split3+0xe>
    4a72:	46 95       	lsr	r20
    4a74:	f1 df       	rcall	.-30     	; 0x4a58 <__fp_splitA>
    4a76:	08 c0       	rjmp	.+16     	; 0x4a88 <__fp_splitA+0x30>
    4a78:	16 16       	cp	r1, r22
    4a7a:	17 06       	cpc	r1, r23
    4a7c:	18 06       	cpc	r1, r24
    4a7e:	99 1f       	adc	r25, r25
    4a80:	f1 cf       	rjmp	.-30     	; 0x4a64 <__fp_splitA+0xc>
    4a82:	86 95       	lsr	r24
    4a84:	71 05       	cpc	r23, r1
    4a86:	61 05       	cpc	r22, r1
    4a88:	08 94       	sec
    4a8a:	08 95       	ret

00004a8c <__fp_zero>:
    4a8c:	e8 94       	clt

00004a8e <__fp_szero>:
    4a8e:	bb 27       	eor	r27, r27
    4a90:	66 27       	eor	r22, r22
    4a92:	77 27       	eor	r23, r23
    4a94:	cb 01       	movw	r24, r22
    4a96:	97 f9       	bld	r25, 7
    4a98:	08 95       	ret

00004a9a <__tablejump2__>:
    4a9a:	ee 0f       	add	r30, r30
    4a9c:	ff 1f       	adc	r31, r31
    4a9e:	05 90       	lpm	r0, Z+
    4aa0:	f4 91       	lpm	r31, Z
    4aa2:	e0 2d       	mov	r30, r0
    4aa4:	09 94       	ijmp

00004aa6 <__umulhisi3>:
    4aa6:	a2 9f       	mul	r26, r18
    4aa8:	b0 01       	movw	r22, r0
    4aaa:	b3 9f       	mul	r27, r19
    4aac:	c0 01       	movw	r24, r0
    4aae:	a3 9f       	mul	r26, r19
    4ab0:	70 0d       	add	r23, r0
    4ab2:	81 1d       	adc	r24, r1
    4ab4:	11 24       	eor	r1, r1
    4ab6:	91 1d       	adc	r25, r1
    4ab8:	b2 9f       	mul	r27, r18
    4aba:	70 0d       	add	r23, r0
    4abc:	81 1d       	adc	r24, r1
    4abe:	11 24       	eor	r1, r1
    4ac0:	91 1d       	adc	r25, r1
    4ac2:	08 95       	ret

00004ac4 <dtostrf>:
    4ac4:	ef 92       	push	r14
    4ac6:	0f 93       	push	r16
    4ac8:	1f 93       	push	r17
    4aca:	cf 93       	push	r28
    4acc:	df 93       	push	r29
    4ace:	e8 01       	movw	r28, r16
    4ad0:	47 fd       	sbrc	r20, 7
    4ad2:	02 c0       	rjmp	.+4      	; 0x4ad8 <dtostrf+0x14>
    4ad4:	34 e0       	ldi	r19, 0x04	; 4
    4ad6:	01 c0       	rjmp	.+2      	; 0x4ada <dtostrf+0x16>
    4ad8:	34 e1       	ldi	r19, 0x14	; 20
    4ada:	04 2e       	mov	r0, r20
    4adc:	00 0c       	add	r0, r0
    4ade:	55 0b       	sbc	r21, r21
    4ae0:	57 ff       	sbrs	r21, 7
    4ae2:	03 c0       	rjmp	.+6      	; 0x4aea <dtostrf+0x26>
    4ae4:	51 95       	neg	r21
    4ae6:	41 95       	neg	r20
    4ae8:	51 09       	sbc	r21, r1
    4aea:	e3 2e       	mov	r14, r19
    4aec:	02 2f       	mov	r16, r18
    4aee:	24 2f       	mov	r18, r20
    4af0:	ae 01       	movw	r20, r28
    4af2:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <dtoa_prf>
    4af6:	ce 01       	movw	r24, r28
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ef 90       	pop	r14
    4b02:	08 95       	ret

00004b04 <__itoa_ncheck>:
    4b04:	bb 27       	eor	r27, r27
    4b06:	4a 30       	cpi	r20, 0x0A	; 10
    4b08:	31 f4       	brne	.+12     	; 0x4b16 <__itoa_ncheck+0x12>
    4b0a:	99 23       	and	r25, r25
    4b0c:	22 f4       	brpl	.+8      	; 0x4b16 <__itoa_ncheck+0x12>
    4b0e:	bd e2       	ldi	r27, 0x2D	; 45
    4b10:	90 95       	com	r25
    4b12:	81 95       	neg	r24
    4b14:	9f 4f       	sbci	r25, 0xFF	; 255
    4b16:	0c 94 8e 25 	jmp	0x4b1c	; 0x4b1c <__utoa_common>

00004b1a <__utoa_ncheck>:
    4b1a:	bb 27       	eor	r27, r27

00004b1c <__utoa_common>:
    4b1c:	fb 01       	movw	r30, r22
    4b1e:	55 27       	eor	r21, r21
    4b20:	aa 27       	eor	r26, r26
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	aa 1f       	adc	r26, r26
    4b28:	a4 17       	cp	r26, r20
    4b2a:	10 f0       	brcs	.+4      	; 0x4b30 <__utoa_common+0x14>
    4b2c:	a4 1b       	sub	r26, r20
    4b2e:	83 95       	inc	r24
    4b30:	50 51       	subi	r21, 0x10	; 16
    4b32:	b9 f7       	brne	.-18     	; 0x4b22 <__utoa_common+0x6>
    4b34:	a0 5d       	subi	r26, 0xD0	; 208
    4b36:	aa 33       	cpi	r26, 0x3A	; 58
    4b38:	08 f0       	brcs	.+2      	; 0x4b3c <__utoa_common+0x20>
    4b3a:	a9 5d       	subi	r26, 0xD9	; 217
    4b3c:	a1 93       	st	Z+, r26
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	79 f7       	brne	.-34     	; 0x4b20 <__utoa_common+0x4>
    4b42:	b1 11       	cpse	r27, r1
    4b44:	b1 93       	st	Z+, r27
    4b46:	11 92       	st	Z+, r1
    4b48:	cb 01       	movw	r24, r22
    4b4a:	0c 94 d9 27 	jmp	0x4fb2	; 0x4fb2 <strrev>

00004b4e <dtoa_prf>:
    4b4e:	a9 e0       	ldi	r26, 0x09	; 9
    4b50:	b0 e0       	ldi	r27, 0x00	; 0
    4b52:	ed ea       	ldi	r30, 0xAD	; 173
    4b54:	f5 e2       	ldi	r31, 0x25	; 37
    4b56:	0c 94 05 28 	jmp	0x500a	; 0x500a <__prologue_saves__+0xc>
    4b5a:	6a 01       	movw	r12, r20
    4b5c:	12 2f       	mov	r17, r18
    4b5e:	b0 2e       	mov	r11, r16
    4b60:	2b e3       	ldi	r18, 0x3B	; 59
    4b62:	20 17       	cp	r18, r16
    4b64:	20 f0       	brcs	.+8      	; 0x4b6e <dtoa_prf+0x20>
    4b66:	ff 24       	eor	r15, r15
    4b68:	f3 94       	inc	r15
    4b6a:	f0 0e       	add	r15, r16
    4b6c:	02 c0       	rjmp	.+4      	; 0x4b72 <dtoa_prf+0x24>
    4b6e:	2c e3       	ldi	r18, 0x3C	; 60
    4b70:	f2 2e       	mov	r15, r18
    4b72:	0f 2d       	mov	r16, r15
    4b74:	27 e0       	ldi	r18, 0x07	; 7
    4b76:	ae 01       	movw	r20, r28
    4b78:	4f 5f       	subi	r20, 0xFF	; 255
    4b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7c:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__ftoa_engine>
    4b80:	bc 01       	movw	r22, r24
    4b82:	49 81       	ldd	r20, Y+1	; 0x01
    4b84:	84 2f       	mov	r24, r20
    4b86:	89 70       	andi	r24, 0x09	; 9
    4b88:	81 30       	cpi	r24, 0x01	; 1
    4b8a:	31 f0       	breq	.+12     	; 0x4b98 <dtoa_prf+0x4a>
    4b8c:	e1 fc       	sbrc	r14, 1
    4b8e:	06 c0       	rjmp	.+12     	; 0x4b9c <dtoa_prf+0x4e>
    4b90:	e0 fe       	sbrs	r14, 0
    4b92:	06 c0       	rjmp	.+12     	; 0x4ba0 <dtoa_prf+0x52>
    4b94:	90 e2       	ldi	r25, 0x20	; 32
    4b96:	05 c0       	rjmp	.+10     	; 0x4ba2 <dtoa_prf+0x54>
    4b98:	9d e2       	ldi	r25, 0x2D	; 45
    4b9a:	03 c0       	rjmp	.+6      	; 0x4ba2 <dtoa_prf+0x54>
    4b9c:	9b e2       	ldi	r25, 0x2B	; 43
    4b9e:	01 c0       	rjmp	.+2      	; 0x4ba2 <dtoa_prf+0x54>
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	5e 2d       	mov	r21, r14
    4ba4:	50 71       	andi	r21, 0x10	; 16
    4ba6:	43 ff       	sbrs	r20, 3
    4ba8:	3c c0       	rjmp	.+120    	; 0x4c22 <dtoa_prf+0xd4>
    4baa:	91 11       	cpse	r25, r1
    4bac:	02 c0       	rjmp	.+4      	; 0x4bb2 <dtoa_prf+0x64>
    4bae:	83 e0       	ldi	r24, 0x03	; 3
    4bb0:	01 c0       	rjmp	.+2      	; 0x4bb4 <dtoa_prf+0x66>
    4bb2:	84 e0       	ldi	r24, 0x04	; 4
    4bb4:	81 17       	cp	r24, r17
    4bb6:	18 f4       	brcc	.+6      	; 0x4bbe <dtoa_prf+0x70>
    4bb8:	21 2f       	mov	r18, r17
    4bba:	28 1b       	sub	r18, r24
    4bbc:	01 c0       	rjmp	.+2      	; 0x4bc0 <dtoa_prf+0x72>
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	51 11       	cpse	r21, r1
    4bc2:	0b c0       	rjmp	.+22     	; 0x4bda <dtoa_prf+0x8c>
    4bc4:	f6 01       	movw	r30, r12
    4bc6:	82 2f       	mov	r24, r18
    4bc8:	30 e2       	ldi	r19, 0x20	; 32
    4bca:	88 23       	and	r24, r24
    4bcc:	19 f0       	breq	.+6      	; 0x4bd4 <dtoa_prf+0x86>
    4bce:	31 93       	st	Z+, r19
    4bd0:	81 50       	subi	r24, 0x01	; 1
    4bd2:	fb cf       	rjmp	.-10     	; 0x4bca <dtoa_prf+0x7c>
    4bd4:	c2 0e       	add	r12, r18
    4bd6:	d1 1c       	adc	r13, r1
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	99 23       	and	r25, r25
    4bdc:	29 f0       	breq	.+10     	; 0x4be8 <dtoa_prf+0x9a>
    4bde:	d6 01       	movw	r26, r12
    4be0:	9c 93       	st	X, r25
    4be2:	f6 01       	movw	r30, r12
    4be4:	31 96       	adiw	r30, 0x01	; 1
    4be6:	6f 01       	movw	r12, r30
    4be8:	c6 01       	movw	r24, r12
    4bea:	03 96       	adiw	r24, 0x03	; 3
    4bec:	e2 fe       	sbrs	r14, 2
    4bee:	0a c0       	rjmp	.+20     	; 0x4c04 <dtoa_prf+0xb6>
    4bf0:	3e e4       	ldi	r19, 0x4E	; 78
    4bf2:	d6 01       	movw	r26, r12
    4bf4:	3c 93       	st	X, r19
    4bf6:	41 e4       	ldi	r20, 0x41	; 65
    4bf8:	11 96       	adiw	r26, 0x01	; 1
    4bfa:	4c 93       	st	X, r20
    4bfc:	11 97       	sbiw	r26, 0x01	; 1
    4bfe:	12 96       	adiw	r26, 0x02	; 2
    4c00:	3c 93       	st	X, r19
    4c02:	06 c0       	rjmp	.+12     	; 0x4c10 <dtoa_prf+0xc2>
    4c04:	3e e6       	ldi	r19, 0x6E	; 110
    4c06:	f6 01       	movw	r30, r12
    4c08:	30 83       	st	Z, r19
    4c0a:	41 e6       	ldi	r20, 0x61	; 97
    4c0c:	41 83       	std	Z+1, r20	; 0x01
    4c0e:	32 83       	std	Z+2, r19	; 0x02
    4c10:	fc 01       	movw	r30, r24
    4c12:	32 2f       	mov	r19, r18
    4c14:	40 e2       	ldi	r20, 0x20	; 32
    4c16:	33 23       	and	r19, r19
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <dtoa_prf+0xce>
    4c1a:	42 c0       	rjmp	.+132    	; 0x4ca0 <dtoa_prf+0x152>
    4c1c:	41 93       	st	Z+, r20
    4c1e:	31 50       	subi	r19, 0x01	; 1
    4c20:	fa cf       	rjmp	.-12     	; 0x4c16 <dtoa_prf+0xc8>
    4c22:	42 ff       	sbrs	r20, 2
    4c24:	44 c0       	rjmp	.+136    	; 0x4cae <dtoa_prf+0x160>
    4c26:	91 11       	cpse	r25, r1
    4c28:	02 c0       	rjmp	.+4      	; 0x4c2e <dtoa_prf+0xe0>
    4c2a:	83 e0       	ldi	r24, 0x03	; 3
    4c2c:	01 c0       	rjmp	.+2      	; 0x4c30 <dtoa_prf+0xe2>
    4c2e:	84 e0       	ldi	r24, 0x04	; 4
    4c30:	81 17       	cp	r24, r17
    4c32:	18 f4       	brcc	.+6      	; 0x4c3a <dtoa_prf+0xec>
    4c34:	21 2f       	mov	r18, r17
    4c36:	28 1b       	sub	r18, r24
    4c38:	01 c0       	rjmp	.+2      	; 0x4c3c <dtoa_prf+0xee>
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	51 11       	cpse	r21, r1
    4c3e:	0b c0       	rjmp	.+22     	; 0x4c56 <dtoa_prf+0x108>
    4c40:	f6 01       	movw	r30, r12
    4c42:	82 2f       	mov	r24, r18
    4c44:	30 e2       	ldi	r19, 0x20	; 32
    4c46:	88 23       	and	r24, r24
    4c48:	19 f0       	breq	.+6      	; 0x4c50 <dtoa_prf+0x102>
    4c4a:	31 93       	st	Z+, r19
    4c4c:	81 50       	subi	r24, 0x01	; 1
    4c4e:	fb cf       	rjmp	.-10     	; 0x4c46 <dtoa_prf+0xf8>
    4c50:	c2 0e       	add	r12, r18
    4c52:	d1 1c       	adc	r13, r1
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	99 23       	and	r25, r25
    4c58:	29 f0       	breq	.+10     	; 0x4c64 <dtoa_prf+0x116>
    4c5a:	d6 01       	movw	r26, r12
    4c5c:	9c 93       	st	X, r25
    4c5e:	f6 01       	movw	r30, r12
    4c60:	31 96       	adiw	r30, 0x01	; 1
    4c62:	6f 01       	movw	r12, r30
    4c64:	c6 01       	movw	r24, r12
    4c66:	03 96       	adiw	r24, 0x03	; 3
    4c68:	e2 fe       	sbrs	r14, 2
    4c6a:	0b c0       	rjmp	.+22     	; 0x4c82 <dtoa_prf+0x134>
    4c6c:	39 e4       	ldi	r19, 0x49	; 73
    4c6e:	d6 01       	movw	r26, r12
    4c70:	3c 93       	st	X, r19
    4c72:	3e e4       	ldi	r19, 0x4E	; 78
    4c74:	11 96       	adiw	r26, 0x01	; 1
    4c76:	3c 93       	st	X, r19
    4c78:	11 97       	sbiw	r26, 0x01	; 1
    4c7a:	36 e4       	ldi	r19, 0x46	; 70
    4c7c:	12 96       	adiw	r26, 0x02	; 2
    4c7e:	3c 93       	st	X, r19
    4c80:	07 c0       	rjmp	.+14     	; 0x4c90 <dtoa_prf+0x142>
    4c82:	39 e6       	ldi	r19, 0x69	; 105
    4c84:	f6 01       	movw	r30, r12
    4c86:	30 83       	st	Z, r19
    4c88:	3e e6       	ldi	r19, 0x6E	; 110
    4c8a:	31 83       	std	Z+1, r19	; 0x01
    4c8c:	36 e6       	ldi	r19, 0x66	; 102
    4c8e:	32 83       	std	Z+2, r19	; 0x02
    4c90:	fc 01       	movw	r30, r24
    4c92:	32 2f       	mov	r19, r18
    4c94:	40 e2       	ldi	r20, 0x20	; 32
    4c96:	33 23       	and	r19, r19
    4c98:	19 f0       	breq	.+6      	; 0x4ca0 <dtoa_prf+0x152>
    4c9a:	41 93       	st	Z+, r20
    4c9c:	31 50       	subi	r19, 0x01	; 1
    4c9e:	fb cf       	rjmp	.-10     	; 0x4c96 <dtoa_prf+0x148>
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	e2 0f       	add	r30, r18
    4ca4:	f1 1d       	adc	r31, r1
    4ca6:	10 82       	st	Z, r1
    4ca8:	8e ef       	ldi	r24, 0xFE	; 254
    4caa:	9f ef       	ldi	r25, 0xFF	; 255
    4cac:	a6 c0       	rjmp	.+332    	; 0x4dfa <dtoa_prf+0x2ac>
    4cae:	21 e0       	ldi	r18, 0x01	; 1
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	91 11       	cpse	r25, r1
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <dtoa_prf+0x16c>
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	16 16       	cp	r1, r22
    4cbc:	17 06       	cpc	r1, r23
    4cbe:	1c f4       	brge	.+6      	; 0x4cc6 <dtoa_prf+0x178>
    4cc0:	fb 01       	movw	r30, r22
    4cc2:	31 96       	adiw	r30, 0x01	; 1
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <dtoa_prf+0x17c>
    4cc6:	e1 e0       	ldi	r30, 0x01	; 1
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	2e 0f       	add	r18, r30
    4ccc:	3f 1f       	adc	r19, r31
    4cce:	bb 20       	and	r11, r11
    4cd0:	21 f0       	breq	.+8      	; 0x4cda <dtoa_prf+0x18c>
    4cd2:	eb 2d       	mov	r30, r11
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	31 96       	adiw	r30, 0x01	; 1
    4cd8:	02 c0       	rjmp	.+4      	; 0x4cde <dtoa_prf+0x190>
    4cda:	e0 e0       	ldi	r30, 0x00	; 0
    4cdc:	f0 e0       	ldi	r31, 0x00	; 0
    4cde:	2e 0f       	add	r18, r30
    4ce0:	3f 1f       	adc	r19, r31
    4ce2:	e1 2f       	mov	r30, r17
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	2e 17       	cp	r18, r30
    4ce8:	3f 07       	cpc	r19, r31
    4cea:	1c f4       	brge	.+6      	; 0x4cf2 <dtoa_prf+0x1a4>
    4cec:	12 1b       	sub	r17, r18
    4cee:	21 2f       	mov	r18, r17
    4cf0:	01 c0       	rjmp	.+2      	; 0x4cf4 <dtoa_prf+0x1a6>
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	8e 2d       	mov	r24, r14
    4cf6:	88 71       	andi	r24, 0x18	; 24
    4cf8:	59 f4       	brne	.+22     	; 0x4d10 <dtoa_prf+0x1c2>
    4cfa:	f6 01       	movw	r30, r12
    4cfc:	82 2f       	mov	r24, r18
    4cfe:	30 e2       	ldi	r19, 0x20	; 32
    4d00:	88 23       	and	r24, r24
    4d02:	19 f0       	breq	.+6      	; 0x4d0a <dtoa_prf+0x1bc>
    4d04:	31 93       	st	Z+, r19
    4d06:	81 50       	subi	r24, 0x01	; 1
    4d08:	fb cf       	rjmp	.-10     	; 0x4d00 <dtoa_prf+0x1b2>
    4d0a:	c2 0e       	add	r12, r18
    4d0c:	d1 1c       	adc	r13, r1
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	99 23       	and	r25, r25
    4d12:	29 f0       	breq	.+10     	; 0x4d1e <dtoa_prf+0x1d0>
    4d14:	d6 01       	movw	r26, r12
    4d16:	9c 93       	st	X, r25
    4d18:	f6 01       	movw	r30, r12
    4d1a:	31 96       	adiw	r30, 0x01	; 1
    4d1c:	6f 01       	movw	r12, r30
    4d1e:	51 11       	cpse	r21, r1
    4d20:	0b c0       	rjmp	.+22     	; 0x4d38 <dtoa_prf+0x1ea>
    4d22:	f6 01       	movw	r30, r12
    4d24:	82 2f       	mov	r24, r18
    4d26:	90 e3       	ldi	r25, 0x30	; 48
    4d28:	88 23       	and	r24, r24
    4d2a:	19 f0       	breq	.+6      	; 0x4d32 <dtoa_prf+0x1e4>
    4d2c:	91 93       	st	Z+, r25
    4d2e:	81 50       	subi	r24, 0x01	; 1
    4d30:	fb cf       	rjmp	.-10     	; 0x4d28 <dtoa_prf+0x1da>
    4d32:	c2 0e       	add	r12, r18
    4d34:	d1 1c       	adc	r13, r1
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	0f 2d       	mov	r16, r15
    4d3a:	06 0f       	add	r16, r22
    4d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d3e:	34 2f       	mov	r19, r20
    4d40:	30 71       	andi	r19, 0x10	; 16
    4d42:	44 ff       	sbrs	r20, 4
    4d44:	03 c0       	rjmp	.+6      	; 0x4d4c <dtoa_prf+0x1fe>
    4d46:	91 33       	cpi	r25, 0x31	; 49
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <dtoa_prf+0x1fe>
    4d4a:	01 50       	subi	r16, 0x01	; 1
    4d4c:	10 16       	cp	r1, r16
    4d4e:	24 f4       	brge	.+8      	; 0x4d58 <dtoa_prf+0x20a>
    4d50:	09 30       	cpi	r16, 0x09	; 9
    4d52:	18 f0       	brcs	.+6      	; 0x4d5a <dtoa_prf+0x20c>
    4d54:	08 e0       	ldi	r16, 0x08	; 8
    4d56:	01 c0       	rjmp	.+2      	; 0x4d5a <dtoa_prf+0x20c>
    4d58:	01 e0       	ldi	r16, 0x01	; 1
    4d5a:	ab 01       	movw	r20, r22
    4d5c:	77 ff       	sbrs	r23, 7
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <dtoa_prf+0x216>
    4d60:	40 e0       	ldi	r20, 0x00	; 0
    4d62:	50 e0       	ldi	r21, 0x00	; 0
    4d64:	fb 01       	movw	r30, r22
    4d66:	e4 1b       	sub	r30, r20
    4d68:	f5 0b       	sbc	r31, r21
    4d6a:	a1 e0       	ldi	r26, 0x01	; 1
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
    4d6e:	ac 0f       	add	r26, r28
    4d70:	bd 1f       	adc	r27, r29
    4d72:	ea 0f       	add	r30, r26
    4d74:	fb 1f       	adc	r31, r27
    4d76:	8e e2       	ldi	r24, 0x2E	; 46
    4d78:	a8 2e       	mov	r10, r24
    4d7a:	4b 01       	movw	r8, r22
    4d7c:	80 1a       	sub	r8, r16
    4d7e:	91 08       	sbc	r9, r1
    4d80:	0b 2d       	mov	r16, r11
    4d82:	10 e0       	ldi	r17, 0x00	; 0
    4d84:	11 95       	neg	r17
    4d86:	01 95       	neg	r16
    4d88:	11 09       	sbc	r17, r1
    4d8a:	4f 3f       	cpi	r20, 0xFF	; 255
    4d8c:	bf ef       	ldi	r27, 0xFF	; 255
    4d8e:	5b 07       	cpc	r21, r27
    4d90:	21 f4       	brne	.+8      	; 0x4d9a <dtoa_prf+0x24c>
    4d92:	d6 01       	movw	r26, r12
    4d94:	ac 92       	st	X, r10
    4d96:	11 96       	adiw	r26, 0x01	; 1
    4d98:	6d 01       	movw	r12, r26
    4d9a:	64 17       	cp	r22, r20
    4d9c:	75 07       	cpc	r23, r21
    4d9e:	2c f0       	brlt	.+10     	; 0x4daa <dtoa_prf+0x25c>
    4da0:	84 16       	cp	r8, r20
    4da2:	95 06       	cpc	r9, r21
    4da4:	14 f4       	brge	.+4      	; 0x4daa <dtoa_prf+0x25c>
    4da6:	81 81       	ldd	r24, Z+1	; 0x01
    4da8:	01 c0       	rjmp	.+2      	; 0x4dac <dtoa_prf+0x25e>
    4daa:	80 e3       	ldi	r24, 0x30	; 48
    4dac:	41 50       	subi	r20, 0x01	; 1
    4dae:	51 09       	sbc	r21, r1
    4db0:	31 96       	adiw	r30, 0x01	; 1
    4db2:	d6 01       	movw	r26, r12
    4db4:	11 96       	adiw	r26, 0x01	; 1
    4db6:	7d 01       	movw	r14, r26
    4db8:	40 17       	cp	r20, r16
    4dba:	51 07       	cpc	r21, r17
    4dbc:	24 f0       	brlt	.+8      	; 0x4dc6 <dtoa_prf+0x278>
    4dbe:	d6 01       	movw	r26, r12
    4dc0:	8c 93       	st	X, r24
    4dc2:	67 01       	movw	r12, r14
    4dc4:	e2 cf       	rjmp	.-60     	; 0x4d8a <dtoa_prf+0x23c>
    4dc6:	64 17       	cp	r22, r20
    4dc8:	75 07       	cpc	r23, r21
    4dca:	39 f4       	brne	.+14     	; 0x4dda <dtoa_prf+0x28c>
    4dcc:	96 33       	cpi	r25, 0x36	; 54
    4dce:	20 f4       	brcc	.+8      	; 0x4dd8 <dtoa_prf+0x28a>
    4dd0:	95 33       	cpi	r25, 0x35	; 53
    4dd2:	19 f4       	brne	.+6      	; 0x4dda <dtoa_prf+0x28c>
    4dd4:	31 11       	cpse	r19, r1
    4dd6:	01 c0       	rjmp	.+2      	; 0x4dda <dtoa_prf+0x28c>
    4dd8:	81 e3       	ldi	r24, 0x31	; 49
    4dda:	f6 01       	movw	r30, r12
    4ddc:	80 83       	st	Z, r24
    4dde:	f7 01       	movw	r30, r14
    4de0:	82 2f       	mov	r24, r18
    4de2:	90 e2       	ldi	r25, 0x20	; 32
    4de4:	88 23       	and	r24, r24
    4de6:	19 f0       	breq	.+6      	; 0x4dee <dtoa_prf+0x2a0>
    4de8:	91 93       	st	Z+, r25
    4dea:	81 50       	subi	r24, 0x01	; 1
    4dec:	fb cf       	rjmp	.-10     	; 0x4de4 <dtoa_prf+0x296>
    4dee:	f7 01       	movw	r30, r14
    4df0:	e2 0f       	add	r30, r18
    4df2:	f1 1d       	adc	r31, r1
    4df4:	10 82       	st	Z, r1
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	29 96       	adiw	r28, 0x09	; 9
    4dfc:	ec e0       	ldi	r30, 0x0C	; 12
    4dfe:	0c 94 21 28 	jmp	0x5042	; 0x5042 <__epilogue_restores__+0xc>

00004e02 <__ftoa_engine>:
    4e02:	28 30       	cpi	r18, 0x08	; 8
    4e04:	08 f0       	brcs	.+2      	; 0x4e08 <__ftoa_engine+0x6>
    4e06:	27 e0       	ldi	r18, 0x07	; 7
    4e08:	33 27       	eor	r19, r19
    4e0a:	da 01       	movw	r26, r20
    4e0c:	99 0f       	add	r25, r25
    4e0e:	31 1d       	adc	r19, r1
    4e10:	87 fd       	sbrc	r24, 7
    4e12:	91 60       	ori	r25, 0x01	; 1
    4e14:	00 96       	adiw	r24, 0x00	; 0
    4e16:	61 05       	cpc	r22, r1
    4e18:	71 05       	cpc	r23, r1
    4e1a:	39 f4       	brne	.+14     	; 0x4e2a <__ftoa_engine+0x28>
    4e1c:	32 60       	ori	r19, 0x02	; 2
    4e1e:	2e 5f       	subi	r18, 0xFE	; 254
    4e20:	3d 93       	st	X+, r19
    4e22:	30 e3       	ldi	r19, 0x30	; 48
    4e24:	2a 95       	dec	r18
    4e26:	e1 f7       	brne	.-8      	; 0x4e20 <__ftoa_engine+0x1e>
    4e28:	08 95       	ret
    4e2a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e2c:	30 f0       	brcs	.+12     	; 0x4e3a <__ftoa_engine+0x38>
    4e2e:	80 38       	cpi	r24, 0x80	; 128
    4e30:	71 05       	cpc	r23, r1
    4e32:	61 05       	cpc	r22, r1
    4e34:	09 f0       	breq	.+2      	; 0x4e38 <__ftoa_engine+0x36>
    4e36:	3c 5f       	subi	r19, 0xFC	; 252
    4e38:	3c 5f       	subi	r19, 0xFC	; 252
    4e3a:	3d 93       	st	X+, r19
    4e3c:	91 30       	cpi	r25, 0x01	; 1
    4e3e:	08 f0       	brcs	.+2      	; 0x4e42 <__ftoa_engine+0x40>
    4e40:	80 68       	ori	r24, 0x80	; 128
    4e42:	91 1d       	adc	r25, r1
    4e44:	df 93       	push	r29
    4e46:	cf 93       	push	r28
    4e48:	1f 93       	push	r17
    4e4a:	0f 93       	push	r16
    4e4c:	ff 92       	push	r15
    4e4e:	ef 92       	push	r14
    4e50:	19 2f       	mov	r17, r25
    4e52:	98 7f       	andi	r25, 0xF8	; 248
    4e54:	96 95       	lsr	r25
    4e56:	e9 2f       	mov	r30, r25
    4e58:	96 95       	lsr	r25
    4e5a:	96 95       	lsr	r25
    4e5c:	e9 0f       	add	r30, r25
    4e5e:	ff 27       	eor	r31, r31
    4e60:	e2 5c       	subi	r30, 0xC2	; 194
    4e62:	fc 4f       	sbci	r31, 0xFC	; 252
    4e64:	99 27       	eor	r25, r25
    4e66:	33 27       	eor	r19, r19
    4e68:	ee 24       	eor	r14, r14
    4e6a:	ff 24       	eor	r15, r15
    4e6c:	a7 01       	movw	r20, r14
    4e6e:	e7 01       	movw	r28, r14
    4e70:	05 90       	lpm	r0, Z+
    4e72:	08 94       	sec
    4e74:	07 94       	ror	r0
    4e76:	28 f4       	brcc	.+10     	; 0x4e82 <__ftoa_engine+0x80>
    4e78:	36 0f       	add	r19, r22
    4e7a:	e7 1e       	adc	r14, r23
    4e7c:	f8 1e       	adc	r15, r24
    4e7e:	49 1f       	adc	r20, r25
    4e80:	51 1d       	adc	r21, r1
    4e82:	66 0f       	add	r22, r22
    4e84:	77 1f       	adc	r23, r23
    4e86:	88 1f       	adc	r24, r24
    4e88:	99 1f       	adc	r25, r25
    4e8a:	06 94       	lsr	r0
    4e8c:	a1 f7       	brne	.-24     	; 0x4e76 <__ftoa_engine+0x74>
    4e8e:	05 90       	lpm	r0, Z+
    4e90:	07 94       	ror	r0
    4e92:	28 f4       	brcc	.+10     	; 0x4e9e <__ftoa_engine+0x9c>
    4e94:	e7 0e       	add	r14, r23
    4e96:	f8 1e       	adc	r15, r24
    4e98:	49 1f       	adc	r20, r25
    4e9a:	56 1f       	adc	r21, r22
    4e9c:	c1 1d       	adc	r28, r1
    4e9e:	77 0f       	add	r23, r23
    4ea0:	88 1f       	adc	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	66 1f       	adc	r22, r22
    4ea6:	06 94       	lsr	r0
    4ea8:	a1 f7       	brne	.-24     	; 0x4e92 <__ftoa_engine+0x90>
    4eaa:	05 90       	lpm	r0, Z+
    4eac:	07 94       	ror	r0
    4eae:	28 f4       	brcc	.+10     	; 0x4eba <__ftoa_engine+0xb8>
    4eb0:	f8 0e       	add	r15, r24
    4eb2:	49 1f       	adc	r20, r25
    4eb4:	56 1f       	adc	r21, r22
    4eb6:	c7 1f       	adc	r28, r23
    4eb8:	d1 1d       	adc	r29, r1
    4eba:	88 0f       	add	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	66 1f       	adc	r22, r22
    4ec0:	77 1f       	adc	r23, r23
    4ec2:	06 94       	lsr	r0
    4ec4:	a1 f7       	brne	.-24     	; 0x4eae <__ftoa_engine+0xac>
    4ec6:	05 90       	lpm	r0, Z+
    4ec8:	07 94       	ror	r0
    4eca:	20 f4       	brcc	.+8      	; 0x4ed4 <__ftoa_engine+0xd2>
    4ecc:	49 0f       	add	r20, r25
    4ece:	56 1f       	adc	r21, r22
    4ed0:	c7 1f       	adc	r28, r23
    4ed2:	d8 1f       	adc	r29, r24
    4ed4:	99 0f       	add	r25, r25
    4ed6:	66 1f       	adc	r22, r22
    4ed8:	77 1f       	adc	r23, r23
    4eda:	88 1f       	adc	r24, r24
    4edc:	06 94       	lsr	r0
    4ede:	a9 f7       	brne	.-22     	; 0x4eca <__ftoa_engine+0xc8>
    4ee0:	84 91       	lpm	r24, Z
    4ee2:	10 95       	com	r17
    4ee4:	17 70       	andi	r17, 0x07	; 7
    4ee6:	41 f0       	breq	.+16     	; 0x4ef8 <__ftoa_engine+0xf6>
    4ee8:	d6 95       	lsr	r29
    4eea:	c7 95       	ror	r28
    4eec:	57 95       	ror	r21
    4eee:	47 95       	ror	r20
    4ef0:	f7 94       	ror	r15
    4ef2:	e7 94       	ror	r14
    4ef4:	1a 95       	dec	r17
    4ef6:	c1 f7       	brne	.-16     	; 0x4ee8 <__ftoa_engine+0xe6>
    4ef8:	e4 ee       	ldi	r30, 0xE4	; 228
    4efa:	f2 e0       	ldi	r31, 0x02	; 2
    4efc:	68 94       	set
    4efe:	15 90       	lpm	r1, Z+
    4f00:	15 91       	lpm	r17, Z+
    4f02:	35 91       	lpm	r19, Z+
    4f04:	65 91       	lpm	r22, Z+
    4f06:	95 91       	lpm	r25, Z+
    4f08:	05 90       	lpm	r0, Z+
    4f0a:	7f e2       	ldi	r23, 0x2F	; 47
    4f0c:	73 95       	inc	r23
    4f0e:	e1 18       	sub	r14, r1
    4f10:	f1 0a       	sbc	r15, r17
    4f12:	43 0b       	sbc	r20, r19
    4f14:	56 0b       	sbc	r21, r22
    4f16:	c9 0b       	sbc	r28, r25
    4f18:	d0 09       	sbc	r29, r0
    4f1a:	c0 f7       	brcc	.-16     	; 0x4f0c <__ftoa_engine+0x10a>
    4f1c:	e1 0c       	add	r14, r1
    4f1e:	f1 1e       	adc	r15, r17
    4f20:	43 1f       	adc	r20, r19
    4f22:	56 1f       	adc	r21, r22
    4f24:	c9 1f       	adc	r28, r25
    4f26:	d0 1d       	adc	r29, r0
    4f28:	7e f4       	brtc	.+30     	; 0x4f48 <__ftoa_engine+0x146>
    4f2a:	70 33       	cpi	r23, 0x30	; 48
    4f2c:	11 f4       	brne	.+4      	; 0x4f32 <__ftoa_engine+0x130>
    4f2e:	8a 95       	dec	r24
    4f30:	e6 cf       	rjmp	.-52     	; 0x4efe <__ftoa_engine+0xfc>
    4f32:	e8 94       	clt
    4f34:	01 50       	subi	r16, 0x01	; 1
    4f36:	30 f0       	brcs	.+12     	; 0x4f44 <__ftoa_engine+0x142>
    4f38:	08 0f       	add	r16, r24
    4f3a:	0a f4       	brpl	.+2      	; 0x4f3e <__ftoa_engine+0x13c>
    4f3c:	00 27       	eor	r16, r16
    4f3e:	02 17       	cp	r16, r18
    4f40:	08 f4       	brcc	.+2      	; 0x4f44 <__ftoa_engine+0x142>
    4f42:	20 2f       	mov	r18, r16
    4f44:	23 95       	inc	r18
    4f46:	02 2f       	mov	r16, r18
    4f48:	7a 33       	cpi	r23, 0x3A	; 58
    4f4a:	28 f0       	brcs	.+10     	; 0x4f56 <__ftoa_engine+0x154>
    4f4c:	79 e3       	ldi	r23, 0x39	; 57
    4f4e:	7d 93       	st	X+, r23
    4f50:	2a 95       	dec	r18
    4f52:	e9 f7       	brne	.-6      	; 0x4f4e <__ftoa_engine+0x14c>
    4f54:	10 c0       	rjmp	.+32     	; 0x4f76 <__ftoa_engine+0x174>
    4f56:	7d 93       	st	X+, r23
    4f58:	2a 95       	dec	r18
    4f5a:	89 f6       	brne	.-94     	; 0x4efe <__ftoa_engine+0xfc>
    4f5c:	06 94       	lsr	r0
    4f5e:	97 95       	ror	r25
    4f60:	67 95       	ror	r22
    4f62:	37 95       	ror	r19
    4f64:	17 95       	ror	r17
    4f66:	17 94       	ror	r1
    4f68:	e1 18       	sub	r14, r1
    4f6a:	f1 0a       	sbc	r15, r17
    4f6c:	43 0b       	sbc	r20, r19
    4f6e:	56 0b       	sbc	r21, r22
    4f70:	c9 0b       	sbc	r28, r25
    4f72:	d0 09       	sbc	r29, r0
    4f74:	98 f0       	brcs	.+38     	; 0x4f9c <__ftoa_engine+0x19a>
    4f76:	23 95       	inc	r18
    4f78:	7e 91       	ld	r23, -X
    4f7a:	73 95       	inc	r23
    4f7c:	7a 33       	cpi	r23, 0x3A	; 58
    4f7e:	08 f0       	brcs	.+2      	; 0x4f82 <__ftoa_engine+0x180>
    4f80:	70 e3       	ldi	r23, 0x30	; 48
    4f82:	7c 93       	st	X, r23
    4f84:	20 13       	cpse	r18, r16
    4f86:	b8 f7       	brcc	.-18     	; 0x4f76 <__ftoa_engine+0x174>
    4f88:	7e 91       	ld	r23, -X
    4f8a:	70 61       	ori	r23, 0x10	; 16
    4f8c:	7d 93       	st	X+, r23
    4f8e:	30 f0       	brcs	.+12     	; 0x4f9c <__ftoa_engine+0x19a>
    4f90:	83 95       	inc	r24
    4f92:	71 e3       	ldi	r23, 0x31	; 49
    4f94:	7d 93       	st	X+, r23
    4f96:	70 e3       	ldi	r23, 0x30	; 48
    4f98:	2a 95       	dec	r18
    4f9a:	e1 f7       	brne	.-8      	; 0x4f94 <__ftoa_engine+0x192>
    4f9c:	11 24       	eor	r1, r1
    4f9e:	ef 90       	pop	r14
    4fa0:	ff 90       	pop	r15
    4fa2:	0f 91       	pop	r16
    4fa4:	1f 91       	pop	r17
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	99 27       	eor	r25, r25
    4fac:	87 fd       	sbrc	r24, 7
    4fae:	90 95       	com	r25
    4fb0:	08 95       	ret

00004fb2 <strrev>:
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	67 2f       	mov	r22, r23
    4fb8:	71 91       	ld	r23, Z+
    4fba:	77 23       	and	r23, r23
    4fbc:	e1 f7       	brne	.-8      	; 0x4fb6 <strrev+0x4>
    4fbe:	32 97       	sbiw	r30, 0x02	; 2
    4fc0:	04 c0       	rjmp	.+8      	; 0x4fca <strrev+0x18>
    4fc2:	7c 91       	ld	r23, X
    4fc4:	6d 93       	st	X+, r22
    4fc6:	70 83       	st	Z, r23
    4fc8:	62 91       	ld	r22, -Z
    4fca:	ae 17       	cp	r26, r30
    4fcc:	bf 07       	cpc	r27, r31
    4fce:	c8 f3       	brcs	.-14     	; 0x4fc2 <strrev+0x10>
    4fd0:	08 95       	ret

00004fd2 <eeprom_read_byte>:
    4fd2:	f9 99       	sbic	0x1f, 1	; 31
    4fd4:	fe cf       	rjmp	.-4      	; 0x4fd2 <eeprom_read_byte>
    4fd6:	92 bd       	out	0x22, r25	; 34
    4fd8:	81 bd       	out	0x21, r24	; 33
    4fda:	f8 9a       	sbi	0x1f, 0	; 31
    4fdc:	99 27       	eor	r25, r25
    4fde:	80 b5       	in	r24, 0x20	; 32
    4fe0:	08 95       	ret

00004fe2 <eeprom_write_byte>:
    4fe2:	26 2f       	mov	r18, r22

00004fe4 <eeprom_write_r18>:
    4fe4:	f9 99       	sbic	0x1f, 1	; 31
    4fe6:	fe cf       	rjmp	.-4      	; 0x4fe4 <eeprom_write_r18>
    4fe8:	1f ba       	out	0x1f, r1	; 31
    4fea:	92 bd       	out	0x22, r25	; 34
    4fec:	81 bd       	out	0x21, r24	; 33
    4fee:	20 bd       	out	0x20, r18	; 32
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	fa 9a       	sbi	0x1f, 2	; 31
    4ff6:	f9 9a       	sbi	0x1f, 1	; 31
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	01 96       	adiw	r24, 0x01	; 1
    4ffc:	08 95       	ret

00004ffe <__prologue_saves__>:
    4ffe:	2f 92       	push	r2
    5000:	3f 92       	push	r3
    5002:	4f 92       	push	r4
    5004:	5f 92       	push	r5
    5006:	6f 92       	push	r6
    5008:	7f 92       	push	r7
    500a:	8f 92       	push	r8
    500c:	9f 92       	push	r9
    500e:	af 92       	push	r10
    5010:	bf 92       	push	r11
    5012:	cf 92       	push	r12
    5014:	df 92       	push	r13
    5016:	ef 92       	push	r14
    5018:	ff 92       	push	r15
    501a:	0f 93       	push	r16
    501c:	1f 93       	push	r17
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
    5022:	cd b7       	in	r28, 0x3d	; 61
    5024:	de b7       	in	r29, 0x3e	; 62
    5026:	ca 1b       	sub	r28, r26
    5028:	db 0b       	sbc	r29, r27
    502a:	0f b6       	in	r0, 0x3f	; 63
    502c:	f8 94       	cli
    502e:	de bf       	out	0x3e, r29	; 62
    5030:	0f be       	out	0x3f, r0	; 63
    5032:	cd bf       	out	0x3d, r28	; 61
    5034:	09 94       	ijmp

00005036 <__epilogue_restores__>:
    5036:	2a 88       	ldd	r2, Y+18	; 0x12
    5038:	39 88       	ldd	r3, Y+17	; 0x11
    503a:	48 88       	ldd	r4, Y+16	; 0x10
    503c:	5f 84       	ldd	r5, Y+15	; 0x0f
    503e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5040:	7d 84       	ldd	r7, Y+13	; 0x0d
    5042:	8c 84       	ldd	r8, Y+12	; 0x0c
    5044:	9b 84       	ldd	r9, Y+11	; 0x0b
    5046:	aa 84       	ldd	r10, Y+10	; 0x0a
    5048:	b9 84       	ldd	r11, Y+9	; 0x09
    504a:	c8 84       	ldd	r12, Y+8	; 0x08
    504c:	df 80       	ldd	r13, Y+7	; 0x07
    504e:	ee 80       	ldd	r14, Y+6	; 0x06
    5050:	fd 80       	ldd	r15, Y+5	; 0x05
    5052:	0c 81       	ldd	r16, Y+4	; 0x04
    5054:	1b 81       	ldd	r17, Y+3	; 0x03
    5056:	aa 81       	ldd	r26, Y+2	; 0x02
    5058:	b9 81       	ldd	r27, Y+1	; 0x01
    505a:	ce 0f       	add	r28, r30
    505c:	d1 1d       	adc	r29, r1
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	f8 94       	cli
    5062:	de bf       	out	0x3e, r29	; 62
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	cd bf       	out	0x3d, r28	; 61
    5068:	ed 01       	movw	r28, r26
    506a:	08 95       	ret

0000506c <_exit>:
    506c:	f8 94       	cli

0000506e <__stop_program>:
    506e:	ff cf       	rjmp	.-2      	; 0x506e <__stop_program>
