
Scoreboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000050d0  00005184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050d0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040c  0080010e  0080010e  00005192  2**0
                  ALLOC
  3 .eeprom       0000001d  00810000  00810000  00005192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000051af  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000051e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000388  00000000  00000000  00005220  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005673  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ecb  00000000  00000000  0000ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000426f  00000000  00000000  0000bae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c60  00000000  00000000  0000fd58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011b2  00000000  00000000  000109b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004501  00000000  00000000  00011b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000368  00000000  00000000  0001606b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 02 	jmp	0x408	; 0x408 <__ctors_end>
       4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
       8:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
       c:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__vector_3>
      10:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      14:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      18:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      1c:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <__vector_7>
      20:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      24:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      28:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      2c:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__vector_11>
      30:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      34:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      38:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      3c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      40:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      44:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      48:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__vector_18>
      4c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      50:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__vector_20>
      54:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__vector_21>
      58:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_22>
      5c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      60:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      64:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      68:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      6c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      70:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_28>
      74:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_29>
      78:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_30>
      7c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      80:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      84:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      88:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      8c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      90:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      94:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      98:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      9c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      a0:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      a4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      a8:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      ac:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      b0:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      b4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      b8:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__vector_46>
      bc:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      c0:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      c4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      c8:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      cc:	91 03       	fmuls	r17, r17
      ce:	91 03       	fmuls	r17, r17
      d0:	93 03       	fmuls	r17, r19
      d2:	95 03       	fmuls	r17, r21
      d4:	9e 03       	fmulsu	r17, r22
      d6:	9e 03       	fmulsu	r17, r22
      d8:	91 03       	fmuls	r17, r17
      da:	9e 03       	fmulsu	r17, r22
      dc:	9e 03       	fmulsu	r17, r22
      de:	9e 03       	fmulsu	r17, r22
      e0:	9e 03       	fmulsu	r17, r22
      e2:	9e 03       	fmulsu	r17, r22
      e4:	9e 03       	fmulsu	r17, r22
      e6:	9e 03       	fmulsu	r17, r22
      e8:	9e 03       	fmulsu	r17, r22
      ea:	9e 03       	fmulsu	r17, r22
      ec:	a0 03       	fmuls	r18, r16
      ee:	9e 03       	fmulsu	r17, r22
      f0:	9e 03       	fmulsu	r17, r22
      f2:	97 03       	fmuls	r17, r23
      f4:	9e 03       	fmulsu	r17, r22
      f6:	9e 03       	fmulsu	r17, r22
      f8:	99 03       	fmulsu	r17, r17
      fa:	9e 03       	fmulsu	r17, r22
      fc:	9e 03       	fmulsu	r17, r22
      fe:	9e 03       	fmulsu	r17, r22
     100:	9e 03       	fmulsu	r17, r22
     102:	9e 03       	fmulsu	r17, r22
     104:	9e 03       	fmulsu	r17, r22
     106:	9e 03       	fmulsu	r17, r22
     108:	9e 03       	fmulsu	r17, r22
     10a:	9e 03       	fmulsu	r17, r22
     10c:	9e 03       	fmulsu	r17, r22
     10e:	9e 03       	fmulsu	r17, r22
     110:	9e 03       	fmulsu	r17, r22
     112:	9e 03       	fmulsu	r17, r22
     114:	9e 03       	fmulsu	r17, r22
     116:	9e 03       	fmulsu	r17, r22
     118:	9e 03       	fmulsu	r17, r22
     11a:	9e 03       	fmulsu	r17, r22
     11c:	9e 03       	fmulsu	r17, r22
     11e:	9e 03       	fmulsu	r17, r22
     120:	9e 03       	fmulsu	r17, r22
     122:	9e 03       	fmulsu	r17, r22
     124:	9e 03       	fmulsu	r17, r22
     126:	9e 03       	fmulsu	r17, r22
     128:	9e 03       	fmulsu	r17, r22
     12a:	9e 03       	fmulsu	r17, r22
     12c:	a0 03       	fmuls	r18, r16
     12e:	9e 03       	fmulsu	r17, r22
     130:	9e 03       	fmulsu	r17, r22
     132:	9e 03       	fmulsu	r17, r22
     134:	9e 03       	fmulsu	r17, r22
     136:	9e 03       	fmulsu	r17, r22
     138:	9e 03       	fmulsu	r17, r22
     13a:	9e 03       	fmulsu	r17, r22
     13c:	9e 03       	fmulsu	r17, r22
     13e:	9e 03       	fmulsu	r17, r22
     140:	9e 03       	fmulsu	r17, r22
     142:	9e 03       	fmulsu	r17, r22
     144:	9e 03       	fmulsu	r17, r22
     146:	9e 03       	fmulsu	r17, r22
     148:	9e 03       	fmulsu	r17, r22
     14a:	9b 03       	fmulsu	r17, r19
     14c:	94 17       	cp	r25, r20
     14e:	eb 1c       	adc	r14, r11
     150:	eb 1c       	adc	r14, r11
     152:	94 19       	sub	r25, r4
     154:	4e 18       	sub	r4, r14
     156:	81 18       	sub	r8, r1
     158:	b4 18       	sub	r11, r4
     15a:	eb 1c       	adc	r14, r11
     15c:	f3 19       	sub	r31, r3
     15e:	eb 1c       	adc	r14, r11
     160:	eb 1c       	adc	r14, r11
     162:	eb 1c       	adc	r14, r11
     164:	eb 1c       	adc	r14, r11
     166:	eb 1c       	adc	r14, r11
     168:	eb 1c       	adc	r14, r11
     16a:	fd 17       	cp	r31, r29
     16c:	24 18       	sub	r2, r4
     16e:	d3 17       	cp	r29, r19
     170:	eb 1c       	adc	r14, r11
     172:	eb 1c       	adc	r14, r11
     174:	eb 1c       	adc	r14, r11
     176:	eb 1c       	adc	r14, r11
     178:	e1 1c       	adc	r14, r1
     17a:	13 19       	sub	r17, r3
     17c:	59 19       	sub	r21, r9
     17e:	eb 1c       	adc	r14, r11
     180:	eb 1c       	adc	r14, r11
     182:	eb 1c       	adc	r14, r11
     184:	eb 1c       	adc	r14, r11
     186:	eb 1c       	adc	r14, r11
     188:	eb 1c       	adc	r14, r11
     18a:	1d 1a       	sub	r1, r29
     18c:	3d 1b       	sub	r19, r29
     18e:	eb 18       	sub	r14, r11
     190:	eb 1c       	adc	r14, r11
     192:	06 1c       	adc	r0, r6
     194:	40 1c       	adc	r4, r0
     196:	76 1c       	adc	r7, r6
     198:	ac 1c       	adc	r10, r12
     19a:	be 19       	sub	r27, r14
     19c:	eb 1c       	adc	r14, r11
     19e:	eb 1c       	adc	r14, r11
     1a0:	eb 1c       	adc	r14, r11
     1a2:	eb 1c       	adc	r14, r11
     1a4:	eb 1c       	adc	r14, r11
     1a6:	eb 1c       	adc	r14, r11
     1a8:	eb 1c       	adc	r14, r11
     1aa:	eb 1c       	adc	r14, r11
     1ac:	eb 1c       	adc	r14, r11
     1ae:	eb 1c       	adc	r14, r11
     1b0:	eb 1c       	adc	r14, r11
     1b2:	eb 1c       	adc	r14, r11
     1b4:	eb 1c       	adc	r14, r11
     1b6:	eb 1c       	adc	r14, r11
     1b8:	eb 1c       	adc	r14, r11
     1ba:	eb 1c       	adc	r14, r11
     1bc:	eb 1c       	adc	r14, r11
     1be:	eb 1c       	adc	r14, r11
     1c0:	eb 1c       	adc	r14, r11
     1c2:	eb 1c       	adc	r14, r11
     1c4:	eb 1c       	adc	r14, r11
     1c6:	eb 1c       	adc	r14, r11
     1c8:	eb 1c       	adc	r14, r11
     1ca:	eb 1c       	adc	r14, r11
     1cc:	eb 1c       	adc	r14, r11
     1ce:	eb 1c       	adc	r14, r11
     1d0:	eb 1c       	adc	r14, r11
     1d2:	eb 1c       	adc	r14, r11
     1d4:	eb 1c       	adc	r14, r11
     1d6:	eb 1c       	adc	r14, r11
     1d8:	eb 1c       	adc	r14, r11
     1da:	eb 1c       	adc	r14, r11
     1dc:	eb 1c       	adc	r14, r11
     1de:	eb 1c       	adc	r14, r11
     1e0:	eb 1c       	adc	r14, r11
     1e2:	eb 1c       	adc	r14, r11
     1e4:	eb 1c       	adc	r14, r11
     1e6:	eb 1c       	adc	r14, r11
     1e8:	eb 1c       	adc	r14, r11
     1ea:	eb 1c       	adc	r14, r11
     1ec:	eb 1c       	adc	r14, r11
     1ee:	eb 1c       	adc	r14, r11
     1f0:	eb 1c       	adc	r14, r11
     1f2:	eb 1c       	adc	r14, r11
     1f4:	eb 1c       	adc	r14, r11
     1f6:	eb 1c       	adc	r14, r11
     1f8:	eb 1c       	adc	r14, r11
     1fa:	eb 1c       	adc	r14, r11
     1fc:	eb 1c       	adc	r14, r11
     1fe:	eb 1c       	adc	r14, r11
     200:	eb 1c       	adc	r14, r11
     202:	eb 1c       	adc	r14, r11
     204:	eb 1c       	adc	r14, r11
     206:	eb 1c       	adc	r14, r11
     208:	eb 1c       	adc	r14, r11
     20a:	eb 1c       	adc	r14, r11
     20c:	6b 1a       	sub	r6, r27
     20e:	9f 1a       	sub	r9, r31
     210:	d4 1a       	sub	r13, r20
     212:	08 1b       	sub	r16, r24
     214:	70 1b       	sub	r23, r16
     216:	a2 1b       	sub	r26, r18
     218:	d4 1b       	sub	r29, r20
     21a:	1a 20       	and	r1, r10
     21c:	9c 20       	and	r9, r12
     21e:	9c 20       	and	r9, r12
     220:	9c 20       	and	r9, r12
     222:	9c 20       	and	r9, r12
     224:	65 1f       	adc	r22, r21
     226:	9c 20       	and	r9, r12
     228:	9c 20       	and	r9, r12
     22a:	9c 20       	and	r9, r12
     22c:	9c 20       	and	r9, r12
     22e:	9c 20       	and	r9, r12
     230:	9c 20       	and	r9, r12
     232:	9c 20       	and	r9, r12
     234:	9c 20       	and	r9, r12
     236:	9c 20       	and	r9, r12
     238:	9c 20       	and	r9, r12
     23a:	9c 20       	and	r9, r12
     23c:	9c 20       	and	r9, r12
     23e:	9c 20       	and	r9, r12
     240:	9c 20       	and	r9, r12
     242:	9c 20       	and	r9, r12
     244:	9c 20       	and	r9, r12
     246:	9c 20       	and	r9, r12
     248:	9c 20       	and	r9, r12
     24a:	b5 1f       	adc	r27, r21
     24c:	9c 20       	and	r9, r12
     24e:	9c 20       	and	r9, r12
     250:	9c 20       	and	r9, r12
     252:	9c 20       	and	r9, r12
     254:	9c 20       	and	r9, r12
     256:	9c 20       	and	r9, r12
     258:	29 1f       	adc	r18, r25
     25a:	9c 20       	and	r9, r12
     25c:	3d 1f       	adc	r19, r29
     25e:	df 1f       	adc	r29, r31
     260:	9c 20       	and	r9, r12
     262:	17 1f       	adc	r17, r23
     264:	0e 20       	and	r0, r14
     266:	9c 20       	and	r9, r12
     268:	9c 20       	and	r9, r12
     26a:	9c 20       	and	r9, r12
     26c:	9c 20       	and	r9, r12
     26e:	9c 20       	and	r9, r12
     270:	9c 20       	and	r9, r12
     272:	9c 20       	and	r9, r12
     274:	9c 20       	and	r9, r12
     276:	8d 1f       	adc	r24, r29
     278:	a1 1f       	adc	r26, r17
     27a:	9c 20       	and	r9, r12
     27c:	9c 20       	and	r9, r12
     27e:	51 1f       	adc	r21, r17
     280:	9c 20       	and	r9, r12
     282:	79 1f       	adc	r23, r25
     284:	79 20       	and	r7, r9
     286:	85 20       	and	r8, r5
     288:	91 20       	and	r9, r1
     28a:	9c 20       	and	r9, r12
     28c:	9c 20       	and	r9, r12
     28e:	9c 20       	and	r9, r12
     290:	9c 20       	and	r9, r12
     292:	9c 20       	and	r9, r12
     294:	9c 20       	and	r9, r12
     296:	3f 20       	and	r3, r15
     298:	4d 20       	and	r4, r13
     29a:	9c 20       	and	r9, r12
     29c:	9c 20       	and	r9, r12
     29e:	9c 20       	and	r9, r12
     2a0:	9c 20       	and	r9, r12
     2a2:	9c 20       	and	r9, r12
     2a4:	9c 20       	and	r9, r12
     2a6:	9c 20       	and	r9, r12
     2a8:	9c 20       	and	r9, r12
     2aa:	9c 20       	and	r9, r12
     2ac:	9c 20       	and	r9, r12
     2ae:	9c 20       	and	r9, r12
     2b0:	9c 20       	and	r9, r12
     2b2:	9c 20       	and	r9, r12
     2b4:	9c 20       	and	r9, r12
     2b6:	5c 20       	and	r5, r12
     2b8:	6a 20       	and	r6, r10
     2ba:	3f 24       	eor	r3, r15
     2bc:	49 24       	eor	r4, r9
     2be:	6a 24       	eor	r6, r10
     2c0:	5e 24       	eor	r5, r14
     2c2:	67 24       	eor	r6, r7
     2c4:	64 24       	eor	r6, r4
     2c6:	7d 24       	eor	r7, r13
     2c8:	7d 24       	eor	r7, r13
     2ca:	7d 24       	eor	r7, r13
     2cc:	7d 24       	eor	r7, r13
     2ce:	7d 24       	eor	r7, r13
     2d0:	7d 24       	eor	r7, r13
     2d2:	7d 24       	eor	r7, r13
     2d4:	7d 24       	eor	r7, r13
     2d6:	61 24       	eor	r6, r1
     2d8:	7d 24       	eor	r7, r13
     2da:	7d 24       	eor	r7, r13
     2dc:	7d 24       	eor	r7, r13
     2de:	5b 24       	eor	r5, r11
     2e0:	7d 24       	eor	r7, r13
     2e2:	53 24       	eor	r5, r3

000002e4 <__trampolines_end>:
     2e4:	00 40       	sbci	r16, 0x00	; 0
     2e6:	7a 10       	cpse	r7, r10
     2e8:	f3 5a       	subi	r31, 0xA3	; 163
     2ea:	00 a0       	ldd	r0, Z+32	; 0x20
     2ec:	72 4e       	sbci	r23, 0xE2	; 226
     2ee:	18 09       	sbc	r17, r8
     2f0:	00 10       	cpse	r0, r0
     2f2:	a5 d4       	rcall	.+2378   	; 0xc3e <DS18x20_TemperatureValue+0x12a>
     2f4:	e8 00       	.word	0x00e8	; ????
     2f6:	00 e8       	ldi	r16, 0x80	; 128
     2f8:	76 48       	sbci	r23, 0x86	; 134
     2fa:	17 00       	.word	0x0017	; ????
     2fc:	00 e4       	ldi	r16, 0x40	; 64
     2fe:	0b 54       	subi	r16, 0x4B	; 75
     300:	02 00       	.word	0x0002	; ????
     302:	00 ca       	rjmp	.-3072   	; 0xfffff704 <__eeprom_end+0xff7ef6e7>
     304:	9a 3b       	cpi	r25, 0xBA	; 186
     306:	00 00       	nop
     308:	00 e1       	ldi	r16, 0x10	; 16
     30a:	f5 05       	cpc	r31, r5
     30c:	00 00       	nop
     30e:	80 96       	adiw	r24, 0x20	; 32
     310:	98 00       	.word	0x0098	; ????
     312:	00 00       	nop
     314:	40 42       	sbci	r20, 0x20	; 32
     316:	0f 00       	.word	0x000f	; ????
     318:	00 00       	nop
     31a:	a0 86       	std	Z+8, r10	; 0x08
     31c:	01 00       	.word	0x0001	; ????
     31e:	00 00       	nop
     320:	10 27       	eor	r17, r16
     322:	00 00       	nop
     324:	00 00       	nop
     326:	e8 03       	fmulsu	r22, r16
     328:	00 00       	nop
     32a:	00 00       	nop
     32c:	64 00       	.word	0x0064	; ????
     32e:	00 00       	nop
     330:	00 00       	nop
     332:	0a 00       	.word	0x000a	; ????
     334:	00 00       	nop
     336:	00 00       	nop
     338:	01 00       	.word	0x0001	; ????
     33a:	00 00       	nop
     33c:	00 00       	nop
     33e:	2c 76       	andi	r18, 0x6C	; 108
     340:	d8 88       	ldd	r13, Y+16	; 0x10
     342:	dc 67       	ori	r29, 0x7C	; 124
     344:	4f 08       	sbc	r4, r15
     346:	23 df       	rcall	.-442    	; 0x18e <__SREG__+0x14f>
     348:	c1 df       	rcall	.-126    	; 0x2cc <__SREG__+0x28d>
     34a:	ae 59       	subi	r26, 0x9E	; 158
     34c:	e1 b1       	in	r30, 0x01	; 1
     34e:	b7 96       	adiw	r30, 0x27	; 39
     350:	e5 e3       	ldi	r30, 0x35	; 53
     352:	e4 53       	subi	r30, 0x34	; 52
     354:	c6 3a       	cpi	r28, 0xA6	; 166
     356:	e6 51       	subi	r30, 0x16	; 22
     358:	99 76       	andi	r25, 0x69	; 105
     35a:	96 e8       	ldi	r25, 0x86	; 134
     35c:	e6 c2       	rjmp	.+1484   	; 0x92a <DS18x20_ReadROM+0x1a>
     35e:	84 26       	eor	r8, r20
     360:	eb 89       	ldd	r30, Y+19	; 0x13
     362:	8c 9b       	sbis	0x11, 4	; 17
     364:	62 ed       	ldi	r22, 0xD2	; 210
     366:	40 7c       	andi	r20, 0xC0	; 192
     368:	6f fc       	.word	0xfc6f	; ????
     36a:	ef bc       	out	0x2f, r14	; 47
     36c:	9c 9f       	mul	r25, r28
     36e:	40 f2       	brcs	.-112    	; 0x300 <__trampolines_end+0x1c>
     370:	ba a5       	ldd	r27, Y+42	; 0x2a
     372:	6f a5       	ldd	r22, Y+47	; 0x2f
     374:	f4 90       	lpm	r15, Z
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	2a f7       	brpl	.-54     	; 0x344 <__trampolines_end+0x60>
     37a:	5c 93       	st	X, r21
     37c:	6b 6c       	ori	r22, 0xCB	; 203
     37e:	f9 67       	ori	r31, 0x79	; 121
     380:	6d c1       	rjmp	.+730    	; 0x65c <RC5_Init>
     382:	1b fc       	.word	0xfc1b	; ????
     384:	e0 e4       	ldi	r30, 0x40	; 64
     386:	0d 47       	sbci	r16, 0x7D	; 125
     388:	fe f5       	brtc	.+126    	; 0x408 <__ctors_end>
     38a:	20 e6       	ldi	r18, 0x60	; 96
     38c:	b5 00       	.word	0x00b5	; ????
     38e:	d0 ed       	ldi	r29, 0xD0	; 208
     390:	90 2e       	mov	r9, r16
     392:	03 00       	.word	0x0003	; ????
     394:	94 35       	cpi	r25, 0x54	; 84
     396:	77 05       	cpc	r23, r7
     398:	00 80       	ld	r0, Z
     39a:	84 1e       	adc	r8, r20
     39c:	08 00       	.word	0x0008	; ????
     39e:	00 20       	and	r0, r0
     3a0:	4e 0a       	sbc	r4, r30
     3a2:	00 00       	nop
     3a4:	00 c8       	rjmp	.-4096   	; 0xfffff3a6 <__eeprom_end+0xff7ef389>
     3a6:	0c 33       	cpi	r16, 0x3C	; 60
     3a8:	33 33       	cpi	r19, 0x33	; 51
     3aa:	33 0f       	add	r19, r19
     3ac:	98 6e       	ori	r25, 0xE8	; 232
     3ae:	12 83       	std	Z+2, r17	; 0x02
     3b0:	11 41       	sbci	r17, 0x11	; 17
     3b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     3b4:	21 14       	cp	r2, r1
     3b6:	89 3b       	cpi	r24, 0xB9	; 185
     3b8:	e6 55       	subi	r30, 0x56	; 86
     3ba:	16 cf       	rjmp	.-468    	; 0x1e8 <__SREG__+0x1a9>
     3bc:	fe e6       	ldi	r31, 0x6E	; 110
     3be:	db 18       	sub	r13, r11
     3c0:	d1 84       	ldd	r13, Z+9	; 0x09
     3c2:	4b 38       	cpi	r20, 0x8B	; 139
     3c4:	1b f7       	brvc	.-58     	; 0x38c <__trampolines_end+0xa8>
     3c6:	7c 1d       	adc	r23, r12
     3c8:	90 1d       	adc	r25, r0
     3ca:	a4 bb       	out	0x14, r26	; 20
     3cc:	e4 24       	eor	r14, r4
     3ce:	20 32       	cpi	r18, 0x20	; 32
     3d0:	84 72       	andi	r24, 0x24	; 36
     3d2:	5e 22       	and	r5, r30
     3d4:	81 00       	.word	0x0081	; ????
     3d6:	c9 f1       	breq	.+114    	; 0x44a <Init_MBI+0x4>
     3d8:	24 ec       	ldi	r18, 0xC4	; 196
     3da:	a1 e5       	ldi	r26, 0x51	; 81
     3dc:	3d 27       	eor	r19, r29

000003de <flash_Device_ID>:
     3de:	53 43 4f 52 45 42 4f 41 52 44 5f 56 2e 31 2e 32     SCOREBOARD_V.1.2
	...

000003ef <flash_fonts>:
     3ef:	ee 06 7c 3e 96 ba fa 26 fe be e8 10 b4 00 f4 da     ..|>...&........
     3ff:	01 f0 5a 52 f6 d8 c8 f8 00                          ..ZR.....

00000408 <__ctors_end>:
     408:	11 24       	eor	r1, r1
     40a:	1f be       	out	0x3f, r1	; 63
     40c:	cf ef       	ldi	r28, 0xFF	; 255
     40e:	d8 e0       	ldi	r29, 0x08	; 8
     410:	de bf       	out	0x3e, r29	; 62
     412:	cd bf       	out	0x3d, r28	; 61

00000414 <__do_copy_data>:
     414:	11 e0       	ldi	r17, 0x01	; 1
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b1 e0       	ldi	r27, 0x01	; 1
     41a:	e0 ed       	ldi	r30, 0xD0	; 208
     41c:	f0 e5       	ldi	r31, 0x50	; 80
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__do_copy_data+0x10>
     420:	05 90       	lpm	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	ae 30       	cpi	r26, 0x0E	; 14
     426:	b1 07       	cpc	r27, r17
     428:	d9 f7       	brne	.-10     	; 0x420 <__do_copy_data+0xc>

0000042a <__do_clear_bss>:
     42a:	25 e0       	ldi	r18, 0x05	; 5
     42c:	ae e0       	ldi	r26, 0x0E	; 14
     42e:	b1 e0       	ldi	r27, 0x01	; 1
     430:	01 c0       	rjmp	.+2      	; 0x434 <.do_clear_bss_start>

00000432 <.do_clear_bss_loop>:
     432:	1d 92       	st	X+, r1

00000434 <.do_clear_bss_start>:
     434:	aa 31       	cpi	r26, 0x1A	; 26
     436:	b2 07       	cpc	r27, r18
     438:	e1 f7       	brne	.-8      	; 0x432 <.do_clear_bss_loop>
     43a:	0e 94 b5 23 	call	0x476a	; 0x476a <main>
     43e:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <_exit>

00000442 <__bad_interrupt>:
     442:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000446 <Init_MBI>:
			last_temperature[3]=CHR_C;
		}
		
	}
	//sei();
}
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	82 b9       	out	0x02, r24	; 2
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	81 b9       	out	0x01, r24	; 1
     44e:	08 95       	ret

00000450 <byte_out>:
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	11 c0       	rjmp	.+34     	; 0x476 <byte_out+0x26>
     454:	80 ff       	sbrs	r24, 0
     456:	04 c0       	rjmp	.+8      	; 0x460 <byte_out+0x10>
     458:	92 b1       	in	r25, 0x02	; 2
     45a:	91 60       	ori	r25, 0x01	; 1
     45c:	92 b9       	out	0x02, r25	; 2
     45e:	03 c0       	rjmp	.+6      	; 0x466 <byte_out+0x16>
     460:	92 b1       	in	r25, 0x02	; 2
     462:	9e 7f       	andi	r25, 0xFE	; 254
     464:	92 b9       	out	0x02, r25	; 2
     466:	92 b1       	in	r25, 0x02	; 2
     468:	92 60       	ori	r25, 0x02	; 2
     46a:	92 b9       	out	0x02, r25	; 2
     46c:	92 b1       	in	r25, 0x02	; 2
     46e:	9d 7f       	andi	r25, 0xFD	; 253
     470:	92 b9       	out	0x02, r25	; 2
     472:	85 95       	asr	r24
     474:	2f 5f       	subi	r18, 0xFF	; 255
     476:	28 30       	cpi	r18, 0x08	; 8
     478:	68 f3       	brcs	.-38     	; 0x454 <byte_out+0x4>
     47a:	08 95       	ret

0000047c <do_rclk>:
     47c:	82 b1       	in	r24, 0x02	; 2
     47e:	88 60       	ori	r24, 0x08	; 8
     480:	82 b9       	out	0x02, r24	; 2
     482:	82 b1       	in	r24, 0x02	; 2
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	82 b9       	out	0x02, r24	; 2
     488:	08 95       	ret

0000048a <DoLEDtest>:
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	c0 e0       	ldi	r28, 0x00	; 0
     490:	04 c0       	rjmp	.+8      	; 0x49a <DoLEDtest+0x10>
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
     498:	cf 5f       	subi	r28, 0xFF	; 255
     49a:	2c 2f       	mov	r18, r28
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
     4a2:	08 2e       	mov	r0, r24
     4a4:	00 0c       	add	r0, r0
     4a6:	99 0b       	sbc	r25, r25
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	94 f3       	brlt	.-28     	; 0x492 <DoLEDtest+0x8>
     4ae:	0e 94 3e 02 	call	0x47c	; 0x47c <do_rclk>
     4b2:	a8 95       	wdr
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	83 ec       	ldi	r24, 0xC3	; 195
     4b8:	99 e0       	ldi	r25, 0x09	; 9
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <DoLEDtest+0x30>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <DoLEDtest+0x3a>
     4c4:	00 00       	nop
     4c6:	d0 e8       	ldi	r29, 0x80	; 128
     4c8:	1d c0       	rjmp	.+58     	; 0x504 <DoLEDtest+0x7a>
     4ca:	8d 2f       	mov	r24, r29
     4cc:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
     4d0:	cf 5f       	subi	r28, 0xFF	; 255
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <DoLEDtest+0x4c>
     4d4:	c0 e0       	ldi	r28, 0x00	; 0
     4d6:	2c 2f       	mov	r18, r28
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
     4de:	08 2e       	mov	r0, r24
     4e0:	00 0c       	add	r0, r0
     4e2:	99 0b       	sbc	r25, r25
     4e4:	28 17       	cp	r18, r24
     4e6:	39 07       	cpc	r19, r25
     4e8:	84 f3       	brlt	.-32     	; 0x4ca <DoLEDtest+0x40>
     4ea:	0e 94 3e 02 	call	0x47c	; 0x47c <do_rclk>
     4ee:	a8 95       	wdr
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	83 ec       	ldi	r24, 0xC3	; 195
     4f4:	99 e0       	ldi	r25, 0x09	; 9
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <DoLEDtest+0x6c>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <DoLEDtest+0x76>
     500:	00 00       	nop
     502:	d6 95       	lsr	r29
     504:	d1 11       	cpse	r29, r1
     506:	e6 cf       	rjmp	.-52     	; 0x4d4 <DoLEDtest+0x4a>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <TLC_special_mode>:
     50e:	82 b1       	in	r24, 0x02	; 2
     510:	84 60       	ori	r24, 0x04	; 4
     512:	82 b9       	out	0x02, r24	; 2
     514:	82 b1       	in	r24, 0x02	; 2
     516:	87 7f       	andi	r24, 0xF7	; 247
     518:	82 b9       	out	0x02, r24	; 2
     51a:	82 b1       	in	r24, 0x02	; 2
     51c:	82 60       	ori	r24, 0x02	; 2
     51e:	82 b9       	out	0x02, r24	; 2
     520:	82 b1       	in	r24, 0x02	; 2
     522:	8d 7f       	andi	r24, 0xFD	; 253
     524:	82 b9       	out	0x02, r24	; 2
     526:	82 b1       	in	r24, 0x02	; 2
     528:	8b 7f       	andi	r24, 0xFB	; 251
     52a:	82 b9       	out	0x02, r24	; 2
     52c:	82 b1       	in	r24, 0x02	; 2
     52e:	82 60       	ori	r24, 0x02	; 2
     530:	82 b9       	out	0x02, r24	; 2
     532:	82 b1       	in	r24, 0x02	; 2
     534:	8d 7f       	andi	r24, 0xFD	; 253
     536:	82 b9       	out	0x02, r24	; 2
     538:	82 b1       	in	r24, 0x02	; 2
     53a:	84 60       	ori	r24, 0x04	; 4
     53c:	82 b9       	out	0x02, r24	; 2
     53e:	82 b1       	in	r24, 0x02	; 2
     540:	82 60       	ori	r24, 0x02	; 2
     542:	82 b9       	out	0x02, r24	; 2
     544:	82 b1       	in	r24, 0x02	; 2
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	82 b9       	out	0x02, r24	; 2
     54a:	82 b1       	in	r24, 0x02	; 2
     54c:	88 60       	ori	r24, 0x08	; 8
     54e:	82 b9       	out	0x02, r24	; 2
     550:	82 b1       	in	r24, 0x02	; 2
     552:	82 60       	ori	r24, 0x02	; 2
     554:	82 b9       	out	0x02, r24	; 2
     556:	82 b1       	in	r24, 0x02	; 2
     558:	8d 7f       	andi	r24, 0xFD	; 253
     55a:	82 b9       	out	0x02, r24	; 2
     55c:	82 b1       	in	r24, 0x02	; 2
     55e:	87 7f       	andi	r24, 0xF7	; 247
     560:	82 b9       	out	0x02, r24	; 2
     562:	82 b1       	in	r24, 0x02	; 2
     564:	82 60       	ori	r24, 0x02	; 2
     566:	82 b9       	out	0x02, r24	; 2
     568:	82 b1       	in	r24, 0x02	; 2
     56a:	8d 7f       	andi	r24, 0xFD	; 253
     56c:	82 b9       	out	0x02, r24	; 2
     56e:	08 95       	ret

00000570 <TLC_normal_mode>:
     570:	82 b1       	in	r24, 0x02	; 2
     572:	84 60       	ori	r24, 0x04	; 4
     574:	82 b9       	out	0x02, r24	; 2
     576:	82 b1       	in	r24, 0x02	; 2
     578:	87 7f       	andi	r24, 0xF7	; 247
     57a:	82 b9       	out	0x02, r24	; 2
     57c:	82 b1       	in	r24, 0x02	; 2
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	82 b9       	out	0x02, r24	; 2
     582:	82 b1       	in	r24, 0x02	; 2
     584:	8d 7f       	andi	r24, 0xFD	; 253
     586:	82 b9       	out	0x02, r24	; 2
     588:	82 b1       	in	r24, 0x02	; 2
     58a:	8b 7f       	andi	r24, 0xFB	; 251
     58c:	82 b9       	out	0x02, r24	; 2
     58e:	82 b1       	in	r24, 0x02	; 2
     590:	82 60       	ori	r24, 0x02	; 2
     592:	82 b9       	out	0x02, r24	; 2
     594:	82 b1       	in	r24, 0x02	; 2
     596:	8d 7f       	andi	r24, 0xFD	; 253
     598:	82 b9       	out	0x02, r24	; 2
     59a:	82 b1       	in	r24, 0x02	; 2
     59c:	84 60       	ori	r24, 0x04	; 4
     59e:	82 b9       	out	0x02, r24	; 2
     5a0:	82 b1       	in	r24, 0x02	; 2
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	82 b9       	out	0x02, r24	; 2
     5a6:	82 b1       	in	r24, 0x02	; 2
     5a8:	8d 7f       	andi	r24, 0xFD	; 253
     5aa:	82 b9       	out	0x02, r24	; 2
     5ac:	82 b1       	in	r24, 0x02	; 2
     5ae:	82 60       	ori	r24, 0x02	; 2
     5b0:	82 b9       	out	0x02, r24	; 2
     5b2:	82 b1       	in	r24, 0x02	; 2
     5b4:	8d 7f       	andi	r24, 0xFD	; 253
     5b6:	82 b9       	out	0x02, r24	; 2
     5b8:	82 b1       	in	r24, 0x02	; 2
     5ba:	82 60       	ori	r24, 0x02	; 2
     5bc:	82 b9       	out	0x02, r24	; 2
     5be:	82 b1       	in	r24, 0x02	; 2
     5c0:	8d 7f       	andi	r24, 0xFD	; 253
     5c2:	82 b9       	out	0x02, r24	; 2
     5c4:	82 b1       	in	r24, 0x02	; 2
     5c6:	8b 7f       	andi	r24, 0xFB	; 251
     5c8:	82 b9       	out	0x02, r24	; 2
     5ca:	08 95       	ret

000005cc <TLC_config_byte>:
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	d8 2f       	mov	r29, r24
     5d2:	c6 2f       	mov	r28, r22
     5d4:	0e 94 87 02 	call	0x50e	; 0x50e <TLC_special_mode>
     5d8:	80 e1       	ldi	r24, 0x10	; 16
     5da:	d8 9f       	mul	r29, r24
     5dc:	a0 01       	movw	r20, r0
     5de:	11 24       	eor	r1, r1
     5e0:	4f 3f       	cpi	r20, 0xFF	; 255
     5e2:	51 05       	cpc	r21, r1
     5e4:	19 f1       	breq	.+70     	; 0x62c <TLC_config_byte+0x60>
     5e6:	10 f1       	brcs	.+68     	; 0x62c <TLC_config_byte+0x60>
     5e8:	4f ef       	ldi	r20, 0xFF	; 255
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	1f c0       	rjmp	.+62     	; 0x62c <TLC_config_byte+0x60>
     5ee:	24 2f       	mov	r18, r20
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	16 c0       	rjmp	.+44     	; 0x620 <TLC_config_byte+0x54>
     5f4:	87 30       	cpi	r24, 0x07	; 7
     5f6:	19 f4       	brne	.+6      	; 0x5fe <TLC_config_byte+0x32>
     5f8:	92 b1       	in	r25, 0x02	; 2
     5fa:	98 60       	ori	r25, 0x08	; 8
     5fc:	92 b9       	out	0x02, r25	; 2
     5fe:	20 ff       	sbrs	r18, 0
     600:	04 c0       	rjmp	.+8      	; 0x60a <TLC_config_byte+0x3e>
     602:	92 b1       	in	r25, 0x02	; 2
     604:	91 60       	ori	r25, 0x01	; 1
     606:	92 b9       	out	0x02, r25	; 2
     608:	03 c0       	rjmp	.+6      	; 0x610 <TLC_config_byte+0x44>
     60a:	92 b1       	in	r25, 0x02	; 2
     60c:	9e 7f       	andi	r25, 0xFE	; 254
     60e:	92 b9       	out	0x02, r25	; 2
     610:	92 b1       	in	r25, 0x02	; 2
     612:	92 60       	ori	r25, 0x02	; 2
     614:	92 b9       	out	0x02, r25	; 2
     616:	92 b1       	in	r25, 0x02	; 2
     618:	9d 7f       	andi	r25, 0xFD	; 253
     61a:	92 b9       	out	0x02, r25	; 2
     61c:	26 95       	lsr	r18
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	40 f3       	brcs	.-48     	; 0x5f4 <TLC_config_byte+0x28>
     624:	82 b1       	in	r24, 0x02	; 2
     626:	87 7f       	andi	r24, 0xF7	; 247
     628:	82 b9       	out	0x02, r24	; 2
     62a:	c1 50       	subi	r28, 0x01	; 1
     62c:	c1 11       	cpse	r28, r1
     62e:	df cf       	rjmp	.-66     	; 0x5ee <TLC_config_byte+0x22>
     630:	0e 94 b8 02 	call	0x570	; 0x570 <TLC_normal_mode>
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <RC5_Reset>:
     63a:	a8 95       	wdr
     63c:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <has_new>
     640:	8e e0       	ldi	r24, 0x0E	; 14
     642:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <ccounter>
     646:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <command+0x1>
     64a:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <command>
     64e:	85 e0       	ldi	r24, 0x05	; 5
     650:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
     654:	8d b3       	in	r24, 0x1d	; 29
     656:	84 60       	ori	r24, 0x04	; 4
     658:	8d bb       	out	0x1d, r24	; 29
     65a:	08 95       	ret

0000065c <RC5_Init>:
     65c:	e9 e6       	ldi	r30, 0x69	; 105
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	80 61       	ori	r24, 0x10	; 16
     664:	80 83       	st	Z, r24
     666:	84 b1       	in	r24, 0x04	; 4
     668:	8b 7f       	andi	r24, 0xFB	; 251
     66a:	84 b9       	out	0x04, r24	; 4
     66c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     676:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
     67a:	08 95       	ret

0000067c <RC5_NewCommandReceived>:
     67c:	fc 01       	movw	r30, r24
     67e:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <has_new>
     682:	99 23       	and	r25, r25
     684:	31 f0       	breq	.+12     	; 0x692 <RC5_NewCommandReceived+0x16>
     686:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <command>
     68a:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <command+0x1>
     68e:	91 83       	std	Z+1, r25	; 0x01
     690:	80 83       	st	Z, r24
     692:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <has_new>
     696:	08 95       	ret

00000698 <Reset_Modbus_Timeout>:
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	99 bb       	out	0x19, r25	; 25
     69c:	2e b1       	in	r18, 0x0e	; 14
     69e:	80 e4       	ldi	r24, 0x40	; 64
     6a0:	82 27       	eor	r24, r18
     6a2:	8e b9       	out	0x0e, r24	; 14
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e8       	ldi	r19, 0x80	; 128
     6a8:	30 93 a5 00 	sts	0x00A5, r19	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
     6ac:	20 93 a4 00 	sts	0x00A4, r18	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
     6b6:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <__TEXT_REGION_LENGTH__+0x7f8072>
     6ba:	08 95       	ret

000006bc <Put_CRC>:
     6bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6c4:	28 27       	eor	r18, r24
     6c6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6ca:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     6ce:	28 e0       	ldi	r18, 0x08	; 8
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	19 c0       	rjmp	.+50     	; 0x706 <Put_CRC+0x4a>
     6d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6dc:	80 ff       	sbrs	r24, 0
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <Put_CRC+0x3a>
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	84 27       	eor	r24, r20
     6e8:	40 ea       	ldi	r20, 0xA0	; 160
     6ea:	94 27       	eor	r25, r20
     6ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6f4:	06 c0       	rjmp	.+12     	; 0x702 <Put_CRC+0x46>
     6f6:	96 95       	lsr	r25
     6f8:	87 95       	ror	r24
     6fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     702:	21 50       	subi	r18, 0x01	; 1
     704:	31 09       	sbc	r19, r1
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	21 f7       	brne	.-56     	; 0x6d4 <Put_CRC+0x18>
     70c:	08 95       	ret

0000070e <Check_MDdata_Length>:
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	71 97       	sbiw	r30, 0x11	; 17
     714:	e0 34       	cpi	r30, 0x40	; 64
     716:	f1 05       	cpc	r31, r1
     718:	88 f4       	brcc	.+34     	; 0x73c <Check_MDdata_Length+0x2e>
     71a:	ea 59       	subi	r30, 0x9A	; 154
     71c:	ff 4f       	sbci	r31, 0xFF	; 255
     71e:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__tablejump2__>
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	08 95       	ret
     726:	83 e0       	ldi	r24, 0x03	; 3
     728:	08 95       	ret
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	08 95       	ret
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	08 95       	ret
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	08 95       	ret
     736:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
     73a:	08 95       	ret
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	08 95       	ret
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	08 95       	ret

00000744 <OWReset>:
     744:	fc 01       	movw	r30, r24
     746:	a0 81       	ld	r26, Z
     748:	b1 81       	ldd	r27, Z+1	; 0x01
     74a:	4e 91       	ld	r20, -X
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	c9 01       	movw	r24, r18
     752:	02 80       	ldd	r0, Z+2	; 0x02
     754:	02 c0       	rjmp	.+4      	; 0x75a <OWReset+0x16>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	0a 94       	dec	r0
     75c:	e2 f7       	brpl	.-8      	; 0x756 <OWReset+0x12>
     75e:	84 2b       	or	r24, r20
     760:	8c 93       	st	X, r24
     762:	8f eb       	ldi	r24, 0xBF	; 191
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <OWReset+0x22>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <OWReset+0x28>
     76c:	00 00       	nop
     76e:	a0 81       	ld	r26, Z
     770:	b1 81       	ldd	r27, Z+1	; 0x01
     772:	9e 91       	ld	r25, -X
     774:	a9 01       	movw	r20, r18
     776:	02 80       	ldd	r0, Z+2	; 0x02
     778:	02 c0       	rjmp	.+4      	; 0x77e <OWReset+0x3a>
     77a:	44 0f       	add	r20, r20
     77c:	55 1f       	adc	r21, r21
     77e:	0a 94       	dec	r0
     780:	e2 f7       	brpl	.-8      	; 0x77a <OWReset+0x36>
     782:	84 2f       	mov	r24, r20
     784:	80 95       	com	r24
     786:	89 23       	and	r24, r25
     788:	8c 93       	st	X, r24
     78a:	95 ed       	ldi	r25, 0xD5	; 213
     78c:	9a 95       	dec	r25
     78e:	f1 f7       	brne	.-4      	; 0x78c <OWReset+0x48>
     790:	00 00       	nop
     792:	a0 81       	ld	r26, Z
     794:	b1 81       	ldd	r27, Z+1	; 0x01
     796:	12 97       	sbiw	r26, 0x02	; 2
     798:	8c 91       	ld	r24, X
     79a:	02 80       	ldd	r0, Z+2	; 0x02
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <OWReset+0x5e>
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <OWReset+0x5a>
     7a6:	82 23       	and	r24, r18
     7a8:	ef e1       	ldi	r30, 0x1F	; 31
     7aa:	f3 e0       	ldi	r31, 0x03	; 3
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <OWReset+0x68>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <OWReset+0x6e>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <OWWriteBit>:
     7b6:	fc 01       	movw	r30, r24
     7b8:	a0 81       	ld	r26, Z
     7ba:	b1 81       	ldd	r27, Z+1	; 0x01
     7bc:	8e 91       	ld	r24, -X
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	02 80       	ldd	r0, Z+2	; 0x02
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <OWWriteBit+0x14>
     7c6:	22 0f       	add	r18, r18
     7c8:	33 1f       	adc	r19, r19
     7ca:	0a 94       	dec	r0
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <OWWriteBit+0x10>
     7ce:	28 2b       	or	r18, r24
     7d0:	2c 93       	st	X, r18
     7d2:	66 23       	and	r22, r22
     7d4:	a9 f0       	breq	.+42     	; 0x800 <__DATA_REGION_LENGTH__>
     7d6:	88 e2       	ldi	r24, 0x28	; 40
     7d8:	8a 95       	dec	r24
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <OWWriteBit+0x22>
     7dc:	a0 81       	ld	r26, Z
     7de:	b1 81       	ldd	r27, Z+1	; 0x01
     7e0:	2e 91       	ld	r18, -X
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	02 80       	ldd	r0, Z+2	; 0x02
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <OWWriteBit+0x38>
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	0a 94       	dec	r0
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <OWWriteBit+0x34>
     7f2:	80 95       	com	r24
     7f4:	82 23       	and	r24, r18
     7f6:	8c 93       	st	X, r24
     7f8:	88 e7       	ldi	r24, 0x78	; 120
     7fa:	8a 95       	dec	r24
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <OWWriteBit+0x44>
     7fe:	08 95       	ret
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	8a 95       	dec	r24
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	a0 81       	ld	r26, Z
     808:	b1 81       	ldd	r27, Z+1	; 0x01
     80a:	2e 91       	ld	r18, -X
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	02 80       	ldd	r0, Z+2	; 0x02
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	0a 94       	dec	r0
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	80 95       	com	r24
     81e:	82 23       	and	r24, r18
     820:	8c 93       	st	X, r24
     822:	08 95       	ret

00000824 <OWReadBit>:
     824:	fc 01       	movw	r30, r24
     826:	a0 81       	ld	r26, Z
     828:	b1 81       	ldd	r27, Z+1	; 0x01
     82a:	4e 91       	ld	r20, -X
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	9c 01       	movw	r18, r24
     832:	02 80       	ldd	r0, Z+2	; 0x02
     834:	02 c0       	rjmp	.+4      	; 0x83a <OWReadBit+0x16>
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	0a 94       	dec	r0
     83c:	e2 f7       	brpl	.-8      	; 0x836 <OWReadBit+0x12>
     83e:	24 2b       	or	r18, r20
     840:	2c 93       	st	X, r18
     842:	2a e0       	ldi	r18, 0x0A	; 10
     844:	2a 95       	dec	r18
     846:	f1 f7       	brne	.-4      	; 0x844 <OWReadBit+0x20>
     848:	00 c0       	rjmp	.+0      	; 0x84a <OWReadBit+0x26>
     84a:	a0 81       	ld	r26, Z
     84c:	b1 81       	ldd	r27, Z+1	; 0x01
     84e:	2e 91       	ld	r18, -X
     850:	02 80       	ldd	r0, Z+2	; 0x02
     852:	02 c0       	rjmp	.+4      	; 0x858 <OWReadBit+0x34>
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	0a 94       	dec	r0
     85a:	e2 f7       	brpl	.-8      	; 0x854 <OWReadBit+0x30>
     85c:	80 95       	com	r24
     85e:	82 23       	and	r24, r18
     860:	8c 93       	st	X, r24
     862:	85 e1       	ldi	r24, 0x15	; 21
     864:	8a 95       	dec	r24
     866:	f1 f7       	brne	.-4      	; 0x864 <OWReadBit+0x40>
     868:	00 00       	nop
     86a:	a0 81       	ld	r26, Z
     86c:	b1 81       	ldd	r27, Z+1	; 0x01
     86e:	12 97       	sbiw	r26, 0x02	; 2
     870:	8c 91       	ld	r24, X
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	02 80       	ldd	r0, Z+2	; 0x02
     876:	02 c0       	rjmp	.+4      	; 0x87c <OWReadBit+0x58>
     878:	95 95       	asr	r25
     87a:	87 95       	ror	r24
     87c:	0a 94       	dec	r0
     87e:	e2 f7       	brpl	.-8      	; 0x878 <OWReadBit+0x54>
     880:	80 fd       	sbrc	r24, 0
     882:	02 c0       	rjmp	.+4      	; 0x888 <OWReadBit+0x64>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	01 c0       	rjmp	.+2      	; 0x88a <OWReadBit+0x66>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e8       	ldi	r25, 0x80	; 128
     88c:	9a 95       	dec	r25
     88e:	f1 f7       	brne	.-4      	; 0x88c <OWReadBit+0x68>
     890:	08 95       	ret

00000892 <OWWriteByte>:
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	8c 01       	movw	r16, r24
     89c:	d6 2f       	mov	r29, r22
     89e:	c1 e0       	ldi	r28, 0x01	; 1
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <OWWriteByte+0x1c>
     8a2:	6c 2f       	mov	r22, r28
     8a4:	6d 23       	and	r22, r29
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OWWriteBit>
     8ac:	cc 0f       	add	r28, r28
     8ae:	c1 11       	cpse	r28, r1
     8b0:	f8 cf       	rjmp	.-16     	; 0x8a2 <OWWriteByte+0x10>
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <OWReadByte>:
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	8c 01       	movw	r16, r24
     8c6:	c1 e0       	ldi	r28, 0x01	; 1
     8c8:	d0 e0       	ldi	r29, 0x00	; 0
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <OWReadByte+0x1c>
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 12 04 	call	0x824	; 0x824 <OWReadBit>
     8d2:	81 11       	cpse	r24, r1
     8d4:	dc 2b       	or	r29, r28
     8d6:	cc 0f       	add	r28, r28
     8d8:	c1 11       	cpse	r28, r1
     8da:	f8 cf       	rjmp	.-16     	; 0x8cc <OWReadByte+0x10>
     8dc:	8d 2f       	mov	r24, r29
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <OWCheckCRC>:
     8e8:	ac 01       	movw	r20, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xb>
     8f0:	fa 01       	movw	r30, r20
     8f2:	e2 0f       	add	r30, r18
     8f4:	f1 1d       	adc	r31, r1
     8f6:	90 81       	ld	r25, Z
     8f8:	89 27       	eor	r24, r25
     8fa:	98 e0       	ldi	r25, 0x08	; 8
     8fc:	3c e8       	ldi	r19, 0x8C	; 140
     8fe:	86 95       	lsr	r24
     900:	08 f4       	brcc	.+2      	; 0x904 <__stack+0x5>
     902:	83 27       	eor	r24, r19
     904:	9a 95       	dec	r25
     906:	d9 f7       	brne	.-10     	; 0x8fe <OWCheckCRC+0x16>
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	26 17       	cp	r18, r22
     90c:	88 f3       	brcs	.-30     	; 0x8f0 <OWCheckCRC+0x8>
     90e:	08 95       	ret

00000910 <DS18x20_ReadROM>:
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	7c 01       	movw	r14, r24
     91c:	63 e3       	ldi	r22, 0x33	; 51
     91e:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	0a c0       	rjmp	.+20     	; 0x93a <DS18x20_ReadROM+0x2a>
     926:	0c 2f       	mov	r16, r28
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	c7 01       	movw	r24, r14
     92c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <OWReadByte>
     930:	f7 01       	movw	r30, r14
     932:	e0 0f       	add	r30, r16
     934:	f1 1f       	adc	r31, r17
     936:	83 83       	std	Z+3, r24	; 0x03
     938:	cf 5f       	subi	r28, 0xFF	; 255
     93a:	c8 30       	cpi	r28, 0x08	; 8
     93c:	a0 f3       	brcs	.-24     	; 0x926 <DS18x20_ReadROM+0x16>
     93e:	67 e0       	ldi	r22, 0x07	; 7
     940:	c7 01       	movw	r24, r14
     942:	03 96       	adiw	r24, 0x03	; 3
     944:	0e 94 74 04 	call	0x8e8	; 0x8e8 <OWCheckCRC>
     948:	f7 01       	movw	r30, r14
     94a:	92 85       	ldd	r25, Z+10	; 0x0a
     94c:	89 13       	cpse	r24, r25
     94e:	02 c0       	rjmp	.+4      	; 0x954 <DS18x20_ReadROM+0x44>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	01 c0       	rjmp	.+2      	; 0x956 <DS18x20_ReadROM+0x46>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	08 95       	ret

00000962 <DS18x20_Init>:
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ec 01       	movw	r28, r24
     96a:	79 83       	std	Y+1, r23	; 0x01
     96c:	68 83       	st	Y, r22
     96e:	4a 83       	std	Y+2, r20	; 0x02
     970:	fb 01       	movw	r30, r22
     972:	30 81       	ld	r19, Z
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	02 c0       	rjmp	.+4      	; 0x980 <DS18x20_Init+0x1e>
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	4a 95       	dec	r20
     982:	e2 f7       	brpl	.-8      	; 0x97c <DS18x20_Init+0x1a>
     984:	2e 2f       	mov	r18, r30
     986:	20 95       	com	r18
     988:	23 23       	and	r18, r19
     98a:	fb 01       	movw	r30, r22
     98c:	20 83       	st	Z, r18
     98e:	e8 81       	ld	r30, Y
     990:	f9 81       	ldd	r31, Y+1	; 0x01
     992:	22 91       	ld	r18, -Z
     994:	0a 80       	ldd	r0, Y+2	; 0x02
     996:	02 c0       	rjmp	.+4      	; 0x99c <DS18x20_Init+0x3a>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <DS18x20_Init+0x36>
     9a0:	80 95       	com	r24
     9a2:	82 23       	and	r24, r18
     9a4:	80 83       	st	Z, r24
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     9ac:	18 2f       	mov	r17, r24
     9ae:	81 11       	cpse	r24, r1
     9b0:	11 c0       	rjmp	.+34     	; 0x9d4 <DS18x20_Init+0x72>
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 88 04 	call	0x910	; 0x910 <DS18x20_ReadROM>
     9b8:	88 23       	and	r24, r24
     9ba:	71 f0       	breq	.+28     	; 0x9d8 <DS18x20_Init+0x76>
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	80 31       	cpi	r24, 0x10	; 16
     9c0:	39 f0       	breq	.+14     	; 0x9d0 <DS18x20_Init+0x6e>
     9c2:	88 32       	cpi	r24, 0x28	; 40
     9c4:	59 f4       	brne	.+22     	; 0x9dc <DS18x20_Init+0x7a>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	8c 8b       	std	Y+20, r24	; 0x14
     9ca:	8f e7       	ldi	r24, 0x7F	; 127
     9cc:	8f 87       	std	Y+15, r24	; 0x0f
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <DS18x20_Init+0x7c>
     9d0:	1c 8a       	std	Y+20, r1	; 0x14
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <DS18x20_Init+0x7c>
     9d4:	11 e0       	ldi	r17, 0x01	; 1
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <DS18x20_Init+0x7c>
     9d8:	11 e0       	ldi	r17, 0x01	; 1
     9da:	01 c0       	rjmp	.+2      	; 0x9de <DS18x20_Init+0x7c>
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	81 2f       	mov	r24, r17
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	08 95       	ret

000009e8 <DS18x20_ReadScratchPad>:
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	7c 01       	movw	r14, r24
     9f4:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     9f8:	6c ec       	ldi	r22, 0xCC	; 204
     9fa:	c7 01       	movw	r24, r14
     9fc:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a00:	6e eb       	ldi	r22, 0xBE	; 190
     a02:	c7 01       	movw	r24, r14
     a04:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <DS18x20_ReadScratchPad+0x38>
     a0c:	0c 2f       	mov	r16, r28
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	c7 01       	movw	r24, r14
     a12:	0e 94 5e 04 	call	0x8bc	; 0x8bc <OWReadByte>
     a16:	f7 01       	movw	r30, r14
     a18:	e0 0f       	add	r30, r16
     a1a:	f1 1f       	adc	r31, r17
     a1c:	83 87       	std	Z+11, r24	; 0x0b
     a1e:	cf 5f       	subi	r28, 0xFF	; 255
     a20:	c9 30       	cpi	r28, 0x09	; 9
     a22:	a0 f3       	brcs	.-24     	; 0xa0c <DS18x20_ReadScratchPad+0x24>
     a24:	68 e0       	ldi	r22, 0x08	; 8
     a26:	c7 01       	movw	r24, r14
     a28:	0b 96       	adiw	r24, 0x0b	; 11
     a2a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <OWCheckCRC>
     a2e:	f7 01       	movw	r30, r14
     a30:	93 89       	ldd	r25, Z+19	; 0x13
     a32:	89 13       	cpse	r24, r25
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DS18x20_ReadScratchPad+0x52>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <DS18x20_ReadScratchPad+0x54>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	08 95       	ret

00000a48 <DS18x20_MeasureTemperature>:
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
     a4e:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     a52:	6c ec       	ldi	r22, 0xCC	; 204
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a5a:	64 e4       	ldi	r22, 0x44	; 68
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	8f 33       	cpi	r24, 0x3F	; 63
     a66:	71 f0       	breq	.+28     	; 0xa84 <DS18x20_MeasureTemperature+0x3c>
     a68:	8f 35       	cpi	r24, 0x5F	; 95
     a6a:	b1 f0       	breq	.+44     	; 0xa98 <DS18x20_MeasureTemperature+0x50>
     a6c:	8f 31       	cpi	r24, 0x1F	; 31
     a6e:	f1 f4       	brne	.+60     	; 0xaac <DS18x20_MeasureTemperature+0x64>
     a70:	2f e7       	ldi	r18, 0x7F	; 127
     a72:	8b e4       	ldi	r24, 0x4B	; 75
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <DS18x20_MeasureTemperature+0x2e>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <DS18x20_MeasureTemperature+0x38>
     a80:	00 00       	nop
     a82:	1d c0       	rjmp	.+58     	; 0xabe <DS18x20_MeasureTemperature+0x76>
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	86 e9       	ldi	r24, 0x96	; 150
     a88:	94 e0       	ldi	r25, 0x04	; 4
     a8a:	21 50       	subi	r18, 0x01	; 1
     a8c:	80 40       	sbci	r24, 0x00	; 0
     a8e:	90 40       	sbci	r25, 0x00	; 0
     a90:	e1 f7       	brne	.-8      	; 0xa8a <DS18x20_MeasureTemperature+0x42>
     a92:	00 c0       	rjmp	.+0      	; 0xa94 <DS18x20_MeasureTemperature+0x4c>
     a94:	00 00       	nop
     a96:	13 c0       	rjmp	.+38     	; 0xabe <DS18x20_MeasureTemperature+0x76>
     a98:	2f eb       	ldi	r18, 0xBF	; 191
     a9a:	87 e2       	ldi	r24, 0x27	; 39
     a9c:	99 e0       	ldi	r25, 0x09	; 9
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <DS18x20_MeasureTemperature+0x56>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <DS18x20_MeasureTemperature+0x60>
     aa8:	00 00       	nop
     aaa:	09 c0       	rjmp	.+18     	; 0xabe <DS18x20_MeasureTemperature+0x76>
     aac:	2f e7       	ldi	r18, 0x7F	; 127
     aae:	8f e4       	ldi	r24, 0x4F	; 79
     ab0:	92 e1       	ldi	r25, 0x12	; 18
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <DS18x20_MeasureTemperature+0x6a>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <DS18x20_MeasureTemperature+0x74>
     abc:	00 00       	nop
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <DS18x20_ReadScratchPad>
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <DS18x20_SetResolution>:
     aca:	fc 01       	movw	r30, r24
     acc:	24 89       	ldd	r18, Z+20	; 0x14
     ace:	21 30       	cpi	r18, 0x01	; 1
     ad0:	09 f4       	brne	.+2      	; 0xad4 <DS18x20_SetResolution+0xa>
     ad2:	67 87       	std	Z+15, r22	; 0x0f
     ad4:	08 95       	ret

00000ad6 <DS18x20_WriteScratchpad>:
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ec 01       	movw	r28, r24
     adc:	0e 94 a2 03 	call	0x744	; 0x744 <OWReset>
     ae0:	6c ec       	ldi	r22, 0xCC	; 204
     ae2:	ce 01       	movw	r24, r28
     ae4:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     ae8:	6e e4       	ldi	r22, 0x4E	; 78
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     af0:	6d 85       	ldd	r22, Y+13	; 0x0d
     af2:	ce 01       	movw	r24, r28
     af4:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     af8:	6e 85       	ldd	r22, Y+14	; 0x0e
     afa:	ce 01       	movw	r24, r28
     afc:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     b00:	8c 89       	ldd	r24, Y+20	; 0x14
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	21 f4       	brne	.+8      	; 0xb0e <DS18x20_WriteScratchpad+0x38>
     b06:	6f 85       	ldd	r22, Y+15	; 0x0f
     b08:	ce 01       	movw	r24, r28
     b0a:	0e 94 49 04 	call	0x892	; 0x892 <OWWriteByte>
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <DS18x20_TemperatureValue>:
     b14:	fc 01       	movw	r30, r24
     b16:	64 85       	ldd	r22, Z+12	; 0x0c
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	76 2f       	mov	r23, r22
     b1c:	66 27       	eor	r22, r22
     b1e:	83 85       	ldd	r24, Z+11	; 0x0b
     b20:	68 2b       	or	r22, r24
     b22:	77 23       	and	r23, r23
     b24:	14 f0       	brlt	.+4      	; 0xb2a <DS18x20_TemperatureValue+0x16>
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <DS18x20_TemperatureValue+0x18>
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	84 89       	ldd	r24, Z+20	; 0x14
     b2e:	81 11       	cpse	r24, r1
     b30:	0d c0       	rjmp	.+26     	; 0xb4c <DS18x20_TemperatureValue+0x38>
     b32:	07 2e       	mov	r0, r23
     b34:	00 0c       	add	r0, r0
     b36:	88 0b       	sbc	r24, r24
     b38:	99 0b       	sbc	r25, r25
     b3a:	0e 94 84 24 	call	0x4908	; 0x4908 <__floatsisf>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	5f e3       	ldi	r21, 0x3F	; 63
     b46:	0e 94 bf 24 	call	0x497e	; 0x497e <__mulsf3>
     b4a:	08 95       	ret
     b4c:	87 85       	ldd	r24, Z+15	; 0x0f
     b4e:	8f 33       	cpi	r24, 0x3F	; 63
     b50:	59 f0       	breq	.+22     	; 0xb68 <DS18x20_TemperatureValue+0x54>
     b52:	20 f4       	brcc	.+8      	; 0xb5c <DS18x20_TemperatureValue+0x48>
     b54:	8f 31       	cpi	r24, 0x1F	; 31
     b56:	09 f4       	brne	.+2      	; 0xb5a <DS18x20_TemperatureValue+0x46>
     b58:	56 c0       	rjmp	.+172    	; 0xc06 <DS18x20_TemperatureValue+0xf2>
     b5a:	79 c0       	rjmp	.+242    	; 0xc4e <DS18x20_TemperatureValue+0x13a>
     b5c:	8f 35       	cpi	r24, 0x5F	; 95
     b5e:	31 f1       	breq	.+76     	; 0xbac <DS18x20_TemperatureValue+0x98>
     b60:	8f 37       	cpi	r24, 0x7F	; 127
     b62:	09 f4       	brne	.+2      	; 0xb66 <DS18x20_TemperatureValue+0x52>
     b64:	43 c0       	rjmp	.+134    	; 0xbec <DS18x20_TemperatureValue+0xd8>
     b66:	73 c0       	rjmp	.+230    	; 0xc4e <DS18x20_TemperatureValue+0x13a>
     b68:	ab 01       	movw	r20, r22
     b6a:	77 23       	and	r23, r23
     b6c:	24 f4       	brge	.+8      	; 0xb76 <DS18x20_TemperatureValue+0x62>
     b6e:	44 27       	eor	r20, r20
     b70:	55 27       	eor	r21, r21
     b72:	46 1b       	sub	r20, r22
     b74:	57 0b       	sbc	r21, r23
     b76:	ca 01       	movw	r24, r20
     b78:	99 23       	and	r25, r25
     b7a:	0c f4       	brge	.+2      	; 0xb7e <DS18x20_TemperatureValue+0x6a>
     b7c:	03 96       	adiw	r24, 0x03	; 3
     b7e:	ac 01       	movw	r20, r24
     b80:	55 95       	asr	r21
     b82:	47 95       	ror	r20
     b84:	55 95       	asr	r21
     b86:	47 95       	ror	r20
     b88:	24 03       	mulsu	r18, r20
     b8a:	b0 01       	movw	r22, r0
     b8c:	25 9f       	mul	r18, r21
     b8e:	70 0d       	add	r23, r0
     b90:	11 24       	eor	r1, r1
     b92:	07 2e       	mov	r0, r23
     b94:	00 0c       	add	r0, r0
     b96:	88 0b       	sbc	r24, r24
     b98:	99 0b       	sbc	r25, r25
     b9a:	0e 94 84 24 	call	0x4908	; 0x4908 <__floatsisf>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5e e3       	ldi	r21, 0x3E	; 62
     ba6:	0e 94 bf 24 	call	0x497e	; 0x497e <__mulsf3>
     baa:	08 95       	ret
     bac:	ab 01       	movw	r20, r22
     bae:	77 23       	and	r23, r23
     bb0:	24 f4       	brge	.+8      	; 0xbba <DS18x20_TemperatureValue+0xa6>
     bb2:	44 27       	eor	r20, r20
     bb4:	55 27       	eor	r21, r21
     bb6:	46 1b       	sub	r20, r22
     bb8:	57 0b       	sbc	r21, r23
     bba:	ca 01       	movw	r24, r20
     bbc:	99 23       	and	r25, r25
     bbe:	0c f4       	brge	.+2      	; 0xbc2 <DS18x20_TemperatureValue+0xae>
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	ac 01       	movw	r20, r24
     bc4:	55 95       	asr	r21
     bc6:	47 95       	ror	r20
     bc8:	24 03       	mulsu	r18, r20
     bca:	b0 01       	movw	r22, r0
     bcc:	25 9f       	mul	r18, r21
     bce:	70 0d       	add	r23, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	07 2e       	mov	r0, r23
     bd4:	00 0c       	add	r0, r0
     bd6:	88 0b       	sbc	r24, r24
     bd8:	99 0b       	sbc	r25, r25
     bda:	0e 94 84 24 	call	0x4908	; 0x4908 <__floatsisf>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	5e e3       	ldi	r21, 0x3E	; 62
     be6:	0e 94 bf 24 	call	0x497e	; 0x497e <__mulsf3>
     bea:	08 95       	ret
     bec:	07 2e       	mov	r0, r23
     bee:	00 0c       	add	r0, r0
     bf0:	88 0b       	sbc	r24, r24
     bf2:	99 0b       	sbc	r25, r25
     bf4:	0e 94 84 24 	call	0x4908	; 0x4908 <__floatsisf>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5d e3       	ldi	r21, 0x3D	; 61
     c00:	0e 94 bf 24 	call	0x497e	; 0x497e <__mulsf3>
     c04:	08 95       	ret
     c06:	ab 01       	movw	r20, r22
     c08:	77 23       	and	r23, r23
     c0a:	24 f4       	brge	.+8      	; 0xc14 <DS18x20_TemperatureValue+0x100>
     c0c:	44 27       	eor	r20, r20
     c0e:	55 27       	eor	r21, r21
     c10:	46 1b       	sub	r20, r22
     c12:	57 0b       	sbc	r21, r23
     c14:	ca 01       	movw	r24, r20
     c16:	99 23       	and	r25, r25
     c18:	0c f4       	brge	.+2      	; 0xc1c <DS18x20_TemperatureValue+0x108>
     c1a:	07 96       	adiw	r24, 0x07	; 7
     c1c:	ac 01       	movw	r20, r24
     c1e:	55 95       	asr	r21
     c20:	47 95       	ror	r20
     c22:	55 95       	asr	r21
     c24:	47 95       	ror	r20
     c26:	55 95       	asr	r21
     c28:	47 95       	ror	r20
     c2a:	24 03       	mulsu	r18, r20
     c2c:	b0 01       	movw	r22, r0
     c2e:	25 9f       	mul	r18, r21
     c30:	70 0d       	add	r23, r0
     c32:	11 24       	eor	r1, r1
     c34:	07 2e       	mov	r0, r23
     c36:	00 0c       	add	r0, r0
     c38:	88 0b       	sbc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	0e 94 84 24 	call	0x4908	; 0x4908 <__floatsisf>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	5f e3       	ldi	r21, 0x3F	; 63
     c48:	0e 94 bf 24 	call	0x497e	; 0x497e <__mulsf3>
     c4c:	08 95       	ret
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	cb 01       	movw	r24, r22
     c54:	08 95       	ret

00000c56 <ds1302_init>:
     c56:	87 b1       	in	r24, 0x07	; 7
     c58:	83 60       	ori	r24, 0x03	; 3
     c5a:	87 b9       	out	0x07, r24	; 7
     c5c:	81 b1       	in	r24, 0x01	; 1
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	81 b9       	out	0x01, r24	; 1
     c62:	08 95       	ret

00000c64 <ds1302_reset>:
     c64:	88 b1       	in	r24, 0x08	; 8
     c66:	8e 7f       	andi	r24, 0xFE	; 254
     c68:	88 b9       	out	0x08, r24	; 8
     c6a:	82 b1       	in	r24, 0x02	; 2
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	82 b9       	out	0x02, r24	; 2
     c70:	82 b1       	in	r24, 0x02	; 2
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	82 b9       	out	0x02, r24	; 2
     c76:	8a e0       	ldi	r24, 0x0A	; 10
     c78:	8a 95       	dec	r24
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <ds1302_reset+0x14>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <ds1302_reset+0x1a>
     c7e:	08 95       	ret

00000c80 <write>:
     c80:	97 b1       	in	r25, 0x07	; 7
     c82:	92 60       	ori	r25, 0x02	; 2
     c84:	97 b9       	out	0x07, r25	; 7
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	18 c0       	rjmp	.+48     	; 0xcba <write+0x3a>
     c8a:	98 b1       	in	r25, 0x08	; 8
     c8c:	9d 7f       	andi	r25, 0xFD	; 253
     c8e:	98 b9       	out	0x08, r25	; 8
     c90:	80 ff       	sbrs	r24, 0
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <write+0x1a>
     c94:	98 b1       	in	r25, 0x08	; 8
     c96:	92 60       	ori	r25, 0x02	; 2
     c98:	98 b9       	out	0x08, r25	; 8
     c9a:	98 b1       	in	r25, 0x08	; 8
     c9c:	9e 7f       	andi	r25, 0xFE	; 254
     c9e:	98 b9       	out	0x08, r25	; 8
     ca0:	95 e0       	ldi	r25, 0x05	; 5
     ca2:	9a 95       	dec	r25
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <write+0x22>
     ca6:	00 00       	nop
     ca8:	98 b1       	in	r25, 0x08	; 8
     caa:	91 60       	ori	r25, 0x01	; 1
     cac:	98 b9       	out	0x08, r25	; 8
     cae:	95 e0       	ldi	r25, 0x05	; 5
     cb0:	9a 95       	dec	r25
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <write+0x30>
     cb4:	00 00       	nop
     cb6:	86 95       	lsr	r24
     cb8:	2f 5f       	subi	r18, 0xFF	; 255
     cba:	28 30       	cpi	r18, 0x08	; 8
     cbc:	30 f3       	brcs	.-52     	; 0xc8a <write+0xa>
     cbe:	08 95       	ret

00000cc0 <ds1302_write_byte>:
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	d8 2f       	mov	r29, r24
     cc6:	c6 2f       	mov	r28, r22
     cc8:	0e 94 32 06 	call	0xc64	; 0xc64 <ds1302_reset>
     ccc:	8d 2f       	mov	r24, r29
     cce:	0e 94 40 06 	call	0xc80	; 0xc80 <write>
     cd2:	8c 2f       	mov	r24, r28
     cd4:	0e 94 40 06 	call	0xc80	; 0xc80 <write>
     cd8:	82 b1       	in	r24, 0x02	; 2
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	82 b9       	out	0x02, r24	; 2
     cde:	88 b1       	in	r24, 0x08	; 8
     ce0:	8e 7f       	andi	r24, 0xFE	; 254
     ce2:	88 b9       	out	0x08, r24	; 8
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <read>:
     cea:	87 b1       	in	r24, 0x07	; 7
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	87 b9       	out	0x07, r24	; 7
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	19 c0       	rjmp	.+50     	; 0xd28 <read+0x3e>
     cf6:	98 b1       	in	r25, 0x08	; 8
     cf8:	91 60       	ori	r25, 0x01	; 1
     cfa:	98 b9       	out	0x08, r25	; 8
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	9a 95       	dec	r25
     d00:	f1 f7       	brne	.-4      	; 0xcfe <read+0x14>
     d02:	00 00       	nop
     d04:	98 b1       	in	r25, 0x08	; 8
     d06:	9e 7f       	andi	r25, 0xFE	; 254
     d08:	98 b9       	out	0x08, r25	; 8
     d0a:	95 e0       	ldi	r25, 0x05	; 5
     d0c:	9a 95       	dec	r25
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <read+0x22>
     d10:	00 00       	nop
     d12:	31 99       	sbic	0x06, 1	; 6
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <read+0x30>
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <read+0x32>
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	97 95       	ror	r25
     d1e:	99 27       	eor	r25, r25
     d20:	97 95       	ror	r25
     d22:	86 95       	lsr	r24
     d24:	89 2b       	or	r24, r25
     d26:	2f 5f       	subi	r18, 0xFF	; 255
     d28:	28 30       	cpi	r18, 0x08	; 8
     d2a:	28 f3       	brcs	.-54     	; 0xcf6 <read+0xc>
     d2c:	08 95       	ret

00000d2e <ds1302_read_byte>:
     d2e:	cf 93       	push	r28
     d30:	c8 2f       	mov	r28, r24
     d32:	0e 94 32 06 	call	0xc64	; 0xc64 <ds1302_reset>
     d36:	8c 2f       	mov	r24, r28
     d38:	0e 94 40 06 	call	0xc80	; 0xc80 <write>
     d3c:	0e 94 75 06 	call	0xcea	; 0xcea <read>
     d40:	92 b1       	in	r25, 0x02	; 2
     d42:	9f 77       	andi	r25, 0x7F	; 127
     d44:	92 b9       	out	0x02, r25	; 2
     d46:	98 b1       	in	r25, 0x08	; 8
     d48:	9e 7f       	andi	r25, 0xFE	; 254
     d4a:	98 b9       	out	0x08, r25	; 8
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <ds1302_comms>:
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
     d56:	2f 30       	cpi	r18, 0x0F	; 15
     d58:	a1 f5       	brne	.+104    	; 0xdc2 <ds1302_comms+0x72>
     d5a:	64 31       	cpi	r22, 0x14	; 20
     d5c:	29 f4       	brne	.+10     	; 0xd68 <ds1302_comms+0x18>
     d5e:	81 e8       	ldi	r24, 0x81	; 129
     d60:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d64:	88 83       	st	Y, r24
     d66:	9e c0       	rjmp	.+316    	; 0xea4 <ds1302_comms+0x154>
     d68:	65 31       	cpi	r22, 0x15	; 21
     d6a:	29 f4       	brne	.+10     	; 0xd76 <ds1302_comms+0x26>
     d6c:	83 e8       	ldi	r24, 0x83	; 131
     d6e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	97 c0       	rjmp	.+302    	; 0xea4 <ds1302_comms+0x154>
     d76:	66 31       	cpi	r22, 0x16	; 22
     d78:	39 f4       	brne	.+14     	; 0xd88 <ds1302_comms+0x38>
     d7a:	85 e8       	ldi	r24, 0x85	; 133
     d7c:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d80:	9c e0       	ldi	r25, 0x0C	; 12
     d82:	9f 83       	std	Y+7, r25	; 0x07
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	8e c0       	rjmp	.+284    	; 0xea4 <ds1302_comms+0x154>
     d88:	6b 31       	cpi	r22, 0x1B	; 27
     d8a:	29 f4       	brne	.+10     	; 0xd96 <ds1302_comms+0x46>
     d8c:	8b e8       	ldi	r24, 0x8B	; 139
     d8e:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	87 c0       	rjmp	.+270    	; 0xea4 <ds1302_comms+0x154>
     d96:	67 31       	cpi	r22, 0x17	; 23
     d98:	29 f4       	brne	.+10     	; 0xda4 <ds1302_comms+0x54>
     d9a:	87 e8       	ldi	r24, 0x87	; 135
     d9c:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     da0:	8c 83       	std	Y+4, r24	; 0x04
     da2:	80 c0       	rjmp	.+256    	; 0xea4 <ds1302_comms+0x154>
     da4:	68 31       	cpi	r22, 0x18	; 24
     da6:	29 f4       	brne	.+10     	; 0xdb2 <ds1302_comms+0x62>
     da8:	89 e8       	ldi	r24, 0x89	; 137
     daa:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	79 c0       	rjmp	.+242    	; 0xea4 <ds1302_comms+0x154>
     db2:	69 31       	cpi	r22, 0x19	; 25
     db4:	09 f0       	breq	.+2      	; 0xdb8 <ds1302_comms+0x68>
     db6:	76 c0       	rjmp	.+236    	; 0xea4 <ds1302_comms+0x154>
     db8:	8d e8       	ldi	r24, 0x8D	; 141
     dba:	0e 94 97 06 	call	0xd2e	; 0xd2e <ds1302_read_byte>
     dbe:	8e 83       	std	Y+6, r24	; 0x06
     dc0:	71 c0       	rjmp	.+226    	; 0xea4 <ds1302_comms+0x154>
     dc2:	20 31       	cpi	r18, 0x10	; 16
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <ds1302_comms+0x78>
     dc6:	6e c0       	rjmp	.+220    	; 0xea4 <ds1302_comms+0x154>
     dc8:	64 31       	cpi	r22, 0x14	; 20
     dca:	29 f4       	brne	.+10     	; 0xdd6 <ds1302_comms+0x86>
     dcc:	64 2f       	mov	r22, r20
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     dd4:	67 c0       	rjmp	.+206    	; 0xea4 <ds1302_comms+0x154>
     dd6:	65 31       	cpi	r22, 0x15	; 21
     dd8:	29 f4       	brne	.+10     	; 0xde4 <ds1302_comms+0x94>
     dda:	64 2f       	mov	r22, r20
     ddc:	82 e8       	ldi	r24, 0x82	; 130
     dde:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     de2:	60 c0       	rjmp	.+192    	; 0xea4 <ds1302_comms+0x154>
     de4:	66 31       	cpi	r22, 0x16	; 22
     de6:	e1 f5       	brne	.+120    	; 0xe60 <ds1302_comms+0x110>
     de8:	8f 81       	ldd	r24, Y+7	; 0x07
     dea:	8a 30       	cpi	r24, 0x0A	; 10
     dec:	c1 f4       	brne	.+48     	; 0xe1e <ds1302_comms+0xce>
     dee:	8d ec       	ldi	r24, 0xCD	; 205
     df0:	48 9f       	mul	r20, r24
     df2:	81 2d       	mov	r24, r1
     df4:	11 24       	eor	r1, r1
     df6:	86 95       	lsr	r24
     df8:	86 95       	lsr	r24
     dfa:	86 95       	lsr	r24
     dfc:	90 e1       	ldi	r25, 0x10	; 16
     dfe:	89 9f       	mul	r24, r25
     e00:	b0 01       	movw	r22, r0
     e02:	11 24       	eor	r1, r1
     e04:	60 71       	andi	r22, 0x10	; 16
     e06:	88 0f       	add	r24, r24
     e08:	98 2f       	mov	r25, r24
     e0a:	99 0f       	add	r25, r25
     e0c:	99 0f       	add	r25, r25
     e0e:	89 0f       	add	r24, r25
     e10:	48 1b       	sub	r20, r24
     e12:	64 2b       	or	r22, r20
     e14:	60 68       	ori	r22, 0x80	; 128
     e16:	84 e8       	ldi	r24, 0x84	; 132
     e18:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e1c:	43 c0       	rjmp	.+134    	; 0xea4 <ds1302_comms+0x154>
     e1e:	8b 30       	cpi	r24, 0x0B	; 11
     e20:	c1 f4       	brne	.+48     	; 0xe52 <ds1302_comms+0x102>
     e22:	8d ec       	ldi	r24, 0xCD	; 205
     e24:	48 9f       	mul	r20, r24
     e26:	81 2d       	mov	r24, r1
     e28:	11 24       	eor	r1, r1
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	86 95       	lsr	r24
     e30:	90 e1       	ldi	r25, 0x10	; 16
     e32:	89 9f       	mul	r24, r25
     e34:	b0 01       	movw	r22, r0
     e36:	11 24       	eor	r1, r1
     e38:	60 71       	andi	r22, 0x10	; 16
     e3a:	88 0f       	add	r24, r24
     e3c:	98 2f       	mov	r25, r24
     e3e:	99 0f       	add	r25, r25
     e40:	99 0f       	add	r25, r25
     e42:	89 0f       	add	r24, r25
     e44:	48 1b       	sub	r20, r24
     e46:	64 2b       	or	r22, r20
     e48:	60 6a       	ori	r22, 0xA0	; 160
     e4a:	84 e8       	ldi	r24, 0x84	; 132
     e4c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e50:	29 c0       	rjmp	.+82     	; 0xea4 <ds1302_comms+0x154>
     e52:	8c 30       	cpi	r24, 0x0C	; 12
     e54:	39 f5       	brne	.+78     	; 0xea4 <ds1302_comms+0x154>
     e56:	64 2f       	mov	r22, r20
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e5e:	22 c0       	rjmp	.+68     	; 0xea4 <ds1302_comms+0x154>
     e60:	6b 31       	cpi	r22, 0x1B	; 27
     e62:	29 f4       	brne	.+10     	; 0xe6e <ds1302_comms+0x11e>
     e64:	64 2f       	mov	r22, r20
     e66:	8a e8       	ldi	r24, 0x8A	; 138
     e68:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <ds1302_comms+0x154>
     e6e:	67 31       	cpi	r22, 0x17	; 23
     e70:	29 f4       	brne	.+10     	; 0xe7c <ds1302_comms+0x12c>
     e72:	64 2f       	mov	r22, r20
     e74:	86 e8       	ldi	r24, 0x86	; 134
     e76:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e7a:	14 c0       	rjmp	.+40     	; 0xea4 <ds1302_comms+0x154>
     e7c:	68 31       	cpi	r22, 0x18	; 24
     e7e:	29 f4       	brne	.+10     	; 0xe8a <ds1302_comms+0x13a>
     e80:	64 2f       	mov	r22, r20
     e82:	88 e8       	ldi	r24, 0x88	; 136
     e84:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e88:	0d c0       	rjmp	.+26     	; 0xea4 <ds1302_comms+0x154>
     e8a:	69 31       	cpi	r22, 0x19	; 25
     e8c:	29 f4       	brne	.+10     	; 0xe98 <ds1302_comms+0x148>
     e8e:	64 2f       	mov	r22, r20
     e90:	8c e8       	ldi	r24, 0x8C	; 140
     e92:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <ds1302_comms+0x154>
     e98:	6a 31       	cpi	r22, 0x1A	; 26
     e9a:	21 f4       	brne	.+8      	; 0xea4 <ds1302_comms+0x154>
     e9c:	64 2f       	mov	r22, r20
     e9e:	8e e8       	ldi	r24, 0x8E	; 142
     ea0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <ds1302_write_byte>
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <ds1302_update_time>:
     eaa:	2f e0       	ldi	r18, 0x0F	; 15
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 a8 06 	call	0xd50	; 0xd50 <ds1302_comms>
     eb2:	08 95       	ret

00000eb4 <ds1302_update>:
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
     eba:	64 e1       	ldi	r22, 0x14	; 20
     ebc:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ec0:	65 e1       	ldi	r22, 0x15	; 21
     ec2:	ce 01       	movw	r24, r28
     ec4:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ec8:	66 e1       	ldi	r22, 0x16	; 22
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ed0:	6b e1       	ldi	r22, 0x1B	; 27
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ed8:	67 e1       	ldi	r22, 0x17	; 23
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ee0:	68 e1       	ldi	r22, 0x18	; 24
     ee2:	ce 01       	movw	r24, r28
     ee4:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ee8:	69 e1       	ldi	r22, 0x19	; 25
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 55 07 	call	0xeaa	; 0xeaa <ds1302_update_time>
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <ds1302_set_time>:
     ef6:	20 e1       	ldi	r18, 0x10	; 16
     ef8:	0e 94 a8 06 	call	0xd50	; 0xd50 <ds1302_comms>
     efc:	08 95       	ret

00000efe <ds1302_write_time>:
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	6a e1       	ldi	r22, 0x1A	; 26
     f08:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f0c:	4a 81       	ldd	r20, Y+2	; 0x02
     f0e:	66 e1       	ldi	r22, 0x16	; 22
     f10:	ce 01       	movw	r24, r28
     f12:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f16:	49 81       	ldd	r20, Y+1	; 0x01
     f18:	65 e1       	ldi	r22, 0x15	; 21
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f20:	48 81       	ld	r20, Y
     f22:	64 e1       	ldi	r22, 0x14	; 20
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	6a e1       	ldi	r22, 0x1A	; 26
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <ds1302_write_date>:
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	ec 01       	movw	r28, r24
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	6a e1       	ldi	r22, 0x1A	; 26
     f44:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f48:	4e 81       	ldd	r20, Y+6	; 0x06
     f4a:	69 e1       	ldi	r22, 0x19	; 25
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f52:	4d 81       	ldd	r20, Y+5	; 0x05
     f54:	68 e1       	ldi	r22, 0x18	; 24
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f5c:	4c 81       	ldd	r20, Y+4	; 0x04
     f5e:	67 e1       	ldi	r22, 0x17	; 23
     f60:	ce 01       	movw	r24, r28
     f62:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	6a e1       	ldi	r22, 0x1A	; 26
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 7b 07 	call	0xef6	; 0xef6 <ds1302_set_time>
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <__vector_21>:
     f76:	1f 92       	push	r1
     f78:	0f 92       	push	r0
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	0f 92       	push	r0
     f7e:	11 24       	eor	r1, r1
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <UART_TxHead>
     f8c:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <UART_TxTail>
     f90:	98 17       	cp	r25, r24
     f92:	89 f0       	breq	.+34     	; 0xfb6 <__vector_21+0x40>
     f94:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <UART_TxTail>
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	fc 01       	movw	r30, r24
     f9e:	ff 27       	eor	r31, r31
     fa0:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <UART_TxTail>
     fa4:	82 b1       	in	r24, 0x02	; 2
     fa6:	80 61       	ori	r24, 0x10	; 16
     fa8:	82 b9       	out	0x02, r24	; 2
     faa:	e8 5e       	subi	r30, 0xE8	; 232
     fac:	fc 4f       	sbci	r31, 0xFC	; 252
     fae:	80 81       	ld	r24, Z
     fb0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <__vector_21+0x50>
     fb6:	e1 ec       	ldi	r30, 0xC1	; 193
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	80 83       	st	Z, r24
     fc0:	80 81       	ld	r24, Z
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	80 83       	st	Z, r24
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_22>:
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	8f 93       	push	r24
     fe4:	82 b1       	in	r24, 0x02	; 2
     fe6:	8f 7e       	andi	r24, 0xEF	; 239
     fe8:	82 b9       	out	0x02, r24	; 2
     fea:	8f 91       	pop	r24
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <uart0_init>:
     ff6:	9c 01       	movw	r18, r24
     ff8:	f8 94       	cli
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <uart0_init+0x1a>
     ffe:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <UART_TxHead>
    1002:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <UART_TxTail>
    1006:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <UART_RxHead>
    100a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <UART_RxTail>
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	91 11       	cpse	r25, r1
    1012:	f5 cf       	rjmp	.-22     	; 0xffe <uart0_init+0x8>
    1014:	78 94       	sei
    1016:	33 23       	and	r19, r19
    1018:	24 f4       	brge	.+8      	; 0x1022 <uart0_init+0x2c>
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1020:	3f 77       	andi	r19, 0x7F	; 127
    1022:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1026:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    102a:	88 e9       	ldi	r24, 0x98	; 152
    102c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1036:	08 95       	ret

00001038 <uart0_getc>:
    1038:	f8 94       	cli
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <uart0_getc+0x1c>
    103e:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <UART_RxHead>
    1042:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <UART_RxTail>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	29 13       	cpse	r18, r25
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <uart0_getc+0x1c>
    104c:	78 94       	sei
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	08 95       	ret
    1054:	81 11       	cpse	r24, r1
    1056:	f3 cf       	rjmp	.-26     	; 0x103e <uart0_getc+0x6>
    1058:	78 94       	sei
    105a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <UART_RxTail>
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	8f 77       	andi	r24, 0x7F	; 127
    1064:	99 27       	eor	r25, r25
    1066:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <UART_RxTail>
    106a:	fc 01       	movw	r30, r24
    106c:	e8 56       	subi	r30, 0x68	; 104
    106e:	fd 4f       	sbci	r31, 0xFD	; 253
    1070:	20 81       	ld	r18, Z
    1072:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <UART_LastRxError>
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	98 2f       	mov	r25, r24
    107a:	88 27       	eor	r24, r24
    107c:	82 0f       	add	r24, r18
    107e:	91 1d       	adc	r25, r1
    1080:	08 95       	ret

00001082 <uart0_putc>:
    1082:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <UART_TxHead>
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	6f 5f       	subi	r22, 0xFF	; 255
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	ab 01       	movw	r20, r22
    108e:	55 27       	eor	r21, r21
    1090:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <UART_TxTail>
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	42 17       	cp	r20, r18
    1098:	53 07       	cpc	r21, r19
    109a:	d1 f3       	breq	.-12     	; 0x1090 <uart0_putc+0xe>
    109c:	fa 01       	movw	r30, r20
    109e:	e8 5e       	subi	r30, 0xE8	; 232
    10a0:	fc 4f       	sbci	r31, 0xFC	; 252
    10a2:	80 83       	st	Z, r24
    10a4:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <UART_TxHead>
    10a8:	e1 ec       	ldi	r30, 0xC1	; 193
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 62       	ori	r24, 0x20	; 32
    10b0:	80 83       	st	Z, r24
    10b2:	08 95       	ret

000010b4 <Reply_modbus>:
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    10ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    10ce:	f8 94       	cli
    10d0:	8c e1       	ldi	r24, 0x1C	; 28
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    10d8:	88 87       	std	Y+8, r24	; 0x08
    10da:	78 94       	sei
    10dc:	08 85       	ldd	r16, Y+8	; 0x08
    10de:	80 2f       	mov	r24, r16
    10e0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    10e4:	19 85       	ldd	r17, Y+9	; 0x09
    10e6:	81 2f       	mov	r24, r17
    10e8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    10ec:	80 2f       	mov	r24, r16
    10ee:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    10f2:	81 2f       	mov	r24, r17
    10f4:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    10f8:	1a 85       	ldd	r17, Y+10	; 0x0a
    10fa:	11 23       	and	r17, r17
    10fc:	e9 f0       	breq	.+58     	; 0x1138 <Reply_modbus+0x84>
    10fe:	81 2f       	mov	r24, r17
    1100:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    1104:	81 2f       	mov	r24, r17
    1106:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <Reply_modbus+0x7e>
    110e:	eb e0       	ldi	r30, 0x0B	; 11
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	ec 0f       	add	r30, r28
    1114:	fd 1f       	adc	r31, r29
    1116:	e0 0f       	add	r30, r16
    1118:	f1 1d       	adc	r31, r1
    111a:	07 fd       	sbrc	r16, 7
    111c:	fa 95       	dec	r31
    111e:	f0 80       	ld	r15, Z
    1120:	8f 2d       	mov	r24, r15
    1122:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    1126:	0f 5f       	subi	r16, 0xFF	; 255
    1128:	8f 2d       	mov	r24, r15
    112a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
    112e:	11 50       	subi	r17, 0x01	; 1
    1130:	1a 87       	std	Y+10, r17	; 0x0a
    1132:	1a 85       	ldd	r17, Y+10	; 0x0a
    1134:	11 11       	cpse	r17, r1
    1136:	eb cf       	rjmp	.-42     	; 0x110e <Reply_modbus+0x5a>
    1138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    113c:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    1140:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1144:	0e 94 41 08 	call	0x1082	; 0x1082 <uart0_putc>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	08 95       	ret

00001154 <uart0_flush>:
    1154:	f8 94       	cli
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <uart0_flush+0x10>
    115a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <UART_RxTail>
    115e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <UART_RxHead>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	81 11       	cpse	r24, r1
    1166:	f9 cf       	rjmp	.-14     	; 0x115a <uart0_flush+0x6>
    1168:	78 94       	sei
    116a:	08 95       	ret

0000116c <__vector_46>:
    116c:	1f 92       	push	r1
    116e:	0f 92       	push	r0
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	0f 92       	push	r0
    1174:	11 24       	eor	r1, r1
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
    118e:	8e b1       	in	r24, 0x0e	; 14
    1190:	8f 7b       	andi	r24, 0xBF	; 191
    1192:	8e b9       	out	0x0e, r24	; 14
    1194:	0e 94 aa 08 	call	0x1154	; 0x1154 <uart0_flush>
    1198:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <Modbus_intex>
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	9f ef       	ldi	r25, 0xFF	; 255
    11a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    11a8:	e5 ed       	ldi	r30, 0xD5	; 213
    11aa:	f4 e0       	ldi	r31, 0x04	; 4
    11ac:	80 83       	st	Z, r24
    11ae:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <Read_Modstr+0x44>
    11b2:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <Read_Modstr+0x43>
    11b6:	81 83       	std	Z+1, r24	; 0x01
    11b8:	12 82       	std	Z+2, r1	; 0x02
    11ba:	13 82       	std	Z+3, r1	; 0x03
    11bc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_28>:
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
    11fc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    1200:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    1204:	28 71       	andi	r18, 0x18	; 24
    1206:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <UART1_RxHead>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	8f 77       	andi	r24, 0x7F	; 127
    1210:	99 27       	eor	r25, r25
    1212:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <UART1_RxTail>
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	84 17       	cp	r24, r20
    121a:	95 07       	cpc	r25, r21
    121c:	39 f0       	breq	.+14     	; 0x122c <__vector_28+0x4a>
    121e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <UART1_RxHead>
    1222:	fc 01       	movw	r30, r24
    1224:	ed 5e       	subi	r30, 0xED	; 237
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	30 83       	st	Z, r19
    122a:	01 c0       	rjmp	.+2      	; 0x122e <__vector_28+0x4c>
    122c:	22 e0       	ldi	r18, 0x02	; 2
    122e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
    1232:	ff 91       	pop	r31
    1234:	ef 91       	pop	r30
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_29>:
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
    125e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <UART1_TxHead>
    1262:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_TxTail>
    1266:	98 17       	cp	r25, r24
    1268:	89 f0       	breq	.+34     	; 0x128c <__vector_29+0x40>
    126a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_TxTail>
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	fc 01       	movw	r30, r24
    1274:	ff 27       	eor	r31, r31
    1276:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <UART1_TxTail>
    127a:	82 b1       	in	r24, 0x02	; 2
    127c:	80 62       	ori	r24, 0x20	; 32
    127e:	82 b9       	out	0x02, r24	; 2
    1280:	ed 56       	subi	r30, 0x6D	; 109
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	80 81       	ld	r24, Z
    1286:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    128a:	08 c0       	rjmp	.+16     	; 0x129c <__vector_29+0x50>
    128c:	e9 ec       	ldi	r30, 0xC9	; 201
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	80 83       	st	Z, r24
    1296:	80 81       	ld	r24, Z
    1298:	80 64       	ori	r24, 0x40	; 64
    129a:	80 83       	st	Z, r24
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_30>:
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	8f 93       	push	r24
    12ba:	82 b1       	in	r24, 0x02	; 2
    12bc:	8f 7d       	andi	r24, 0xDF	; 223
    12be:	82 b9       	out	0x02, r24	; 2
    12c0:	8f 91       	pop	r24
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <Init_RF>:
    12cc:	88 e0       	ldi	r24, 0x08	; 8
    12ce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    12d2:	80 ef       	ldi	r24, 0xF0	; 240
    12d4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7f8073>
    12d8:	08 95       	ret

000012da <Display_Out>:
    12da:	cf 93       	push	r28
    12dc:	89 e0       	ldi	r24, 0x09	; 9
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    12e4:	81 11       	cpse	r24, r1
    12e6:	15 c0       	rjmp	.+42     	; 0x1312 <Display_Out+0x38>
    12e8:	1a c0       	rjmp	.+52     	; 0x131e <Display_Out+0x44>
    12ea:	ec 2f       	mov	r30, r28
    12ec:	0c 2e       	mov	r0, r28
    12ee:	00 0c       	add	r0, r0
    12f0:	ff 0b       	sbc	r31, r31
    12f2:	e1 58       	subi	r30, 0x81	; 129
    12f4:	fb 4f       	sbci	r31, 0xFB	; 251
    12f6:	90 81       	ld	r25, Z
    12f8:	e9 2f       	mov	r30, r25
    12fa:	ef 77       	andi	r30, 0x7F	; 127
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	e1 51       	subi	r30, 0x11	; 17
    1300:	fc 4f       	sbci	r31, 0xFC	; 252
    1302:	84 91       	lpm	r24, Z
    1304:	99 23       	and	r25, r25
    1306:	0c f4       	brge	.+2      	; 0x130a <Display_Out+0x30>
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
    130e:	cf 5f       	subi	r28, 0xFF	; 255
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <Display_Out+0x3a>
    1312:	c0 e0       	ldi	r28, 0x00	; 0
    1314:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    1318:	c8 17       	cp	r28, r24
    131a:	3c f3       	brlt	.-50     	; 0x12ea <Display_Out+0x10>
    131c:	18 c0       	rjmp	.+48     	; 0x134e <Display_Out+0x74>
    131e:	c0 91 cf 04 	lds	r28, 0x04CF	; 0x8004cf <Digits_disp>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <Display_Out+0x70>
    1324:	c1 50       	subi	r28, 0x01	; 1
    1326:	ec 2f       	mov	r30, r28
    1328:	0c 2e       	mov	r0, r28
    132a:	00 0c       	add	r0, r0
    132c:	ff 0b       	sbc	r31, r31
    132e:	e1 58       	subi	r30, 0x81	; 129
    1330:	fb 4f       	sbci	r31, 0xFB	; 251
    1332:	90 81       	ld	r25, Z
    1334:	e9 2f       	mov	r30, r25
    1336:	ef 77       	andi	r30, 0x7F	; 127
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	e1 51       	subi	r30, 0x11	; 17
    133c:	fc 4f       	sbci	r31, 0xFC	; 252
    133e:	84 91       	lpm	r24, Z
    1340:	99 23       	and	r25, r25
    1342:	0c f4       	brge	.+2      	; 0x1346 <Display_Out+0x6c>
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	0e 94 28 02 	call	0x450	; 0x450 <byte_out>
    134a:	1c 16       	cp	r1, r28
    134c:	5c f3       	brlt	.-42     	; 0x1324 <Display_Out+0x4a>
    134e:	0e 94 3e 02 	call	0x47c	; 0x47c <do_rclk>
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <display_Clock>:
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	28 97       	sbiw	r28, 0x08	; 8
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	88 87       	std	Y+8, r24	; 0x08
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	98 2f       	mov	r25, r24
    137a:	92 95       	swap	r25
    137c:	9f 70       	andi	r25, 0x0F	; 15
    137e:	ef e7       	ldi	r30, 0x7F	; 127
    1380:	f4 e0       	ldi	r31, 0x04	; 4
    1382:	90 83       	st	Z, r25
    1384:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <Clock_blink>
    1388:	8f 70       	andi	r24, 0x0F	; 15
    138a:	82 2b       	or	r24, r18
    138c:	81 83       	std	Z+1, r24	; 0x01
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	98 2f       	mov	r25, r24
    1392:	92 95       	swap	r25
    1394:	9f 70       	andi	r25, 0x0F	; 15
    1396:	92 2b       	or	r25, r18
    1398:	92 83       	std	Z+2, r25	; 0x02
    139a:	8f 70       	andi	r24, 0x0F	; 15
    139c:	83 83       	std	Z+3, r24	; 0x03
    139e:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <Digits_disp>
    13a2:	36 30       	cpi	r19, 0x06	; 6
    13a4:	59 f4       	brne	.+22     	; 0x13bc <display_Clock+0x66>
    13a6:	9f 77       	andi	r25, 0x7F	; 127
    13a8:	92 83       	std	Z+2, r25	; 0x02
    13aa:	82 2b       	or	r24, r18
    13ac:	83 83       	std	Z+3, r24	; 0x03
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	98 2f       	mov	r25, r24
    13b2:	92 95       	swap	r25
    13b4:	9f 70       	andi	r25, 0x0F	; 15
    13b6:	94 83       	std	Z+4, r25	; 0x04
    13b8:	8f 70       	andi	r24, 0x0F	; 15
    13ba:	85 83       	std	Z+5, r24	; 0x05
    13bc:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    13c0:	28 96       	adiw	r28, 0x08	; 8
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <display_Date>:
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	28 97       	sbiw	r28, 0x08	; 8
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	8c e0       	ldi	r24, 0x0C	; 12
    13e8:	88 87       	std	Y+8, r24	; 0x08
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
    13f2:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    13f6:	86 30       	cpi	r24, 0x06	; 6
    13f8:	a9 f4       	brne	.+42     	; 0x1424 <display_Date+0x52>
    13fa:	ef e7       	ldi	r30, 0x7F	; 127
    13fc:	f4 e0       	ldi	r31, 0x04	; 4
    13fe:	8d e0       	ldi	r24, 0x0D	; 13
    1400:	80 83       	st	Z, r24
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	98 2f       	mov	r25, r24
    1406:	92 95       	swap	r25
    1408:	9f 70       	andi	r25, 0x0F	; 15
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	82 83       	std	Z+2, r24	; 0x02
    1410:	8b e0       	ldi	r24, 0x0B	; 11
    1412:	83 83       	std	Z+3, r24	; 0x03
    1414:	8e 81       	ldd	r24, Y+6	; 0x06
    1416:	98 2f       	mov	r25, r24
    1418:	92 95       	swap	r25
    141a:	9f 70       	andi	r25, 0x0F	; 15
    141c:	94 83       	std	Z+4, r25	; 0x04
    141e:	8f 70       	andi	r24, 0x0F	; 15
    1420:	85 83       	std	Z+5, r24	; 0x05
    1422:	28 c0       	rjmp	.+80     	; 0x1474 <display_Date+0xa2>
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	98 2f       	mov	r25, r24
    1428:	92 95       	swap	r25
    142a:	9f 70       	andi	r25, 0x0F	; 15
    142c:	ef e7       	ldi	r30, 0x7F	; 127
    142e:	f4 e0       	ldi	r31, 0x04	; 4
    1430:	90 83       	st	Z, r25
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	81 83       	std	Z+1, r24	; 0x01
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	98 2f       	mov	r25, r24
    143c:	92 95       	swap	r25
    143e:	9f 70       	andi	r25, 0x0F	; 15
    1440:	92 83       	std	Z+2, r25	; 0x02
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	83 83       	std	Z+3, r24	; 0x03
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	89 f4       	brne	.+34     	; 0x1474 <display_Date+0xa2>
    1452:	a0 e7       	ldi	r26, 0x70	; 112
    1454:	b4 e0       	ldi	r27, 0x04	; 4
    1456:	8c 91       	ld	r24, X
    1458:	ef e7       	ldi	r30, 0x7F	; 127
    145a:	f4 e0       	ldi	r31, 0x04	; 4
    145c:	84 83       	std	Z+4, r24	; 0x04
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	8c 91       	ld	r24, X
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	85 83       	std	Z+5, r24	; 0x05
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	8c 91       	ld	r24, X
    146a:	12 97       	sbiw	r26, 0x02	; 2
    146c:	86 83       	std	Z+6, r24	; 0x06
    146e:	13 96       	adiw	r26, 0x03	; 3
    1470:	8c 91       	ld	r24, X
    1472:	87 83       	std	Z+7, r24	; 0x07
    1474:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    1478:	28 96       	adiw	r28, 0x08	; 8
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <display_temperature>:
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	6f 97       	sbiw	r28, 0x1f	; 31
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    14ac:	f8 2e       	mov	r15, r24
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	65 e2       	ldi	r22, 0x25	; 37
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 b1 04 	call	0x962	; 0x962 <DS18x20_Init>
    14bc:	88 23       	and	r24, r24
    14be:	61 f0       	breq	.+24     	; 0x14d8 <display_temperature+0x4e>
    14c0:	ef e7       	ldi	r30, 0x7F	; 127
    14c2:	f4 e0       	ldi	r31, 0x04	; 4
    14c4:	8b e0       	ldi	r24, 0x0B	; 11
    14c6:	80 83       	st	Z, r24
    14c8:	81 83       	std	Z+1, r24	; 0x01
    14ca:	8c e0       	ldi	r24, 0x0C	; 12
    14cc:	82 83       	std	Z+2, r24	; 0x02
    14ce:	8a e0       	ldi	r24, 0x0A	; 10
    14d0:	83 83       	std	Z+3, r24	; 0x03
    14d2:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    14d6:	64 c0       	rjmp	.+200    	; 0x15a0 <display_temperature+0x116>
    14d8:	ff 20       	and	r15, r15
    14da:	31 f0       	breq	.+12     	; 0x14e8 <display_temperature+0x5e>
    14dc:	6f e5       	ldi	r22, 0x5F	; 95
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 65 05 	call	0xaca	; 0xaca <DS18x20_SetResolution>
    14e6:	05 c0       	rjmp	.+10     	; 0x14f2 <display_temperature+0x68>
    14e8:	6f e1       	ldi	r22, 0x1F	; 31
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 65 05 	call	0xaca	; 0xaca <DS18x20_SetResolution>
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 6b 05 	call	0xad6	; 0xad6 <DS18x20_WriteScratchpad>
    14fa:	ce 01       	movw	r24, r28
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	0e 94 24 05 	call	0xa48	; 0xa48 <DS18x20_MeasureTemperature>
    1502:	88 23       	and	r24, r24
    1504:	09 f4       	brne	.+2      	; 0x1508 <display_temperature+0x7e>
    1506:	4c c0       	rjmp	.+152    	; 0x15a0 <display_temperature+0x116>
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	0e 94 8a 05 	call	0xb14	; 0xb14 <DS18x20_TemperatureValue>
    1510:	8e 01       	movw	r16, r28
    1512:	0a 5e       	subi	r16, 0xEA	; 234
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	24 e0       	ldi	r18, 0x04	; 4
    1518:	49 e0       	ldi	r20, 0x09	; 9
    151a:	0e 94 92 25 	call	0x4b24	; 0x4b24 <dtostrf>
    151e:	8f 89       	ldd	r24, Y+23	; 0x17
    1520:	8d 32       	cpi	r24, 0x2D	; 45
    1522:	d9 f4       	brne	.+54     	; 0x155a <display_temperature+0xd0>
    1524:	8b e0       	ldi	r24, 0x0B	; 11
    1526:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <display_out_buf>
    152a:	ff 20       	and	r15, r15
    152c:	59 f0       	breq	.+22     	; 0x1544 <display_temperature+0xba>
    152e:	88 8d       	ldd	r24, Y+24	; 0x18
    1530:	ef e7       	ldi	r30, 0x7F	; 127
    1532:	f4 e0       	ldi	r31, 0x04	; 4
    1534:	8f 70       	andi	r24, 0x0F	; 15
    1536:	81 83       	std	Z+1, r24	; 0x01
    1538:	89 8d       	ldd	r24, Y+25	; 0x19
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	82 83       	std	Z+2, r24	; 0x02
    153e:	8c e0       	ldi	r24, 0x0C	; 12
    1540:	83 83       	std	Z+3, r24	; 0x03
    1542:	2c c0       	rjmp	.+88     	; 0x159c <display_temperature+0x112>
    1544:	88 8d       	ldd	r24, Y+24	; 0x18
    1546:	ef e7       	ldi	r30, 0x7F	; 127
    1548:	f4 e0       	ldi	r31, 0x04	; 4
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	81 83       	std	Z+1, r24	; 0x01
    154e:	89 8d       	ldd	r24, Y+25	; 0x19
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	82 83       	std	Z+2, r24	; 0x02
    1554:	8c e0       	ldi	r24, 0x0C	; 12
    1556:	83 83       	std	Z+3, r24	; 0x03
    1558:	21 c0       	rjmp	.+66     	; 0x159c <display_temperature+0x112>
    155a:	88 8d       	ldd	r24, Y+24	; 0x18
    155c:	8d 32       	cpi	r24, 0x2D	; 45
    155e:	21 f4       	brne	.+8      	; 0x1568 <display_temperature+0xde>
    1560:	8b e0       	ldi	r24, 0x0B	; 11
    1562:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <display_out_buf>
    1566:	03 c0       	rjmp	.+6      	; 0x156e <display_temperature+0xe4>
    1568:	8f 70       	andi	r24, 0x0F	; 15
    156a:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <display_out_buf>
    156e:	ff 20       	and	r15, r15
    1570:	61 f0       	breq	.+24     	; 0x158a <display_temperature+0x100>
    1572:	89 8d       	ldd	r24, Y+25	; 0x19
    1574:	ef e7       	ldi	r30, 0x7F	; 127
    1576:	f4 e0       	ldi	r31, 0x04	; 4
    1578:	8f 70       	andi	r24, 0x0F	; 15
    157a:	80 68       	ori	r24, 0x80	; 128
    157c:	81 83       	std	Z+1, r24	; 0x01
    157e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1580:	8f 70       	andi	r24, 0x0F	; 15
    1582:	82 83       	std	Z+2, r24	; 0x02
    1584:	8c e0       	ldi	r24, 0x0C	; 12
    1586:	83 83       	std	Z+3, r24	; 0x03
    1588:	09 c0       	rjmp	.+18     	; 0x159c <display_temperature+0x112>
    158a:	89 8d       	ldd	r24, Y+25	; 0x19
    158c:	ef e7       	ldi	r30, 0x7F	; 127
    158e:	f4 e0       	ldi	r31, 0x04	; 4
    1590:	8f 70       	andi	r24, 0x0F	; 15
    1592:	81 83       	std	Z+1, r24	; 0x01
    1594:	8c e0       	ldi	r24, 0x0C	; 12
    1596:	82 83       	std	Z+2, r24	; 0x02
    1598:	8a e0       	ldi	r24, 0x0A	; 10
    159a:	83 83       	std	Z+3, r24	; 0x03
    159c:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    15a0:	6f 96       	adiw	r28, 0x1f	; 31
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	08 95       	ret

000015b8 <timer_display>:
    15b8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <timer>
    15bc:	81 11       	cpse	r24, r1
    15be:	19 c0       	rjmp	.+50     	; 0x15f2 <timer_display+0x3a>
    15c0:	a6 e7       	ldi	r26, 0x76	; 118
    15c2:	b4 e0       	ldi	r27, 0x04	; 4
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	8c 91       	ld	r24, X
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	98 2f       	mov	r25, r24
    15cc:	92 95       	swap	r25
    15ce:	9f 70       	andi	r25, 0x0F	; 15
    15d0:	ef e7       	ldi	r30, 0x7F	; 127
    15d2:	f4 e0       	ldi	r31, 0x04	; 4
    15d4:	90 83       	st	Z, r25
    15d6:	8f 70       	andi	r24, 0x0F	; 15
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	81 83       	std	Z+1, r24	; 0x01
    15dc:	12 96       	adiw	r26, 0x02	; 2
    15de:	8c 91       	ld	r24, X
    15e0:	98 2f       	mov	r25, r24
    15e2:	92 95       	swap	r25
    15e4:	9f 70       	andi	r25, 0x0F	; 15
    15e6:	92 83       	std	Z+2, r25	; 0x02
    15e8:	8f 70       	andi	r24, 0x0F	; 15
    15ea:	83 83       	std	Z+3, r24	; 0x03
    15ec:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <Timer_blink_on>
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <timer_display+0x66>
    15f2:	98 2f       	mov	r25, r24
    15f4:	92 95       	swap	r25
    15f6:	9f 70       	andi	r25, 0x0F	; 15
    15f8:	ef e7       	ldi	r30, 0x7F	; 127
    15fa:	f4 e0       	ldi	r31, 0x04	; 4
    15fc:	90 83       	st	Z, r25
    15fe:	8f 70       	andi	r24, 0x0F	; 15
    1600:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <Clock_blink>
    1604:	89 2b       	or	r24, r25
    1606:	81 83       	std	Z+1, r24	; 0x01
    1608:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <timer+0x1>
    160c:	98 2f       	mov	r25, r24
    160e:	92 95       	swap	r25
    1610:	9f 70       	andi	r25, 0x0F	; 15
    1612:	92 83       	std	Z+2, r25	; 0x02
    1614:	8f 70       	andi	r24, 0x0F	; 15
    1616:	83 83       	std	Z+3, r24	; 0x03
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <Timer_blink_on>
    161e:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    1622:	08 95       	ret

00001624 <F_menu_check>:
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	e1 f4       	brne	.+56     	; 0x1660 <F_menu_check+0x3c>
    1628:	e9 e7       	ldi	r30, 0x79	; 121
    162a:	f4 e0       	ldi	r31, 0x04	; 4
    162c:	8f e0       	ldi	r24, 0x0F	; 15
    162e:	80 83       	st	Z, r24
    1630:	8d e0       	ldi	r24, 0x0D	; 13
    1632:	81 83       	std	Z+1, r24	; 0x01
    1634:	8d ec       	ldi	r24, 0xCD	; 205
    1636:	68 9f       	mul	r22, r24
    1638:	81 2d       	mov	r24, r1
    163a:	11 24       	eor	r1, r1
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	86 95       	lsr	r24
    1642:	98 2f       	mov	r25, r24
    1644:	9f 70       	andi	r25, 0x0F	; 15
    1646:	92 83       	std	Z+2, r25	; 0x02
    1648:	88 0f       	add	r24, r24
    164a:	98 2f       	mov	r25, r24
    164c:	99 0f       	add	r25, r25
    164e:	99 0f       	add	r25, r25
    1650:	89 0f       	add	r24, r25
    1652:	68 1b       	sub	r22, r24
    1654:	6f 70       	andi	r22, 0x0F	; 15
    1656:	63 83       	std	Z+3, r22	; 0x03
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    165e:	08 95       	ret
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	e1 f4       	brne	.+56     	; 0x169c <F_menu_check+0x78>
    1664:	e9 e7       	ldi	r30, 0x79	; 121
    1666:	f4 e0       	ldi	r31, 0x04	; 4
    1668:	86 e1       	ldi	r24, 0x16	; 22
    166a:	80 83       	st	Z, r24
    166c:	8d e0       	ldi	r24, 0x0D	; 13
    166e:	81 83       	std	Z+1, r24	; 0x01
    1670:	8d ec       	ldi	r24, 0xCD	; 205
    1672:	68 9f       	mul	r22, r24
    1674:	81 2d       	mov	r24, r1
    1676:	11 24       	eor	r1, r1
    1678:	86 95       	lsr	r24
    167a:	86 95       	lsr	r24
    167c:	86 95       	lsr	r24
    167e:	98 2f       	mov	r25, r24
    1680:	9f 70       	andi	r25, 0x0F	; 15
    1682:	92 83       	std	Z+2, r25	; 0x02
    1684:	88 0f       	add	r24, r24
    1686:	98 2f       	mov	r25, r24
    1688:	99 0f       	add	r25, r25
    168a:	99 0f       	add	r25, r25
    168c:	89 0f       	add	r24, r25
    168e:	68 1b       	sub	r22, r24
    1690:	6f 70       	andi	r22, 0x0F	; 15
    1692:	63 83       	std	Z+3, r22	; 0x03
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    169a:	08 95       	ret
    169c:	e9 e7       	ldi	r30, 0x79	; 121
    169e:	f4 e0       	ldi	r31, 0x04	; 4
    16a0:	91 e1       	ldi	r25, 0x11	; 17
    16a2:	90 83       	st	Z, r25
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	81 83       	std	Z+1, r24	; 0x01
    16a8:	8d e0       	ldi	r24, 0x0D	; 13
    16aa:	82 83       	std	Z+2, r24	; 0x02
    16ac:	63 83       	std	Z+3, r22	; 0x03
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    16b4:	08 95       	ret

000016b6 <Fav_menu_check>:
    16b6:	e9 e7       	ldi	r30, 0x79	; 121
    16b8:	f4 e0       	ldi	r31, 0x04	; 4
    16ba:	97 e1       	ldi	r25, 0x17	; 23
    16bc:	90 83       	st	Z, r25
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	98 0f       	add	r25, r24
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	81 11       	cpse	r24, r1
    16c6:	16 c0       	rjmp	.+44     	; 0x16f4 <Fav_menu_check+0x3e>
    16c8:	8d ec       	ldi	r24, 0xCD	; 205
    16ca:	68 9f       	mul	r22, r24
    16cc:	81 2d       	mov	r24, r1
    16ce:	11 24       	eor	r1, r1
    16d0:	86 95       	lsr	r24
    16d2:	86 95       	lsr	r24
    16d4:	86 95       	lsr	r24
    16d6:	98 2f       	mov	r25, r24
    16d8:	9f 70       	andi	r25, 0x0F	; 15
    16da:	92 83       	std	Z+2, r25	; 0x02
    16dc:	88 0f       	add	r24, r24
    16de:	98 2f       	mov	r25, r24
    16e0:	99 0f       	add	r25, r25
    16e2:	99 0f       	add	r25, r25
    16e4:	89 0f       	add	r24, r25
    16e6:	68 1b       	sub	r22, r24
    16e8:	6f 70       	andi	r22, 0x0F	; 15
    16ea:	63 83       	std	Z+3, r22	; 0x03
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    16f2:	08 95       	ret
    16f4:	e9 e7       	ldi	r30, 0x79	; 121
    16f6:	f4 e0       	ldi	r31, 0x04	; 4
    16f8:	8d e0       	ldi	r24, 0x0D	; 13
    16fa:	82 83       	std	Z+2, r24	; 0x02
    16fc:	63 83       	std	Z+3, r22	; 0x03
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    1704:	08 95       	ret

00001706 <Buzzer>:
    1706:	88 23       	and	r24, r24
    1708:	59 f0       	breq	.+22     	; 0x1720 <Buzzer+0x1a>
    170a:	85 b1       	in	r24, 0x05	; 5
    170c:	88 60       	ori	r24, 0x08	; 8
    170e:	85 b9       	out	0x05, r24	; 5
    1710:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
    1714:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    1718:	89 e0       	ldi	r24, 0x09	; 9
    171a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    171e:	08 95       	ret
    1720:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    1724:	85 b1       	in	r24, 0x05	; 5
    1726:	87 7f       	andi	r24, 0xF7	; 247
    1728:	85 b9       	out	0x05, r24	; 5
    172a:	08 95       	ret

0000172c <Display_set_menu>:
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	12 c0       	rjmp	.+36     	; 0x1756 <Display_set_menu+0x2a>
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	91 05       	cpc	r25, r1
    1736:	4c f4       	brge	.+18     	; 0x174a <Display_set_menu+0x1e>
    1738:	fc 01       	movw	r30, r24
    173a:	e7 58       	subi	r30, 0x87	; 135
    173c:	fb 4f       	sbci	r31, 0xFB	; 251
    173e:	20 81       	ld	r18, Z
    1740:	fc 01       	movw	r30, r24
    1742:	e1 58       	subi	r30, 0x81	; 129
    1744:	fb 4f       	sbci	r31, 0xFB	; 251
    1746:	20 83       	st	Z, r18
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <Display_set_menu+0x28>
    174a:	2d e0       	ldi	r18, 0x0D	; 13
    174c:	fc 01       	movw	r30, r24
    174e:	e1 58       	subi	r30, 0x81	; 129
    1750:	fb 4f       	sbci	r31, 0xFB	; 251
    1752:	20 83       	st	Z, r18
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <Digits_disp>
    175a:	02 2e       	mov	r0, r18
    175c:	00 0c       	add	r0, r0
    175e:	33 0b       	sbc	r19, r19
    1760:	82 17       	cp	r24, r18
    1762:	93 07       	cpc	r25, r19
    1764:	34 f3       	brlt	.-52     	; 0x1732 <Display_set_menu+0x6>
    1766:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    176a:	08 95       	ret

0000176c <Display_set_clock>:
    176c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	a1 f4       	brne	.+40     	; 0x179c <Display_set_clock+0x30>
    1774:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	84 f0       	brlt	.+32     	; 0x179c <Display_set_clock+0x30>
    177c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1780:	86 36       	cpi	r24, 0x66	; 102
    1782:	61 f0       	breq	.+24     	; 0x179c <Display_set_clock+0x30>
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <shift>
    178a:	e9 e7       	ldi	r30, 0x79	; 121
    178c:	f4 e0       	ldi	r31, 0x04	; 4
    178e:	81 81       	ldd	r24, Z+1	; 0x01
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	81 83       	std	Z+1, r24	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	8f 77       	andi	r24, 0x7F	; 127
    1798:	82 83       	std	Z+2, r24	; 0x02
    179a:	2a c0       	rjmp	.+84     	; 0x17f0 <Display_set_clock+0x84>
    179c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	a1 f4       	brne	.+40     	; 0x17cc <Display_set_clock+0x60>
    17a4:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	84 f0       	brlt	.+32     	; 0x17cc <Display_set_clock+0x60>
    17ac:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17b0:	85 36       	cpi	r24, 0x65	; 101
    17b2:	61 f0       	breq	.+24     	; 0x17cc <Display_set_clock+0x60>
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <shift>
    17ba:	e9 e7       	ldi	r30, 0x79	; 121
    17bc:	f4 e0       	ldi	r31, 0x04	; 4
    17be:	81 81       	ldd	r24, Z+1	; 0x01
    17c0:	8f 77       	andi	r24, 0x7F	; 127
    17c2:	81 83       	std	Z+1, r24	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	8f 77       	andi	r24, 0x7F	; 127
    17c8:	82 83       	std	Z+2, r24	; 0x02
    17ca:	12 c0       	rjmp	.+36     	; 0x17f0 <Display_set_clock+0x84>
    17cc:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17d0:	84 34       	cpi	r24, 0x44	; 68
    17d2:	21 f0       	breq	.+8      	; 0x17dc <Display_set_clock+0x70>
    17d4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17d8:	84 36       	cpi	r24, 0x64	; 100
    17da:	69 f4       	brne	.+26     	; 0x17f6 <Display_set_clock+0x8a>
    17dc:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
    17e0:	e9 e7       	ldi	r30, 0x79	; 121
    17e2:	f4 e0       	ldi	r31, 0x04	; 4
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	81 83       	std	Z+1, r24	; 0x01
    17ea:	83 81       	ldd	r24, Z+3	; 0x03
    17ec:	80 68       	ori	r24, 0x80	; 128
    17ee:	83 83       	std	Z+3, r24	; 0x03
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	30 c0       	rjmp	.+96     	; 0x1856 <Display_set_clock+0xea>
    17f6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    17fa:	83 36       	cpi	r24, 0x63	; 99
    17fc:	79 f4       	brne	.+30     	; 0x181c <Display_set_clock+0xb0>
    17fe:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	14 f4       	brge	.+4      	; 0x180a <Display_set_clock+0x9e>
    1806:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
    180a:	e9 e7       	ldi	r30, 0x79	; 121
    180c:	f4 e0       	ldi	r31, 0x04	; 4
    180e:	81 81       	ldd	r24, Z+1	; 0x01
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	81 83       	std	Z+1, r24	; 0x01
    1814:	83 81       	ldd	r24, Z+3	; 0x03
    1816:	80 68       	ori	r24, 0x80	; 128
    1818:	83 83       	std	Z+3, r24	; 0x03
    181a:	ea cf       	rjmp	.-44     	; 0x17f0 <Display_set_clock+0x84>
    181c:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
    1820:	e9 e7       	ldi	r30, 0x79	; 121
    1822:	f4 e0       	ldi	r31, 0x04	; 4
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	80 68       	ori	r24, 0x80	; 128
    1828:	81 83       	std	Z+1, r24	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	80 68       	ori	r24, 0x80	; 128
    182e:	82 83       	std	Z+2, r24	; 0x02
    1830:	83 81       	ldd	r24, Z+3	; 0x03
    1832:	80 68       	ori	r24, 0x80	; 128
    1834:	83 83       	std	Z+3, r24	; 0x03
    1836:	dc cf       	rjmp	.-72     	; 0x17f0 <Display_set_clock+0x84>
    1838:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <shift>
    183c:	fc 01       	movw	r30, r24
    183e:	e2 0f       	add	r30, r18
    1840:	f1 1d       	adc	r31, r1
    1842:	27 fd       	sbrc	r18, 7
    1844:	fa 95       	dec	r31
    1846:	e7 58       	subi	r30, 0x87	; 135
    1848:	fb 4f       	sbci	r31, 0xFB	; 251
    184a:	20 81       	ld	r18, Z
    184c:	fc 01       	movw	r30, r24
    184e:	e1 58       	subi	r30, 0x81	; 129
    1850:	fb 4f       	sbci	r31, 0xFB	; 251
    1852:	20 83       	st	Z, r18
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	86 30       	cpi	r24, 0x06	; 6
    1858:	91 05       	cpc	r25, r1
    185a:	74 f3       	brlt	.-36     	; 0x1838 <Display_set_clock+0xcc>
    185c:	ef e7       	ldi	r30, 0x7F	; 127
    185e:	f4 e0       	ldi	r31, 0x04	; 4
    1860:	8d e0       	ldi	r24, 0x0D	; 13
    1862:	86 83       	std	Z+6, r24	; 0x06
    1864:	87 83       	std	Z+7, r24	; 0x07
    1866:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
    186a:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    186e:	08 95       	ret

00001870 <photo_sample>:

void photo_sample(void)
{
    1870:	cf 93       	push	r28
	uint8_t read_sample = ADCH;
    1872:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	if (read_sample<13){
    1876:	8d 30       	cpi	r24, 0x0D	; 13
    1878:	28 f0       	brcs	.+10     	; 0x1884 <photo_sample+0x14>
		read_sample = 16;
	}else{
		read_sample = 17-(read_sample / 16);
    187a:	82 95       	swap	r24
    187c:	8f 70       	andi	r24, 0x0F	; 15
    187e:	c1 e1       	ldi	r28, 0x11	; 17
    1880:	c8 1b       	sub	r28, r24
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <photo_sample+0x16>

void photo_sample(void)
{
	uint8_t read_sample = ADCH;
	if (read_sample<13){
		read_sample = 16;
    1884:	c0 e1       	ldi	r28, 0x10	; 16
	}else{
		read_sample = 17-(read_sample / 16);
	}
	if (samples_metter==-1){
    1886:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <samples_metter>
    188a:	8f 3f       	cpi	r24, 0xFF	; 255
    188c:	e1 f4       	brne	.+56     	; 0x18c6 <photo_sample+0x56>
		samples_metter=0;
    188e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <samples_metter>
		uint8_t eepbright = eeprom_read_byte((uint8_t*)F_eep + Brightness);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
		if (eepbright>0)
    189a:	88 23       	and	r24, r24
    189c:	19 f0       	breq	.+6      	; 0x18a4 <photo_sample+0x34>
		{
			sram_brigt = eepbright;
    189e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sram_brigt>
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <photo_sample+0x38>
		}else{
			sram_brigt = read_sample;
    18a4:	c0 93 09 01 	sts	0x0109, r28	; 0x800109 <sram_brigt>
		}
		
		if (eeprom_read_byte((uint8_t*)FAV_eep + TLC_drivers_Enable))	
    18a8:	8a e0       	ldi	r24, 0x0A	; 10
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    18b0:	88 23       	and	r24, r24
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <photo_sample+0x56>
		TLC_config_byte(sram_brigt,eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS));
    18b4:	88 e0       	ldi	r24, 0x08	; 8
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    18bc:	68 2f       	mov	r22, r24
    18be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sram_brigt>
    18c2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TLC_config_byte>
		
	}
	photo_samples[samples_metter] = read_sample; 
    18c6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <samples_metter>
    18ca:	e8 2f       	mov	r30, r24
    18cc:	08 2e       	mov	r0, r24
    18ce:	00 0c       	add	r0, r0
    18d0:	ff 0b       	sbc	r31, r31
    18d2:	ee 5c       	subi	r30, 0xCE	; 206
    18d4:	fb 4f       	sbci	r31, 0xFB	; 251
    18d6:	c0 83       	st	Z, r28
	samples_metter++;
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <samples_metter>
	if (samples_metter>=SAMPLES_MAX)
    18de:	8c 33       	cpi	r24, 0x3C	; 60
    18e0:	54 f4       	brge	.+20     	; 0x18f6 <photo_sample+0x86>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <photo_sample+0xb0>
	{
		uint16_t A=0;
		uint8_t i;
		for (i=0;i<SAMPLES_MAX;i++){A += photo_samples[i];}
    18e4:	e8 2f       	mov	r30, r24
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	ee 5c       	subi	r30, 0xCE	; 206
    18ea:	fb 4f       	sbci	r31, 0xFB	; 251
    18ec:	90 81       	ld	r25, Z
    18ee:	29 0f       	add	r18, r25
    18f0:	31 1d       	adc	r19, r1
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <photo_sample+0x8c>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8c 33       	cpi	r24, 0x3C	; 60
    18fe:	90 f3       	brcs	.-28     	; 0x18e4 <photo_sample+0x74>
		samples_metter=0;
    1900:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <samples_metter>
		sram_brigt = A/SAMPLES_MAX;
    1904:	a9 e8       	ldi	r26, 0x89	; 137
    1906:	b8 e8       	ldi	r27, 0x88	; 136
    1908:	0e 94 83 25 	call	0x4b06	; 0x4b06 <__umulhisi3>
    190c:	96 95       	lsr	r25
    190e:	87 95       	ror	r24
    1910:	92 95       	swap	r25
    1912:	82 95       	swap	r24
    1914:	8f 70       	andi	r24, 0x0F	; 15
    1916:	89 27       	eor	r24, r25
    1918:	9f 70       	andi	r25, 0x0F	; 15
    191a:	89 27       	eor	r24, r25
    191c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sram_brigt>
		//uint8_t digits = eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
		//TLC_config_byte(sram_brigt,digits);
	} 
}
    1920:	cf 91       	pop	r28
    1922:	08 95       	ret

00001924 <chek_timer_alarms>:
	user_instruction=0;
	display_init(1);
}

void chek_timer_alarms(void)
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
	if (alarm[0])
    192c:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <alarm>
    1930:	88 23       	and	r24, r24
    1932:	69 f0       	breq	.+26     	; 0x194e <chek_timer_alarms+0x2a>
	{
		alarm[1]--;
    1934:	e4 e7       	ldi	r30, 0x74	; 116
    1936:	f4 e0       	ldi	r31, 0x04	; 4
    1938:	81 81       	ldd	r24, Z+1	; 0x01
    193a:	81 50       	subi	r24, 0x01	; 1
    193c:	81 83       	std	Z+1, r24	; 0x01
		if (alarm[1]==0)
    193e:	81 11       	cpse	r24, r1
    1940:	06 c0       	rjmp	.+12     	; 0x194e <chek_timer_alarms+0x2a>
		{
			alarm[0]=0;
    1942:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <alarm>
			Buzzer(0,1000);
    1946:	68 ee       	ldi	r22, 0xE8	; 232
    1948:	73 e0       	ldi	r23, 0x03	; 3
    194a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
	}
	int8_t a = (eeprom_read_byte((uint8_t*)Countdown_alarm1));
    194e:	86 e1       	ldi	r24, 0x16	; 22
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1956:	18 2f       	mov	r17, r24
	int8_t b = (eeprom_read_byte((uint8_t*)Countdown_alarm1+1));
    1958:	87 e1       	ldi	r24, 0x17	; 23
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1960:	08 2f       	mov	r16, r24
	int8_t c = (eeprom_read_byte((uint8_t*)Countdown_alarm1+2));
    1962:	88 e1       	ldi	r24, 0x18	; 24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
	if (timer[0]== a && timer[1]== b && timer[2]== c)
    196a:	c0 91 76 04 	lds	r28, 0x0476	; 0x800476 <timer>
    196e:	d0 e0       	ldi	r29, 0x00	; 0
    1970:	21 2f       	mov	r18, r17
    1972:	11 0f       	add	r17, r17
    1974:	33 0b       	sbc	r19, r19
    1976:	c2 17       	cp	r28, r18
    1978:	d3 07       	cpc	r29, r19
    197a:	09 f5       	brne	.+66     	; 0x19be <chek_timer_alarms+0x9a>
    197c:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <timer+0x1>
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	20 2f       	mov	r18, r16
    1984:	00 0f       	add	r16, r16
    1986:	33 0b       	sbc	r19, r19
    1988:	42 17       	cp	r20, r18
    198a:	53 07       	cpc	r21, r19
    198c:	c1 f4       	brne	.+48     	; 0x19be <chek_timer_alarms+0x9a>
    198e:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <timer+0x2>
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	08 2e       	mov	r0, r24
    1996:	00 0c       	add	r0, r0
    1998:	99 0b       	sbc	r25, r25
    199a:	28 17       	cp	r18, r24
    199c:	39 07       	cpc	r19, r25
    199e:	79 f4       	brne	.+30     	; 0x19be <chek_timer_alarms+0x9a>
	{
		alarm[0]=1;
    19a0:	c4 e7       	ldi	r28, 0x74	; 116
    19a2:	d4 e0       	ldi	r29, 0x04	; 4
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	88 83       	st	Y, r24
		alarm[1]= (eeprom_read_byte((uint8_t*)F_eep+Countdown_alarms));
    19a8:	85 e0       	ldi	r24, 0x05	; 5
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    19b0:	89 83       	std	Y+1, r24	; 0x01
		Buzzer(1,16600);
    19b2:	68 ed       	ldi	r22, 0xD8	; 216
    19b4:	70 e4       	ldi	r23, 0x40	; 64
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    19bc:	34 c0       	rjmp	.+104    	; 0x1a26 <chek_timer_alarms+0x102>
	}else{
		a = (eeprom_read_byte((uint8_t*)Countdown_alarm2));
    19be:	89 e1       	ldi	r24, 0x19	; 25
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    19c6:	18 2f       	mov	r17, r24
		b = (eeprom_read_byte((uint8_t*)Countdown_alarm2+1));
    19c8:	8a e1       	ldi	r24, 0x1A	; 26
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    19d0:	08 2f       	mov	r16, r24
		c = (eeprom_read_byte((uint8_t*)Countdown_alarm2+2));
    19d2:	8b e1       	ldi	r24, 0x1B	; 27
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
		if (timer[0]== a && timer[1]== b && timer[2]== c)
    19da:	21 2f       	mov	r18, r17
    19dc:	11 0f       	add	r17, r17
    19de:	33 0b       	sbc	r19, r19
    19e0:	c2 17       	cp	r28, r18
    19e2:	d3 07       	cpc	r29, r19
    19e4:	01 f5       	brne	.+64     	; 0x1a26 <chek_timer_alarms+0x102>
    19e6:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <timer+0x1>
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	20 2f       	mov	r18, r16
    19ee:	00 0f       	add	r16, r16
    19f0:	33 0b       	sbc	r19, r19
    19f2:	42 17       	cp	r20, r18
    19f4:	53 07       	cpc	r21, r19
    19f6:	b9 f4       	brne	.+46     	; 0x1a26 <chek_timer_alarms+0x102>
    19f8:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <timer+0x2>
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	08 2e       	mov	r0, r24
    1a00:	00 0c       	add	r0, r0
    1a02:	99 0b       	sbc	r25, r25
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	71 f4       	brne	.+28     	; 0x1a26 <chek_timer_alarms+0x102>
		{
			alarm[0]=1;
    1a0a:	c4 e7       	ldi	r28, 0x74	; 116
    1a0c:	d4 e0       	ldi	r29, 0x04	; 4
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	88 83       	st	Y, r24
			alarm[1]= (eeprom_read_byte((uint8_t*)F_eep+Countdown_alarms));
    1a12:	85 e0       	ldi	r24, 0x05	; 5
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1a1a:	89 83       	std	Y+1, r24	; 0x01
			Buzzer(1,8800);
    1a1c:	60 e6       	ldi	r22, 0x60	; 96
    1a1e:	72 e2       	ldi	r23, 0x22	; 34
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
	}
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <update_score_display>:

void update_score_display(void){
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <update_score_display+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <update_score_display+0x8>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	char str[4];
	itoa(Score_home,str,10);
    1a3c:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1a40:	4a e0       	ldi	r20, 0x0A	; 10
    1a42:	be 01       	movw	r22, r28
    1a44:	6f 5f       	subi	r22, 0xFF	; 255
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__itoa_ncheck>
	if (!str[1]){
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	81 11       	cpse	r24, r1
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <update_score_display+0x34>
		display_out_buf[4]=SPACE;
    1a54:	ef e7       	ldi	r30, 0x7F	; 127
    1a56:	f4 e0       	ldi	r31, 0x04	; 4
    1a58:	8d e0       	ldi	r24, 0x0D	; 13
    1a5a:	84 83       	std	Z+4, r24	; 0x04
		display_out_buf[5]=str[0]&0xf;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	8f 70       	andi	r24, 0x0F	; 15
    1a60:	85 83       	std	Z+5, r24	; 0x05
    1a62:	07 c0       	rjmp	.+14     	; 0x1a72 <update_score_display+0x42>
	}else{
		display_out_buf[4]=str[0]&0xf;
    1a64:	99 81       	ldd	r25, Y+1	; 0x01
    1a66:	ef e7       	ldi	r30, 0x7F	; 127
    1a68:	f4 e0       	ldi	r31, 0x04	; 4
    1a6a:	9f 70       	andi	r25, 0x0F	; 15
    1a6c:	94 83       	std	Z+4, r25	; 0x04
		display_out_buf[5]=str[1]&0xf;
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	85 83       	std	Z+5, r24	; 0x05
	}
	itoa(Score_guest,str,10);
    1a72:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    1a76:	4a e0       	ldi	r20, 0x0A	; 10
    1a78:	be 01       	movw	r22, r28
    1a7a:	6f 5f       	subi	r22, 0xFF	; 255
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__itoa_ncheck>
	display_out_buf[6]=str[0]&0xf;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	8f 70       	andi	r24, 0x0F	; 15
    1a88:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <display_out_buf+0x6>
	if (str[1]){display_out_buf[7]=str[1]&0xf;}else{display_out_buf[7]=SPACE;}
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	88 23       	and	r24, r24
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <update_score_display+0x6a>
    1a92:	8f 70       	andi	r24, 0x0F	; 15
    1a94:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <update_score_display+0x70>
    1a9a:	8d e0       	ldi	r24, 0x0D	; 13
    1a9c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
	if (display_out_buf[8]==SPACE){
    1aa0:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <display_out_buf+0x8>
    1aa4:	8d 30       	cpi	r24, 0x0D	; 13
    1aa6:	29 f4       	brne	.+10     	; 0x1ab2 <update_score_display+0x82>
		display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
    1aa8:	ef e7       	ldi	r30, 0x7F	; 127
    1aaa:	f4 e0       	ldi	r31, 0x04	; 4
    1aac:	10 86       	std	Z+8, r1	; 0x08
    1aae:	11 86       	std	Z+9, r1	; 0x09
    1ab0:	12 86       	std	Z+10, r1	; 0x0a
	}
	
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <display_init>:
	}
	return 0;
}

void display_init(int8_t prog){
	Menu_blink_on=0;
    1ac0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <Menu_blink_on>
	Change_timer_on=0;
    1ac4:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <Change_timer_on>
	if (prog!=0){Program_display=prog;}
    1ac8:	81 11       	cpse	r24, r1
    1aca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
	Clock_blink_on=0;
    1ace:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <Clock_blink_on>
	//Clock_blink = 0x00;
	Timer_blink_on=0;
    1ad2:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <Timer_blink_on>
	Program_display_time=20;					
    1ad6:	84 e1       	ldi	r24, 0x14	; 20
    1ad8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Program_display_time>
	if (Program_display>3){Program_display=1;}
    1adc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Program_display>
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	18 f0       	brcs	.+6      	; 0x1aea <display_init+0x2a>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
	Timer_devide=0x1fff;
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	9f e1       	ldi	r25, 0x1F	; 31
    1aee:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <Timer_devide+0x1>
    1af2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Timer_devide>
	update_score_display();
    1af6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
    1afa:	08 95       	ret

00001afc <__vector_18>:
		}
	}
	do_rclk();
}

ISR(TIMER0_OVF_vect) {
    1afc:	1f 92       	push	r1
    1afe:	0f 92       	push	r0
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	2f 93       	push	r18
    1b10:	3f 93       	push	r19
    1b12:	4f 93       	push	r20
    1b14:	5f 93       	push	r21
    1b16:	6f 93       	push	r22
    1b18:	7f 93       	push	r23
    1b1a:	8f 93       	push	r24
    1b1c:	9f 93       	push	r25
    1b1e:	af 93       	push	r26
    1b20:	bf 93       	push	r27
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ef 93       	push	r30
    1b28:	ff 93       	push	r31
	wdt_reset();
    1b2a:	a8 95       	wdr
	Timer_bright++;
    1b2c:	c0 91 29 04 	lds	r28, 0x0429	; 0x800429 <Timer_bright>
    1b30:	d0 91 2a 04 	lds	r29, 0x042A	; 0x80042a <Timer_bright+0x1>
    1b34:	21 96       	adiw	r28, 0x01	; 1
    1b36:	d0 93 2a 04 	sts	0x042A, r29	; 0x80042a <Timer_bright+0x1>
    1b3a:	c0 93 29 04 	sts	0x0429, r28	; 0x800429 <Timer_bright>
	if (Timer_Butt_Minus>0){Timer_Butt_Minus--;}
    1b3e:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    1b42:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <__vector_18+0x58>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    1b50:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
	if (Timer_Butt_Start>0){Timer_Butt_Start--;}	
    1b54:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <Timer_Butt_Start>
    1b58:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <Timer_Butt_Start+0x1>
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <__vector_18+0x6e>
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <Timer_Butt_Start+0x1>
    1b66:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <Timer_Butt_Start>
	//if (Timer_Butt_Minus==1){KORN_ON();	_delay_ms(400); KORN_OFF();}
	uint8_t TLC_divers = eeprom_read_byte((uint8_t*)FAV_eep + TLC_drivers_Enable);
    1b6a:	8a e0       	ldi	r24, 0x0A	; 10
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1b72:	08 2f       	mov	r16, r24
	uint8_t bright = eeprom_read_byte((uint8_t*)F_eep + Brightness);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1b7c:	18 2f       	mov	r17, r24
	if (bright==0){bright = sram_brigt;}
    1b7e:	81 11       	cpse	r24, r1
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <__vector_18+0x8a>
    1b82:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <sram_brigt>
	if (bright<0)
	bright=16;
	
	if (Timer_bright>=3 && !TLC_divers) {
    1b86:	c3 30       	cpi	r28, 0x03	; 3
    1b88:	d1 05       	cpc	r29, r1
    1b8a:	30 f1       	brcs	.+76     	; 0x1bd8 <__vector_18+0xdc>
    1b8c:	01 11       	cpse	r16, r1
    1b8e:	24 c0       	rjmp	.+72     	; 0x1bd8 <__vector_18+0xdc>
		Timer_bright=0;
    1b90:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <Timer_bright+0x1>
    1b94:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <Timer_bright>
		Count_bright++;		
    1b98:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <Count_bright>
    1b9c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <Count_bright+0x1>
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <Count_bright+0x1>
    1ba6:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <Count_bright>
		if (bright>=Count_bright)
    1baa:	21 2f       	mov	r18, r17
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	28 17       	cp	r18, r24
    1bb0:	39 07       	cpc	r19, r25
    1bb2:	20 f0       	brcs	.+8      	; 0x1bbc <__vector_18+0xc0>
		DISPLAY_ON();
    1bb4:	82 b1       	in	r24, 0x02	; 2
    1bb6:	8b 7f       	andi	r24, 0xFB	; 251
    1bb8:	82 b9       	out	0x02, r24	; 2
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <__vector_18+0xc6>
		else
		DISPLAY_OFF();		
    1bbc:	82 b1       	in	r24, 0x02	; 2
    1bbe:	84 60       	ori	r24, 0x04	; 4
    1bc0:	82 b9       	out	0x02, r24	; 2
		if (Count_bright==16) {Count_bright=0;}		
    1bc2:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <Count_bright>
    1bc6:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <Count_bright+0x1>
    1bca:	40 97       	sbiw	r24, 0x10	; 16
    1bcc:	b1 f4       	brne	.+44     	; 0x1bfa <__vector_18+0xfe>
    1bce:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <Count_bright+0x1>
    1bd2:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <Count_bright>
    1bd6:	11 c0       	rjmp	.+34     	; 0x1bfa <__vector_18+0xfe>
	}
	else if (Timer_bright>=0xfff0 && TLC_divers){
    1bd8:	c0 3f       	cpi	r28, 0xF0	; 240
    1bda:	df 4f       	sbci	r29, 0xFF	; 255
    1bdc:	70 f0       	brcs	.+28     	; 0x1bfa <__vector_18+0xfe>
    1bde:	00 23       	and	r16, r16
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <__vector_18+0xfe>
		TLC_config_byte(bright,eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS));
    1be2:	88 e0       	ldi	r24, 0x08	; 8
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1bea:	68 2f       	mov	r22, r24
    1bec:	81 2f       	mov	r24, r17
    1bee:	0e 94 e6 02 	call	0x5cc	; 0x5cc <TLC_config_byte>
		Timer_bright=0;
    1bf2:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <Timer_bright+0x1>
    1bf6:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <Timer_bright>
	}
	
	
    Timer_devide++;
    1bfa:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <Timer_devide>
    1bfe:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <Timer_devide+0x1>
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <Timer_devide+0x1>
    1c08:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <Timer_devide>
    // timer for 500 ms Crystal * 250
    if (Timer_devide >= CRYSTAL_USE * 250) {
    1c0c:	80 3d       	cpi	r24, 0xD0	; 208
    1c0e:	97 40       	sbci	r25, 0x07	; 7
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <__vector_18+0x118>
    1c12:	f8 c0       	rjmp	.+496    	; 0x1e04 <__vector_18+0x308>
        PORTE ^= RED_LED;
    1c14:	9e b1       	in	r25, 0x0e	; 14
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	89 27       	eor	r24, r25
    1c1a:	8e b9       	out	0x0e, r24	; 14
        Timer_devide = 0;
    1c1c:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <Timer_devide+0x1>
    1c20:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <Timer_devide>
		if (Speaker_delay_open)
    1c24:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <Speaker_delay_open>
    1c28:	88 23       	and	r24, r24
    1c2a:	49 f0       	breq	.+18     	; 0x1c3e <__vector_18+0x142>
		{
			Speaker_delay_open--;
    1c2c:	81 50       	subi	r24, 0x01	; 1
    1c2e:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Speaker_delay_open>
			if (!Speaker_delay_open)
    1c32:	81 11       	cpse	r24, r1
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <__vector_18+0x142>
			Buzzer(0,0);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
		//check limit for relay with hysterisys 
		if ((bright+1) < eeprom_read_byte((uint8_t*)F_eep+light_swhitch)) {
    1c3e:	c1 2f       	mov	r28, r17
    1c40:	d0 e0       	ldi	r29, 0x00	; 0
    1c42:	7e 01       	movw	r14, r28
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	e8 1a       	sub	r14, r24
    1c48:	f8 0a       	sbc	r15, r24
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	e8 16       	cp	r14, r24
    1c56:	f9 06       	cpc	r15, r25
    1c58:	24 f4       	brge	.+8      	; 0x1c62 <__vector_18+0x166>
			RELAY_ON();
    1c5a:	8e b1       	in	r24, 0x0e	; 14
    1c5c:	80 62       	ori	r24, 0x20	; 32
    1c5e:	8e b9       	out	0x0e, r24	; 14
    1c60:	07 c0       	rjmp	.+14     	; 0x1c70 <__vector_18+0x174>
		}else if ((bright-1) > eeprom_read_byte((uint8_t*)F_eep+light_swhitch)) {
    1c62:	21 97       	sbiw	r28, 0x01	; 1
    1c64:	8c 17       	cp	r24, r28
    1c66:	9d 07       	cpc	r25, r29
    1c68:	1c f4       	brge	.+6      	; 0x1c70 <__vector_18+0x174>
			RELAY_OFF();
    1c6a:	8e b1       	in	r24, 0x0e	; 14
    1c6c:	8f 7d       	andi	r24, 0xDF	; 223
    1c6e:	8e b9       	out	0x0e, r24	; 14
		}
		

        if (user_instruction == 0) {
    1c70:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1c74:	81 11       	cpse	r24, r1
    1c76:	75 c0       	rjmp	.+234    	; 0x1d62 <__vector_18+0x266>
            Program_display_time++;
    1c78:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <Program_display_time>
    1c7c:	c1 e0       	ldi	r28, 0x01	; 1
    1c7e:	c2 0f       	add	r28, r18
    1c80:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <Program_display_time>
            int8_t display_eep = eeprom_read_byte((uint8_t * ) F_eep + Display_mode) & 0x0f;
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1c8c:	d8 2f       	mov	r29, r24
            int8_t Speed_eep = eeprom_read_byte((uint8_t * ) F_eep + Speed) & 0x0f;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1c96:	8f 70       	andi	r24, 0x0F	; 15
            if (Speed_eep > 9) {
    1c98:	8a 30       	cpi	r24, 0x0A	; 10
    1c9a:	0c f0       	brlt	.+2      	; 0x1c9e <__vector_18+0x1a2>
                Speed_eep = 9;
    1c9c:	89 e0       	ldi	r24, 0x09	; 9
            }
            if (Program_display_time > Speed_eep * 2) {
    1c9e:	2c 2f       	mov	r18, r28
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	08 2e       	mov	r0, r24
    1ca4:	00 0c       	add	r0, r0
    1ca6:	99 0b       	sbc	r25, r25
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	82 17       	cp	r24, r18
    1cae:	93 07       	cpc	r25, r19
    1cb0:	0c f0       	brlt	.+2      	; 0x1cb4 <__vector_18+0x1b8>
    1cb2:	40 c0       	rjmp	.+128    	; 0x1d34 <__vector_18+0x238>
                int8_t display_eep = eeprom_read_byte((uint8_t * ) F_eep + Display_mode) & 0x0f;

                if (Program_display == 1 && display_eep & 1) {
    1cb4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Program_display>
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	51 f4       	brne	.+20     	; 0x1cd0 <__vector_18+0x1d4>
    1cbc:	d0 ff       	sbrs	r29, 0
    1cbe:	08 c0       	rjmp	.+16     	; 0x1cd0 <__vector_18+0x1d4>
                    //Clock_blink = 0x80;
                    //display_Clock();
					Clock_blink_on = 1;
    1cc0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <Clock_blink_on>
                    Program_display = 2;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
                    Program_display_time = 0;
    1cca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Program_display_time>
    1cce:	32 c0       	rjmp	.+100    	; 0x1d34 <__vector_18+0x238>
                } else if (Program_display == 2 && display_eep & 2) {
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	61 f4       	brne	.+24     	; 0x1cec <__vector_18+0x1f0>
    1cd4:	d1 ff       	sbrs	r29, 1
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <__vector_18+0x1f0>
                    Clock_blink_on = 0;
    1cd8:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <Clock_blink_on>
                    display_Date();
    1cdc:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <display_Date>
                    Program_display = 3;
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
                    Program_display_time = 0;
    1ce6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Program_display_time>
    1cea:	24 c0       	rjmp	.+72     	; 0x1d34 <__vector_18+0x238>
                } else if (Program_display == 3 && display_eep & 4 ) {
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	e1 f4       	brne	.+56     	; 0x1d28 <__vector_18+0x22c>
    1cf0:	d2 ff       	sbrs	r29, 2
    1cf2:	1a c0       	rjmp	.+52     	; 0x1d28 <__vector_18+0x22c>
                    Clock_blink_on = 0;
    1cf4:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <Clock_blink_on>
					if (bright<14 && !TLC_divers){DISPLAY_OFF();}else{DISPLAY_ON();}
    1cf8:	1e 30       	cpi	r17, 0x0E	; 14
    1cfa:	30 f4       	brcc	.+12     	; 0x1d08 <__vector_18+0x20c>
    1cfc:	01 11       	cpse	r16, r1
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <__vector_18+0x20c>
    1d00:	82 b1       	in	r24, 0x02	; 2
    1d02:	84 60       	ori	r24, 0x04	; 4
    1d04:	82 b9       	out	0x02, r24	; 2
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <__vector_18+0x212>
    1d08:	82 b1       	in	r24, 0x02	; 2
    1d0a:	8b 7f       	andi	r24, 0xFB	; 251
    1d0c:	82 b9       	out	0x02, r24	; 2
                    display_temperature();
    1d0e:	0e 94 45 0a 	call	0x148a	; 0x148a <display_temperature>
					DISPLAY_ON();
    1d12:	82 b1       	in	r24, 0x02	; 2
    1d14:	8b 7f       	andi	r24, 0xFB	; 251
    1d16:	82 b9       	out	0x02, r24	; 2
                    Program_display = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
                    Program_display_time = 0;
    1d1e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Program_display_time>
					Clock_blink = 0x00;
    1d22:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <__vector_18+0x238>
                } else {
                    Program_display++;
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Program_display>
					//if (eeprom_read_byte((uint8_t*)FAV_eep + Separate_temp)==4)
					//Read_temperature();
                    display_init(0);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
                }
            }
            if (Clock_blink_on) {
    1d34:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <Clock_blink_on>
    1d38:	88 23       	and	r24, r24
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <__vector_18+0x242>
    1d3c:	63 c0       	rjmp	.+198    	; 0x1e04 <__vector_18+0x308>
				int8_t a = eeprom_read_byte((uint8_t * ) F_eep + Clock_blink_enable);
    1d3e:	87 e0       	ldi	r24, 0x07	; 7
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
                if (a) {Clock_blink ^= _BV(7);}else{Clock_blink =0x80;}
    1d46:	88 23       	and	r24, r24
    1d48:	31 f0       	breq	.+12     	; 0x1d56 <__vector_18+0x25a>
    1d4a:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Clock_blink>
    1d4e:	80 58       	subi	r24, 0x80	; 128
    1d50:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <__vector_18+0x260>
    1d56:	80 e8       	ldi	r24, 0x80	; 128
    1d58:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
                display_Clock();
    1d5c:	0e 94 ab 09 	call	0x1356	; 0x1356 <display_Clock>
    1d60:	51 c0       	rjmp	.+162    	; 0x1e04 <__vector_18+0x308>
            }
        } else if (Menu_blink_on) {
    1d62:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <Menu_blink_on>
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__vector_18+0x270>
    1d6a:	41 c0       	rjmp	.+130    	; 0x1dee <__vector_18+0x2f2>
            //blink for set clock
            Clock_blink ^= _BV(7);
    1d6c:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Clock_blink>
    1d70:	80 58       	subi	r24, 0x80	; 128
    1d72:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
            if (Clock_blink) {
    1d76:	88 23       	and	r24, r24
    1d78:	09 f1       	breq	.+66     	; 0x1dbc <__vector_18+0x2c0>
                display_out_buf[cursor - shift] &= 0b10000000;
    1d7a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    1d7e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <shift>
    1d82:	0e 2e       	mov	r0, r30
    1d84:	00 0c       	add	r0, r0
    1d86:	ff 0b       	sbc	r31, r31
    1d88:	e8 1b       	sub	r30, r24
    1d8a:	f1 09       	sbc	r31, r1
    1d8c:	87 fd       	sbrc	r24, 7
    1d8e:	f3 95       	inc	r31
    1d90:	e1 58       	subi	r30, 0x81	; 129
    1d92:	fb 4f       	sbci	r31, 0xFB	; 251
    1d94:	80 81       	ld	r24, Z
    1d96:	80 78       	andi	r24, 0x80	; 128
    1d98:	80 83       	st	Z, r24
                display_out_buf[cursor - shift] |= 0x0D;
    1d9a:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    1d9e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <shift>
    1da2:	0e 2e       	mov	r0, r30
    1da4:	00 0c       	add	r0, r0
    1da6:	ff 0b       	sbc	r31, r31
    1da8:	e8 1b       	sub	r30, r24
    1daa:	f1 09       	sbc	r31, r1
    1dac:	87 fd       	sbrc	r24, 7
    1dae:	f3 95       	inc	r31
    1db0:	e1 58       	subi	r30, 0x81	; 129
    1db2:	fb 4f       	sbci	r31, 0xFB	; 251
    1db4:	80 81       	ld	r24, Z
    1db6:	8d 60       	ori	r24, 0x0D	; 13
    1db8:	80 83       	st	Z, r24
    1dba:	16 c0       	rjmp	.+44     	; 0x1de8 <__vector_18+0x2ec>
            } else {
                display_out_buf[cursor - shift] = set_clock_buf[cursor];
    1dbc:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    1dc0:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <shift>
    1dc4:	0e 2e       	mov	r0, r30
    1dc6:	00 0c       	add	r0, r0
    1dc8:	ff 0b       	sbc	r31, r31
    1dca:	e8 1b       	sub	r30, r24
    1dcc:	f1 09       	sbc	r31, r1
    1dce:	87 fd       	sbrc	r24, 7
    1dd0:	f3 95       	inc	r31
    1dd2:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <cursor>
    1dd6:	0a 2e       	mov	r0, r26
    1dd8:	00 0c       	add	r0, r0
    1dda:	bb 0b       	sbc	r27, r27
    1ddc:	a7 58       	subi	r26, 0x87	; 135
    1dde:	bb 4f       	sbci	r27, 0xFB	; 251
    1de0:	8c 91       	ld	r24, X
    1de2:	e1 58       	subi	r30, 0x81	; 129
    1de4:	fb 4f       	sbci	r31, 0xFB	; 251
    1de6:	80 83       	st	Z, r24
            }
            Display_Out();
    1de8:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    1dec:	0b c0       	rjmp	.+22     	; 0x1e04 <__vector_18+0x308>
        } else if (Timer_blink_on) {
    1dee:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <Timer_blink_on>
    1df2:	88 23       	and	r24, r24
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <__vector_18+0x308>
			Clock_blink ^= _BV(7);
    1df6:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Clock_blink>
    1dfa:	80 58       	subi	r24, 0x80	; 128
    1dfc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Clock_blink>
			timer_display();
    1e00:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
		}
    }
	if (!eeprom_read_byte((uint8_t*)F_eep + Brightness))
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	12 c0       	rjmp	.+36     	; 0x1e34 <__vector_18+0x338>
	{
		Timer_devide_photo++;
    1e10:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <Timer_devide_photo>
    1e14:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <Timer_devide_photo+0x1>
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <Timer_devide_photo+0x1>
    1e1e:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <Timer_devide_photo>
		if (Timer_devide_photo >= CRYSTAL_USE * 1500){
    1e22:	80 3e       	cpi	r24, 0xE0	; 224
    1e24:	9e 42       	sbci	r25, 0x2E	; 46
    1e26:	30 f0       	brcs	.+12     	; 0x1e34 <__vector_18+0x338>
			Timer_devide_photo = 0;
    1e28:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <Timer_devide_photo+0x1>
    1e2c:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <Timer_devide_photo>
			photo_sample();
    1e30:	0e 94 38 0c 	call	0x1870	; 0x1870 <photo_sample>
		}
	}
}
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__vector_11>:

ISR(TIMER2_OVF_vect)
{
    1e62:	1f 92       	push	r1
    1e64:	0f 92       	push	r0
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	1f 93       	push	r17
    1e6e:	2f 93       	push	r18
    1e70:	3f 93       	push	r19
    1e72:	4f 93       	push	r20
    1e74:	5f 93       	push	r21
    1e76:	6f 93       	push	r22
    1e78:	7f 93       	push	r23
    1e7a:	8f 93       	push	r24
    1e7c:	9f 93       	push	r25
    1e7e:	af 93       	push	r26
    1e80:	bf 93       	push	r27
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ef 93       	push	r30
    1e88:	ff 93       	push	r31
	uint8_t a = timer[0], b = timer[1], c = timer[2];
    1e8a:	e6 e7       	ldi	r30, 0x76	; 118
    1e8c:	f4 e0       	ldi	r31, 0x04	; 4
    1e8e:	10 81       	ld	r17, Z
    1e90:	d1 81       	ldd	r29, Z+1	; 0x01
    1e92:	22 81       	ldd	r18, Z+2	; 0x02
	
	if (user_instruction=='A' | user_instruction=='B')
    1e94:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1e98:	30 91 30 04 	lds	r19, 0x0430	; 0x800430 <user_instruction>
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	81 34       	cpi	r24, 0x41	; 65
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <__vector_11+0x42>
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	32 34       	cpi	r19, 0x42	; 66
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <__vector_11+0x4a>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	89 2b       	or	r24, r25
    1eae:	21 f1       	breq	.+72     	; 0x1ef8 <__vector_11+0x96>
	{
		c--;	//Counter Down Normal process
    1eb0:	cf ef       	ldi	r28, 0xFF	; 255
    1eb2:	c2 0f       	add	r28, r18
		if (c>0x59) {
    1eb4:	ca 35       	cpi	r28, 0x5A	; 90
    1eb6:	c0 f0       	brcs	.+48     	; 0x1ee8 <__vector_11+0x86>
			c=0x59;
			b--;
    1eb8:	8f ef       	ldi	r24, 0xFF	; 255
    1eba:	8d 0f       	add	r24, r29
			if (b>0x59) {
    1ebc:	8a 35       	cpi	r24, 0x5A	; 90
    1ebe:	58 f0       	brcs	.+22     	; 0x1ed6 <__vector_11+0x74>
				b=0x59;
				a--;
    1ec0:	2f ef       	ldi	r18, 0xFF	; 255
    1ec2:	21 0f       	add	r18, r17
				if ((a&0x0f)>9){a-=6;}
    1ec4:	82 2f       	mov	r24, r18
    1ec6:	8f 70       	andi	r24, 0x0F	; 15
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0a 97       	sbiw	r24, 0x0a	; 10
    1ecc:	ec f1       	brlt	.+122    	; 0x1f48 <__vector_11+0xe6>
    1ece:	17 50       	subi	r17, 0x07	; 7
	
	if (user_instruction=='A' | user_instruction=='B')
	{
		c--;	//Counter Down Normal process
		if (c>0x59) {
			c=0x59;
    1ed0:	c9 e5       	ldi	r28, 0x59	; 89
			b--;
			if (b>0x59) {
				b=0x59;
    1ed2:	d9 e5       	ldi	r29, 0x59	; 89
    1ed4:	43 c0       	rjmp	.+134    	; 0x1f5c <__vector_11+0xfa>
				a--;
				if ((a&0x0f)>9){a-=6;}
				}else if ((b&0x0f)>9) {
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	2f 70       	andi	r18, 0x0F	; 15
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	2a 30       	cpi	r18, 0x0A	; 10
    1ede:	31 05       	cpc	r19, r1
    1ee0:	bc f1       	brlt	.+110    	; 0x1f50 <__vector_11+0xee>
				b-=6;
    1ee2:	d7 50       	subi	r29, 0x07	; 7
	
	if (user_instruction=='A' | user_instruction=='B')
	{
		c--;	//Counter Down Normal process
		if (c>0x59) {
			c=0x59;
    1ee4:	c9 e5       	ldi	r28, 0x59	; 89
    1ee6:	3a c0       	rjmp	.+116    	; 0x1f5c <__vector_11+0xfa>
				a--;
				if ((a&0x0f)>9){a-=6;}
				}else if ((b&0x0f)>9) {
				b-=6;
			}
			}else if ((c&0x0f)>9) {
    1ee8:	8c 2f       	mov	r24, r28
    1eea:	8f 70       	andi	r24, 0x0F	; 15
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0a 97       	sbiw	r24, 0x0a	; 10
    1ef0:	ac f1       	brlt	.+106    	; 0x1f5c <__vector_11+0xfa>
			c-=6;
    1ef2:	c9 ef       	ldi	r28, 0xF9	; 249
    1ef4:	c2 0f       	add	r28, r18
    1ef6:	32 c0       	rjmp	.+100    	; 0x1f5c <__vector_11+0xfa>
		}
	}
	else
	{
		c++;	//Up counter process 
    1ef8:	c1 e0       	ldi	r28, 0x01	; 1
    1efa:	c2 0f       	add	r28, r18
		if ((c&0x0f)>9)	{
    1efc:	8c 2f       	mov	r24, r28
    1efe:	8f 70       	andi	r24, 0x0F	; 15
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0a 97       	sbiw	r24, 0x0a	; 10
    1f04:	5c f1       	brlt	.+86     	; 0x1f5c <__vector_11+0xfa>
			if (c>=0x5a) {
    1f06:	ca 35       	cpi	r28, 0x5A	; 90
    1f08:	e0 f0       	brcs	.+56     	; 0x1f42 <__vector_11+0xe0>
				b++;
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	2d 0f       	add	r18, r29
				if ((b&0x0f)>9)	{
    1f0e:	82 2f       	mov	r24, r18
    1f10:	8f 70       	andi	r24, 0x0F	; 15
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0a 97       	sbiw	r24, 0x0a	; 10
    1f16:	24 f0       	brlt	.+8      	; 0x1f20 <__vector_11+0xbe>
					if (b>=0x9a) { // διόρθωση για γήπεδα ποσοσφαίρου 0-99 λεπτά
    1f18:	2a 39       	cpi	r18, 0x9A	; 154
    1f1a:	20 f4       	brcc	.+8      	; 0x1f24 <__vector_11+0xc2>
						//a++;
						//if ((a&0x0f)>9)	{a+=6;}
						b=0;
					}else{b+=6;}				
    1f1c:	d9 5f       	subi	r29, 0xF9	; 249
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <__vector_11+0xc4>
	else
	{
		c++;	//Up counter process 
		if ((c&0x0f)>9)	{
			if (c>=0x5a) {
				b++;
    1f20:	d2 2f       	mov	r29, r18
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <__vector_11+0xc4>
				if ((b&0x0f)>9)	{
					if (b>=0x9a) { // διόρθωση για γήπεδα ποσοσφαίρου 0-99 λεπτά
						//a++;
						//if ((a&0x0f)>9)	{a+=6;}
						b=0;
    1f24:	d0 e0       	ldi	r29, 0x00	; 0
					}else{b+=6;}				
				}
				if (eeprom_read_byte((uint8_t*)FAV_eep + Mode) == 1)
    1f26:	8f e0       	ldi	r24, 0x0F	; 15
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	91 f4       	brne	.+36     	; 0x1f56 <__vector_11+0xf4>
				{
					if (b==0x45 || b==0x90)
    1f32:	d5 34       	cpi	r29, 0x45	; 69
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <__vector_11+0xd8>
    1f36:	d0 39       	cpi	r29, 0x90	; 144
    1f38:	81 f4       	brne	.+32     	; 0x1f5a <__vector_11+0xf8>
					{
						TCCR2B =0;
    1f3a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
					}
				}
				c=0;
    1f3e:	c0 e0       	ldi	r28, 0x00	; 0
    1f40:	0d c0       	rjmp	.+26     	; 0x1f5c <__vector_11+0xfa>
			}else{c+=6;}			
    1f42:	c7 e0       	ldi	r28, 0x07	; 7
    1f44:	c2 0f       	add	r28, r18
    1f46:	0a c0       	rjmp	.+20     	; 0x1f5c <__vector_11+0xfa>
		if (c>0x59) {
			c=0x59;
			b--;
			if (b>0x59) {
				b=0x59;
				a--;
    1f48:	12 2f       	mov	r17, r18
	
	if (user_instruction=='A' | user_instruction=='B')
	{
		c--;	//Counter Down Normal process
		if (c>0x59) {
			c=0x59;
    1f4a:	c9 e5       	ldi	r28, 0x59	; 89
			b--;
			if (b>0x59) {
				b=0x59;
    1f4c:	d9 e5       	ldi	r29, 0x59	; 89
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <__vector_11+0xfa>
	if (user_instruction=='A' | user_instruction=='B')
	{
		c--;	//Counter Down Normal process
		if (c>0x59) {
			c=0x59;
			b--;
    1f50:	d8 2f       	mov	r29, r24
	
	if (user_instruction=='A' | user_instruction=='B')
	{
		c--;	//Counter Down Normal process
		if (c>0x59) {
			c=0x59;
    1f52:	c9 e5       	ldi	r28, 0x59	; 89
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <__vector_11+0xfa>
					if (b==0x45 || b==0x90)
					{
						TCCR2B =0;
					}
				}
				c=0;
    1f56:	c0 e0       	ldi	r28, 0x00	; 0
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <__vector_11+0xfa>
    1f5a:	c0 e0       	ldi	r28, 0x00	; 0
			}else{c+=6;}			
		}
	}
	
	timer[0]=a; timer[1]=b; timer[2]=c;
    1f5c:	e6 e7       	ldi	r30, 0x76	; 118
    1f5e:	f4 e0       	ldi	r31, 0x04	; 4
    1f60:	10 83       	st	Z, r17
    1f62:	d1 83       	std	Z+1, r29	; 0x01
    1f64:	c2 83       	std	Z+2, r28	; 0x02
/*	if (timer[1]>=0x9A)
	{
		timer[1] = 0;
	}*/
	timer_display();
    1f66:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	if (user_instruction=='A' || user_instruction=='B')
    1f6a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1f6e:	81 34       	cpi	r24, 0x41	; 65
    1f70:	29 f0       	breq	.+10     	; 0x1f7c <__vector_11+0x11a>
    1f72:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    1f76:	82 34       	cpi	r24, 0x42	; 66
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <__vector_11+0x11a>
    1f7a:	49 c0       	rjmp	.+146    	; 0x200e <__vector_11+0x1ac>
	{
		if (a==0 && b==0 && c==0)
    1f7c:	11 11       	cpse	r17, r1
    1f7e:	47 c0       	rjmp	.+142    	; 0x200e <__vector_11+0x1ac>
    1f80:	d1 11       	cpse	r29, r1
    1f82:	45 c0       	rjmp	.+138    	; 0x200e <__vector_11+0x1ac>
    1f84:	c1 11       	cpse	r28, r1
    1f86:	43 c0       	rjmp	.+134    	; 0x200e <__vector_11+0x1ac>
		{
			a=3;
			TCCR2B =0;
    1f88:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	timer_display();
	if (user_instruction=='A' || user_instruction=='B')
	{
		if (a==0 && b==0 && c==0)
		{
			a=3;
    1f8c:	c3 e0       	ldi	r28, 0x03	; 3
			TCCR2B =0;
			while (a>0)
    1f8e:	2e c0       	rjmp	.+92     	; 0x1fec <__vector_11+0x18a>
			{
				Buzzer(1,4000);
    1f90:	60 ea       	ldi	r22, 0xA0	; 160
    1f92:	7f e0       	ldi	r23, 0x0F	; 15
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				wdt_reset();
    1f9a:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f9c:	2f ef       	ldi	r18, 0xFF	; 255
    1f9e:	89 e6       	ldi	r24, 0x69	; 105
    1fa0:	98 e1       	ldi	r25, 0x18	; 24
    1fa2:	21 50       	subi	r18, 0x01	; 1
    1fa4:	80 40       	sbci	r24, 0x00	; 0
    1fa6:	90 40       	sbci	r25, 0x00	; 0
    1fa8:	e1 f7       	brne	.-8      	; 0x1fa2 <__vector_11+0x140>
    1faa:	00 c0       	rjmp	.+0      	; 0x1fac <__vector_11+0x14a>
    1fac:	00 00       	nop
				_delay_ms(1000);
				Buzzer(0,4000);
    1fae:	60 ea       	ldi	r22, 0xA0	; 160
    1fb0:	7f e0       	ldi	r23, 0x0F	; 15
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				b=0;
    1fb8:	8d 2f       	mov	r24, r29
				while (b<4){display_out_buf[b]= 0x0d;b++;}
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <__vector_11+0x168>
    1fbc:	e8 2f       	mov	r30, r24
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	e1 58       	subi	r30, 0x81	; 129
    1fc2:	fb 4f       	sbci	r31, 0xFB	; 251
    1fc4:	9d e0       	ldi	r25, 0x0D	; 13
    1fc6:	90 83       	st	Z, r25
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	84 30       	cpi	r24, 0x04	; 4
    1fcc:	b8 f3       	brcs	.-18     	; 0x1fbc <__vector_11+0x15a>
				Display_Out();
    1fce:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				wdt_reset();
    1fd2:	a8 95       	wdr
    1fd4:	2f ef       	ldi	r18, 0xFF	; 255
    1fd6:	89 e6       	ldi	r24, 0x69	; 105
    1fd8:	98 e1       	ldi	r25, 0x18	; 24
    1fda:	21 50       	subi	r18, 0x01	; 1
    1fdc:	80 40       	sbci	r24, 0x00	; 0
    1fde:	90 40       	sbci	r25, 0x00	; 0
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <__vector_11+0x178>
    1fe2:	00 c0       	rjmp	.+0      	; 0x1fe4 <__vector_11+0x182>
    1fe4:	00 00       	nop
				_delay_ms(1000);
				timer_display();
    1fe6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				a--;
    1fea:	c1 50       	subi	r28, 0x01	; 1
	{
		if (a==0 && b==0 && c==0)
		{
			a=3;
			TCCR2B =0;
			while (a>0)
    1fec:	c1 11       	cpse	r28, r1
    1fee:	d0 cf       	rjmp	.-96     	; 0x1f90 <__vector_11+0x12e>
				_delay_ms(1000);
				timer_display();
				a--;
			}
			//End of counter down
			wdt_reset();
    1ff0:	a8 95       	wdr
    1ff2:	2f ef       	ldi	r18, 0xFF	; 255
    1ff4:	8d e3       	ldi	r24, 0x3D	; 61
    1ff6:	99 e4       	ldi	r25, 0x49	; 73
    1ff8:	21 50       	subi	r18, 0x01	; 1
    1ffa:	80 40       	sbci	r24, 0x00	; 0
    1ffc:	90 40       	sbci	r25, 0x00	; 0
    1ffe:	e1 f7       	brne	.-8      	; 0x1ff8 <__vector_11+0x196>
    2000:	00 c0       	rjmp	.+0      	; 0x2002 <__vector_11+0x1a0>
    2002:	00 00       	nop
			_delay_ms(3000);
			user_instruction = 0;
    2004:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
		}
	}
	chek_timer_alarms();
    200e:	0e 94 92 0c 	call	0x1924	; 0x1924 <chek_timer_alarms>
}
    2012:	ff 91       	pop	r31
    2014:	ef 91       	pop	r30
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	1f 91       	pop	r17
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	0f 90       	pop	r0
    2036:	1f 90       	pop	r1
    2038:	18 95       	reti

0000203a <F_menu>:
	}
	
	Display_Out();
}

void F_menu(void){
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	28 97       	sbiw	r28, 0x08	; 8
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
	char F1_array[sizeof(F_eep)];
	int8_t i;
	for (i=0;i<sizeof(F_eep);i++)
    2056:	10 e0       	ldi	r17, 0x00	; 0
    2058:	2a c0       	rjmp	.+84     	; 0x20ae <F_menu+0x74>
	{
		F1_array[i]=eeprom_read_byte((uint8_t*)F_eep+i);
    205a:	e1 2e       	mov	r14, r17
    205c:	01 2e       	mov	r0, r17
    205e:	00 0c       	add	r0, r0
    2060:	ff 08       	sbc	r15, r15
    2062:	c7 01       	movw	r24, r14
    2064:	80 50       	subi	r24, 0x00	; 0
    2066:	90 40       	sbci	r25, 0x00	; 0
    2068:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    206c:	e1 e0       	ldi	r30, 0x01	; 1
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	ec 0f       	add	r30, r28
    2072:	fd 1f       	adc	r31, r29
    2074:	ee 0d       	add	r30, r14
    2076:	ff 1d       	adc	r31, r15
    2078:	80 83       	st	Z, r24
		if (i == Brightness || i == light_swhitch) {
    207a:	12 50       	subi	r17, 0x02	; 2
    207c:	12 30       	cpi	r17, 0x02	; 2
    207e:	58 f4       	brcc	.+22     	; 0x2096 <F_menu+0x5c>
			if (F1_array[i]>16){F1_array[i]=16;};
    2080:	81 31       	cpi	r24, 0x11	; 17
    2082:	98 f0       	brcs	.+38     	; 0x20aa <F_menu+0x70>
    2084:	e1 e0       	ldi	r30, 0x01	; 1
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	ec 0f       	add	r30, r28
    208a:	fd 1f       	adc	r31, r29
    208c:	ee 0d       	add	r30, r14
    208e:	ff 1d       	adc	r31, r15
    2090:	80 e1       	ldi	r24, 0x10	; 16
    2092:	80 83       	st	Z, r24
    2094:	0a c0       	rjmp	.+20     	; 0x20aa <F_menu+0x70>
		}else if (F1_array[i]>9) {
    2096:	8a 30       	cpi	r24, 0x0A	; 10
    2098:	40 f0       	brcs	.+16     	; 0x20aa <F_menu+0x70>
			F1_array[i]=9;
    209a:	e1 e0       	ldi	r30, 0x01	; 1
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	ec 0f       	add	r30, r28
    20a0:	fd 1f       	adc	r31, r29
    20a2:	ee 0d       	add	r30, r14
    20a4:	ff 1d       	adc	r31, r15
    20a6:	89 e0       	ldi	r24, 0x09	; 9
    20a8:	80 83       	st	Z, r24
}

void F_menu(void){
	char F1_array[sizeof(F_eep)];
	int8_t i;
	for (i=0;i<sizeof(F_eep);i++)
    20aa:	11 e0       	ldi	r17, 0x01	; 1
    20ac:	10 0f       	add	r17, r16
    20ae:	01 2f       	mov	r16, r17
    20b0:	18 30       	cpi	r17, 0x08	; 8
    20b2:	98 f2       	brcs	.-90     	; 0x205a <F_menu+0x20>
		}else if (F1_array[i]>9) {
			F1_array[i]=9;
		}		
	}
	i=0;
	set_clock_buf[0]= 0x11; //F character
    20b4:	e9 e7       	ldi	r30, 0x79	; 121
    20b6:	f4 e0       	ldi	r31, 0x04	; 4
    20b8:	81 e1       	ldi	r24, 0x11	; 17
    20ba:	80 83       	st	Z, r24
	set_clock_buf[1]= i+1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= 0x0d; //space char
    20c0:	8d e0       	ldi	r24, 0x0D	; 13
    20c2:	82 83       	std	Z+2, r24	; 0x02
	set_clock_buf[3]= F1_array[i];//eeprom_read_byte((uint8_t*)&F_eep)&0x0f;
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	83 83       	std	Z+3, r24	; 0x03
	if (set_clock_buf[3]>9)	{set_clock_buf[3]=7;}
    20c8:	8a 30       	cpi	r24, 0x0A	; 10
    20ca:	18 f0       	brcs	.+6      	; 0x20d2 <F_menu+0x98>
    20cc:	87 e0       	ldi	r24, 0x07	; 7
    20ce:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <set_clock_buf+0x3>
	cursor = 3;
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
	shift = 0;
    20d8:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Menu_blink_on=1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	Display_set_menu();
    20e2:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
	user_instruction='f';
    20e6:	86 e6       	ldi	r24, 0x66	; 102
    20e8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
			if (F1_array[i]>16){F1_array[i]=16;};
		}else if (F1_array[i]>9) {
			F1_array[i]=9;
		}		
	}
	i=0;
    20ec:	10 e0       	ldi	r17, 0x00	; 0
	cursor = 3;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='f';
	while(user_instruction!=0){
    20ee:	c4 c1       	rjmp	.+904    	; 0x2478 <F_menu+0x43e>
		if(key>=0 && key<10)
    20f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    20f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    20f8:	99 23       	and	r25, r25
    20fa:	0c f4       	brge	.+2      	; 0x20fe <F_menu+0xc4>
    20fc:	51 c0       	rjmp	.+162    	; 0x21a0 <F_menu+0x166>
    20fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2102:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2106:	0a 97       	sbiw	r24, 0x0a	; 10
    2108:	0c f0       	brlt	.+2      	; 0x210c <F_menu+0xd2>
    210a:	4a c0       	rjmp	.+148    	; 0x21a0 <F_menu+0x166>
		{
			set_clock_buf[cursor]= key;
    210c:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2110:	0e 2e       	mov	r0, r30
    2112:	00 0c       	add	r0, r0
    2114:	ff 0b       	sbc	r31, r31
    2116:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    211a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    211e:	e7 58       	subi	r30, 0x87	; 135
    2120:	fb 4f       	sbci	r31, 0xFB	; 251
    2122:	80 83       	st	Z, r24
			if(i==Brightness || i==light_swhitch){
    2124:	8e ef       	ldi	r24, 0xFE	; 254
    2126:	81 0f       	add	r24, r17
    2128:	82 30       	cpi	r24, 0x02	; 2
    212a:	d8 f4       	brcc	.+54     	; 0x2162 <F_menu+0x128>
				F1_array[i]=(set_clock_buf[2]*10)+set_clock_buf[3];
    212c:	e9 e7       	ldi	r30, 0x79	; 121
    212e:	f4 e0       	ldi	r31, 0x04	; 4
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	e1 e0       	ldi	r30, 0x01	; 1
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	ec 0f       	add	r30, r28
    213a:	fd 1f       	adc	r31, r29
    213c:	e1 0f       	add	r30, r17
    213e:	f1 1d       	adc	r31, r1
    2140:	17 fd       	sbrc	r17, 7
    2142:	fa 95       	dec	r31
    2144:	88 0f       	add	r24, r24
    2146:	28 2f       	mov	r18, r24
    2148:	22 0f       	add	r18, r18
    214a:	22 0f       	add	r18, r18
    214c:	82 0f       	add	r24, r18
    214e:	89 0f       	add	r24, r25
    2150:	80 83       	st	Z, r24
				if(cursor<3){cursor=3;}
    2152:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2156:	83 30       	cpi	r24, 0x03	; 3
    2158:	8c f4       	brge	.+34     	; 0x217c <F_menu+0x142>
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
    2160:	0d c0       	rjmp	.+26     	; 0x217c <F_menu+0x142>
			}else{
				F1_array[i]=key;
    2162:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2166:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    216a:	e1 e0       	ldi	r30, 0x01	; 1
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	ec 0f       	add	r30, r28
    2170:	fd 1f       	adc	r31, r29
    2172:	e1 0f       	add	r30, r17
    2174:	f1 1d       	adc	r31, r1
    2176:	17 fd       	sbrc	r17, 7
    2178:	fa 95       	dec	r31
    217a:	80 83       	st	Z, r24
			}
			
			key=-1;
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	9f ef       	ldi	r25, 0xFF	; 255
    2180:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2184:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<3){cursor++;}
    2188:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	2c f4       	brge	.+10     	; 0x219a <F_menu+0x160>
    2190:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_menu();
    219a:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    219e:	6c c1       	rjmp	.+728    	; 0x2478 <F_menu+0x43e>
		}
		else if (key==right && i<(sizeof(F_eep)-1))
    21a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    21a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    21a8:	46 97       	sbiw	r24, 0x16	; 22
    21aa:	c1 f4       	brne	.+48     	; 0x21dc <F_menu+0x1a2>
    21ac:	17 30       	cpi	r17, 0x07	; 7
    21ae:	b0 f4       	brcc	.+44     	; 0x21dc <F_menu+0x1a2>
		{
			i++;
    21b0:	1f 5f       	subi	r17, 0xFF	; 255
			key=-1;
    21b2:	8f ef       	ldi	r24, 0xFF	; 255
    21b4:	9f ef       	ldi	r25, 0xFF	; 255
    21b6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    21ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			F_menu_check(i,F1_array[i]);			
    21be:	e1 e0       	ldi	r30, 0x01	; 1
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	ec 0f       	add	r30, r28
    21c4:	fd 1f       	adc	r31, r29
    21c6:	e1 0f       	add	r30, r17
    21c8:	f1 1d       	adc	r31, r1
    21ca:	17 fd       	sbrc	r17, 7
    21cc:	fa 95       	dec	r31
    21ce:	60 81       	ld	r22, Z
    21d0:	81 2f       	mov	r24, r17
    21d2:	0e 94 12 0b 	call	0x1624	; 0x1624 <F_menu_check>
			Display_set_menu();
    21d6:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    21da:	4e c1       	rjmp	.+668    	; 0x2478 <F_menu+0x43e>
		}
		else if (key==left && i>0)
    21dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    21e0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    21e4:	45 97       	sbiw	r24, 0x15	; 21
    21e6:	c1 f4       	brne	.+48     	; 0x2218 <F_menu+0x1de>
    21e8:	11 16       	cp	r1, r17
    21ea:	b4 f4       	brge	.+44     	; 0x2218 <F_menu+0x1de>
		{
			i--;
    21ec:	11 50       	subi	r17, 0x01	; 1
			key=-1;
    21ee:	8f ef       	ldi	r24, 0xFF	; 255
    21f0:	9f ef       	ldi	r25, 0xFF	; 255
    21f2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    21f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			F_menu_check(i,F1_array[i]);
    21fa:	e1 e0       	ldi	r30, 0x01	; 1
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	ec 0f       	add	r30, r28
    2200:	fd 1f       	adc	r31, r29
    2202:	e1 0f       	add	r30, r17
    2204:	f1 1d       	adc	r31, r1
    2206:	17 fd       	sbrc	r17, 7
    2208:	fa 95       	dec	r31
    220a:	60 81       	ld	r22, Z
    220c:	81 2f       	mov	r24, r17
    220e:	0e 94 12 0b 	call	0x1624	; 0x1624 <F_menu_check>
			Display_set_menu();
    2212:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    2216:	30 c1       	rjmp	.+608    	; 0x2478 <F_menu+0x43e>
		}
		else if (key==up)
    2218:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    221c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2220:	40 97       	sbiw	r24, 0x10	; 16
    2222:	09 f0       	breq	.+2      	; 0x2226 <F_menu+0x1ec>
    2224:	7e c0       	rjmp	.+252    	; 0x2322 <F_menu+0x2e8>
		{
			key=-1;				
    2226:	8f ef       	ldi	r24, 0xFF	; 255
    2228:	9f ef       	ldi	r25, 0xFF	; 255
    222a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    222e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==Brightness && F1_array[i]<16){
    2232:	12 30       	cpi	r17, 0x02	; 2
    2234:	51 f5       	brne	.+84     	; 0x228a <F_menu+0x250>
    2236:	21 2f       	mov	r18, r17
    2238:	01 2e       	mov	r0, r17
    223a:	00 0c       	add	r0, r0
    223c:	33 0b       	sbc	r19, r19
    223e:	e1 e0       	ldi	r30, 0x01	; 1
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	ec 0f       	add	r30, r28
    2244:	fd 1f       	adc	r31, r29
    2246:	e2 0f       	add	r30, r18
    2248:	f3 1f       	adc	r31, r19
    224a:	80 81       	ld	r24, Z
    224c:	80 31       	cpi	r24, 0x10	; 16
    224e:	e8 f4       	brcc	.+58     	; 0x228a <F_menu+0x250>
				F1_array[i]+=1;		
    2250:	8f 5f       	subi	r24, 0xFF	; 255
    2252:	e1 e0       	ldi	r30, 0x01	; 1
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	ec 0f       	add	r30, r28
    2258:	fd 1f       	adc	r31, r29
    225a:	e2 0f       	add	r30, r18
    225c:	f3 1f       	adc	r31, r19
    225e:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2260:	e9 e7       	ldi	r30, 0x79	; 121
    2262:	f4 e0       	ldi	r31, 0x04	; 4
    2264:	9d ec       	ldi	r25, 0xCD	; 205
    2266:	89 9f       	mul	r24, r25
    2268:	91 2d       	mov	r25, r1
    226a:	11 24       	eor	r1, r1
    226c:	96 95       	lsr	r25
    226e:	96 95       	lsr	r25
    2270:	96 95       	lsr	r25
    2272:	29 2f       	mov	r18, r25
    2274:	2f 70       	andi	r18, 0x0F	; 15
    2276:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;		
    2278:	99 0f       	add	r25, r25
    227a:	29 2f       	mov	r18, r25
    227c:	22 0f       	add	r18, r18
    227e:	22 0f       	add	r18, r18
    2280:	92 0f       	add	r25, r18
    2282:	89 1b       	sub	r24, r25
    2284:	8f 70       	andi	r24, 0x0F	; 15
    2286:	83 83       	std	Z+3, r24	; 0x03
    2288:	49 c0       	rjmp	.+146    	; 0x231c <F_menu+0x2e2>
			}else if (i==light_swhitch && F1_array[i]<16){
    228a:	13 30       	cpi	r17, 0x03	; 3
    228c:	51 f5       	brne	.+84     	; 0x22e2 <F_menu+0x2a8>
    228e:	21 2f       	mov	r18, r17
    2290:	01 2e       	mov	r0, r17
    2292:	00 0c       	add	r0, r0
    2294:	33 0b       	sbc	r19, r19
    2296:	e1 e0       	ldi	r30, 0x01	; 1
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	ec 0f       	add	r30, r28
    229c:	fd 1f       	adc	r31, r29
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	80 31       	cpi	r24, 0x10	; 16
    22a6:	e8 f4       	brcc	.+58     	; 0x22e2 <F_menu+0x2a8>
				F1_array[i]+=1;
    22a8:	8f 5f       	subi	r24, 0xFF	; 255
    22aa:	e1 e0       	ldi	r30, 0x01	; 1
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	ec 0f       	add	r30, r28
    22b0:	fd 1f       	adc	r31, r29
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    22b8:	e9 e7       	ldi	r30, 0x79	; 121
    22ba:	f4 e0       	ldi	r31, 0x04	; 4
    22bc:	9d ec       	ldi	r25, 0xCD	; 205
    22be:	89 9f       	mul	r24, r25
    22c0:	91 2d       	mov	r25, r1
    22c2:	11 24       	eor	r1, r1
    22c4:	96 95       	lsr	r25
    22c6:	96 95       	lsr	r25
    22c8:	96 95       	lsr	r25
    22ca:	29 2f       	mov	r18, r25
    22cc:	2f 70       	andi	r18, 0x0F	; 15
    22ce:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    22d0:	99 0f       	add	r25, r25
    22d2:	29 2f       	mov	r18, r25
    22d4:	22 0f       	add	r18, r18
    22d6:	22 0f       	add	r18, r18
    22d8:	92 0f       	add	r25, r18
    22da:	89 1b       	sub	r24, r25
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	83 83       	std	Z+3, r24	; 0x03
    22e0:	1d c0       	rjmp	.+58     	; 0x231c <F_menu+0x2e2>
			}else if (F1_array[i]<9){
    22e2:	21 2f       	mov	r18, r17
    22e4:	01 2e       	mov	r0, r17
    22e6:	00 0c       	add	r0, r0
    22e8:	33 0b       	sbc	r19, r19
    22ea:	e1 e0       	ldi	r30, 0x01	; 1
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	ec 0f       	add	r30, r28
    22f0:	fd 1f       	adc	r31, r29
    22f2:	e2 0f       	add	r30, r18
    22f4:	f3 1f       	adc	r31, r19
    22f6:	80 81       	ld	r24, Z
    22f8:	89 30       	cpi	r24, 0x09	; 9
    22fa:	80 f4       	brcc	.+32     	; 0x231c <F_menu+0x2e2>
				F1_array[i]+=1;
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	e1 e0       	ldi	r30, 0x01	; 1
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	ec 0f       	add	r30, r28
    2304:	fd 1f       	adc	r31, r29
    2306:	e2 0f       	add	r30, r18
    2308:	f3 1f       	adc	r31, r19
    230a:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    230c:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2310:	0e 2e       	mov	r0, r30
    2312:	00 0c       	add	r0, r0
    2314:	ff 0b       	sbc	r31, r31
    2316:	e7 58       	subi	r30, 0x87	; 135
    2318:	fb 4f       	sbci	r31, 0xFB	; 251
    231a:	80 83       	st	Z, r24
			}
			
			Display_set_menu();
    231c:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    2320:	ab c0       	rjmp	.+342    	; 0x2478 <F_menu+0x43e>
		}
		else if (key==down)
    2322:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2326:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    232a:	41 97       	sbiw	r24, 0x11	; 17
    232c:	09 f0       	breq	.+2      	; 0x2330 <F_menu+0x2f6>
    232e:	7e c0       	rjmp	.+252    	; 0x242c <F_menu+0x3f2>
		{
			key=-1;
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f ef       	ldi	r25, 0xFF	; 255
    2334:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2338:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==Brightness && F1_array[i]>0){
    233c:	12 30       	cpi	r17, 0x02	; 2
    233e:	51 f5       	brne	.+84     	; 0x2394 <F_menu+0x35a>
    2340:	21 2f       	mov	r18, r17
    2342:	01 2e       	mov	r0, r17
    2344:	00 0c       	add	r0, r0
    2346:	33 0b       	sbc	r19, r19
    2348:	e1 e0       	ldi	r30, 0x01	; 1
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	ec 0f       	add	r30, r28
    234e:	fd 1f       	adc	r31, r29
    2350:	e2 0f       	add	r30, r18
    2352:	f3 1f       	adc	r31, r19
    2354:	80 81       	ld	r24, Z
    2356:	88 23       	and	r24, r24
    2358:	e9 f0       	breq	.+58     	; 0x2394 <F_menu+0x35a>
				F1_array[i]-=1;
    235a:	81 50       	subi	r24, 0x01	; 1
    235c:	e1 e0       	ldi	r30, 0x01	; 1
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	ec 0f       	add	r30, r28
    2362:	fd 1f       	adc	r31, r29
    2364:	e2 0f       	add	r30, r18
    2366:	f3 1f       	adc	r31, r19
    2368:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    236a:	e9 e7       	ldi	r30, 0x79	; 121
    236c:	f4 e0       	ldi	r31, 0x04	; 4
    236e:	9d ec       	ldi	r25, 0xCD	; 205
    2370:	89 9f       	mul	r24, r25
    2372:	91 2d       	mov	r25, r1
    2374:	11 24       	eor	r1, r1
    2376:	96 95       	lsr	r25
    2378:	96 95       	lsr	r25
    237a:	96 95       	lsr	r25
    237c:	29 2f       	mov	r18, r25
    237e:	2f 70       	andi	r18, 0x0F	; 15
    2380:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    2382:	99 0f       	add	r25, r25
    2384:	29 2f       	mov	r18, r25
    2386:	22 0f       	add	r18, r18
    2388:	22 0f       	add	r18, r18
    238a:	92 0f       	add	r25, r18
    238c:	89 1b       	sub	r24, r25
    238e:	8f 70       	andi	r24, 0x0F	; 15
    2390:	83 83       	std	Z+3, r24	; 0x03
    2392:	49 c0       	rjmp	.+146    	; 0x2426 <F_menu+0x3ec>
				}else if (i==light_swhitch && F1_array[i]>0){
    2394:	13 30       	cpi	r17, 0x03	; 3
    2396:	51 f5       	brne	.+84     	; 0x23ec <F_menu+0x3b2>
    2398:	21 2f       	mov	r18, r17
    239a:	01 2e       	mov	r0, r17
    239c:	00 0c       	add	r0, r0
    239e:	33 0b       	sbc	r19, r19
    23a0:	e1 e0       	ldi	r30, 0x01	; 1
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	ec 0f       	add	r30, r28
    23a6:	fd 1f       	adc	r31, r29
    23a8:	e2 0f       	add	r30, r18
    23aa:	f3 1f       	adc	r31, r19
    23ac:	80 81       	ld	r24, Z
    23ae:	88 23       	and	r24, r24
    23b0:	e9 f0       	breq	.+58     	; 0x23ec <F_menu+0x3b2>
				F1_array[i]-=1;
    23b2:	81 50       	subi	r24, 0x01	; 1
    23b4:	e1 e0       	ldi	r30, 0x01	; 1
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	ec 0f       	add	r30, r28
    23ba:	fd 1f       	adc	r31, r29
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    23c2:	e9 e7       	ldi	r30, 0x79	; 121
    23c4:	f4 e0       	ldi	r31, 0x04	; 4
    23c6:	9d ec       	ldi	r25, 0xCD	; 205
    23c8:	89 9f       	mul	r24, r25
    23ca:	91 2d       	mov	r25, r1
    23cc:	11 24       	eor	r1, r1
    23ce:	96 95       	lsr	r25
    23d0:	96 95       	lsr	r25
    23d2:	96 95       	lsr	r25
    23d4:	29 2f       	mov	r18, r25
    23d6:	2f 70       	andi	r18, 0x0F	; 15
    23d8:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    23da:	99 0f       	add	r25, r25
    23dc:	29 2f       	mov	r18, r25
    23de:	22 0f       	add	r18, r18
    23e0:	22 0f       	add	r18, r18
    23e2:	92 0f       	add	r25, r18
    23e4:	89 1b       	sub	r24, r25
    23e6:	8f 70       	andi	r24, 0x0F	; 15
    23e8:	83 83       	std	Z+3, r24	; 0x03
    23ea:	1d c0       	rjmp	.+58     	; 0x2426 <F_menu+0x3ec>
				}else if (F1_array[i]>1){
    23ec:	21 2f       	mov	r18, r17
    23ee:	01 2e       	mov	r0, r17
    23f0:	00 0c       	add	r0, r0
    23f2:	33 0b       	sbc	r19, r19
    23f4:	e1 e0       	ldi	r30, 0x01	; 1
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	ec 0f       	add	r30, r28
    23fa:	fd 1f       	adc	r31, r29
    23fc:	e2 0f       	add	r30, r18
    23fe:	f3 1f       	adc	r31, r19
    2400:	80 81       	ld	r24, Z
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	80 f0       	brcs	.+32     	; 0x2426 <F_menu+0x3ec>
				F1_array[i]-=1;
    2406:	81 50       	subi	r24, 0x01	; 1
    2408:	e1 e0       	ldi	r30, 0x01	; 1
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	ec 0f       	add	r30, r28
    240e:	fd 1f       	adc	r31, r29
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    2416:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    241a:	0e 2e       	mov	r0, r30
    241c:	00 0c       	add	r0, r0
    241e:	ff 0b       	sbc	r31, r31
    2420:	e7 58       	subi	r30, 0x87	; 135
    2422:	fb 4f       	sbci	r31, 0xFB	; 251
    2424:	80 83       	st	Z, r24
			}
			
			Display_set_menu();
    2426:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    242a:	26 c0       	rjmp	.+76     	; 0x2478 <F_menu+0x43e>
		}
		else if (key==ok)
    242c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2430:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2434:	47 97       	sbiw	r24, 0x17	; 23
    2436:	01 f5       	brne	.+64     	; 0x2478 <F_menu+0x43e>
    2438:	11 c0       	rjmp	.+34     	; 0x245c <F_menu+0x422>
		{
			for (i=0;i<sizeof(F_eep);i++)
			{
				eeprom_write_byte ((uint8_t*) &F_eep[i], F1_array[i]);
    243a:	81 2f       	mov	r24, r17
    243c:	01 2e       	mov	r0, r17
    243e:	00 0c       	add	r0, r0
    2440:	99 0b       	sbc	r25, r25
    2442:	e1 e0       	ldi	r30, 0x01	; 1
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	ec 0f       	add	r30, r28
    2448:	fd 1f       	adc	r31, r29
    244a:	e8 0f       	add	r30, r24
    244c:	f9 1f       	adc	r31, r25
    244e:	60 81       	ld	r22, Z
    2450:	80 50       	subi	r24, 0x00	; 0
    2452:	90 40       	sbci	r25, 0x00	; 0
    2454:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
			
			Display_set_menu();
		}
		else if (key==ok)
		{
			for (i=0;i<sizeof(F_eep);i++)
    2458:	1f 5f       	subi	r17, 0xFF	; 255
    245a:	01 c0       	rjmp	.+2      	; 0x245e <F_menu+0x424>
    245c:	10 e0       	ldi	r17, 0x00	; 0
    245e:	18 30       	cpi	r17, 0x08	; 8
    2460:	60 f3       	brcs	.-40     	; 0x243a <F_menu+0x400>
			{
				eeprom_write_byte ((uint8_t*) &F_eep[i], F1_array[i]);
			}
			user_instruction=0;
    2462:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			Timer_bright = 0xfff0;
    2466:	80 ef       	ldi	r24, 0xF0	; 240
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <Timer_bright+0x1>
    246e:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <Timer_bright>
			display_init(1);
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	cursor = 3;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='f';
	while(user_instruction!=0){
    2478:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    247c:	81 11       	cpse	r24, r1
    247e:	38 ce       	rjmp	.-912    	; 0x20f0 <F_menu+0xb6>
			user_instruction=0;
			Timer_bright = 0xfff0;
			display_init(1);
		}
	}
	cursor=0;
    2480:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
	shift=0;
    2484:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Clock_blink=0;
    2488:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
}
    248c:	28 96       	adiw	r28, 0x08	; 8
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	08 95       	ret

000024a6 <FAV_menu>:

void FAV_menu(void)
{
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	28 97       	sbiw	r28, 0x08	; 8
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
	char F1_array[sizeof(FAV_eep)];
	int8_t i;
	for (i=0;i<sizeof(FAV_eep);i++)
    24c2:	10 e0       	ldi	r17, 0x00	; 0
    24c4:	28 c0       	rjmp	.+80     	; 0x2516 <FAV_menu+0x70>
	{
		F1_array[i]=eeprom_read_byte((uint8_t*)FAV_eep+i);	
    24c6:	e1 2e       	mov	r14, r17
    24c8:	01 2e       	mov	r0, r17
    24ca:	00 0c       	add	r0, r0
    24cc:	ff 08       	sbc	r15, r15
    24ce:	c7 01       	movw	r24, r14
    24d0:	88 5f       	subi	r24, 0xF8	; 248
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    24d8:	e1 e0       	ldi	r30, 0x01	; 1
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	ec 0f       	add	r30, r28
    24de:	fd 1f       	adc	r31, r29
    24e0:	ee 0d       	add	r30, r14
    24e2:	ff 1d       	adc	r31, r15
    24e4:	80 83       	st	Z, r24
		if (i == 0) {
    24e6:	11 11       	cpse	r17, r1
    24e8:	0b c0       	rjmp	.+22     	; 0x2500 <FAV_menu+0x5a>
			if (F1_array[i]>11){F1_array[i]=11;};
    24ea:	8c 30       	cpi	r24, 0x0C	; 12
    24ec:	90 f0       	brcs	.+36     	; 0x2512 <FAV_menu+0x6c>
    24ee:	e1 e0       	ldi	r30, 0x01	; 1
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	ec 0f       	add	r30, r28
    24f4:	fd 1f       	adc	r31, r29
    24f6:	ee 0d       	add	r30, r14
    24f8:	ff 1d       	adc	r31, r15
    24fa:	8b e0       	ldi	r24, 0x0B	; 11
    24fc:	80 83       	st	Z, r24
    24fe:	09 c0       	rjmp	.+18     	; 0x2512 <FAV_menu+0x6c>
		}else if (F1_array[i]>9){
    2500:	8a 30       	cpi	r24, 0x0A	; 10
    2502:	38 f0       	brcs	.+14     	; 0x2512 <FAV_menu+0x6c>
			F1_array[i]=0;
    2504:	e1 e0       	ldi	r30, 0x01	; 1
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	ec 0f       	add	r30, r28
    250a:	fd 1f       	adc	r31, r29
    250c:	ee 0d       	add	r30, r14
    250e:	ff 1d       	adc	r31, r15
    2510:	10 82       	st	Z, r1

void FAV_menu(void)
{
	char F1_array[sizeof(FAV_eep)];
	int8_t i;
	for (i=0;i<sizeof(FAV_eep);i++)
    2512:	11 e0       	ldi	r17, 0x01	; 1
    2514:	10 0f       	add	r17, r16
    2516:	01 2f       	mov	r16, r17
    2518:	18 30       	cpi	r17, 0x08	; 8
    251a:	a8 f2       	brcs	.-86     	; 0x24c6 <FAV_menu+0x20>
			F1_array[i]=0;
		}		
		
	}
	i=0;
	set_clock_buf[0]= 0x17; //F character
    251c:	e9 e7       	ldi	r30, 0x79	; 121
    251e:	f4 e0       	ldi	r31, 0x04	; 4
    2520:	87 e1       	ldi	r24, 0x17	; 23
    2522:	80 83       	st	Z, r24
	set_clock_buf[1]= i+1;
    2524:	31 e0       	ldi	r19, 0x01	; 1
    2526:	31 83       	std	Z+1, r19	; 0x01
	set_clock_buf[2]= 0x0d; //space char
	//set_clock_buf[3]= F1_array[i];//eeprom_read_byte((uint8_t*)&F_eep)&0x0f;
	set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2528:	99 81       	ldd	r25, Y+1	; 0x01
    252a:	8d ec       	ldi	r24, 0xCD	; 205
    252c:	98 9f       	mul	r25, r24
    252e:	81 2d       	mov	r24, r1
    2530:	11 24       	eor	r1, r1
    2532:	86 95       	lsr	r24
    2534:	86 95       	lsr	r24
    2536:	86 95       	lsr	r24
    2538:	28 2f       	mov	r18, r24
    253a:	2f 70       	andi	r18, 0x0F	; 15
    253c:	22 83       	std	Z+2, r18	; 0x02
	set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    253e:	88 0f       	add	r24, r24
    2540:	28 2f       	mov	r18, r24
    2542:	22 0f       	add	r18, r18
    2544:	22 0f       	add	r18, r18
    2546:	82 0f       	add	r24, r18
    2548:	98 1b       	sub	r25, r24
    254a:	9f 70       	andi	r25, 0x0F	; 15
    254c:	93 83       	std	Z+3, r25	; 0x03
	cursor = 2;
    254e:	82 e0       	ldi	r24, 0x02	; 2
    2550:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
	shift = 0;
    2554:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Menu_blink_on=1;
    2558:	30 93 1f 04 	sts	0x041F, r19	; 0x80041f <Menu_blink_on>
	Display_set_menu();
    255c:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
	user_instruction='e';
    2560:	85 e6       	ldi	r24, 0x65	; 101
    2562:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
		}else if (F1_array[i]>9){
			F1_array[i]=0;
		}		
		
	}
	i=0;
    2566:	10 e0       	ldi	r17, 0x00	; 0
	cursor = 2;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='e';
	while(user_instruction!=0){
    2568:	4d c1       	rjmp	.+666    	; 0x2804 <FAV_menu+0x35e>
		if(key>=0 && key<10)
    256a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    256e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2572:	99 23       	and	r25, r25
    2574:	44 f1       	brlt	.+80     	; 0x25c6 <FAV_menu+0x120>
    2576:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    257a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    257e:	0a 97       	sbiw	r24, 0x0a	; 10
    2580:	14 f5       	brge	.+68     	; 0x25c6 <FAV_menu+0x120>
		{
			set_clock_buf[cursor]= key;
    2582:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2586:	0e 2e       	mov	r0, r30
    2588:	00 0c       	add	r0, r0
    258a:	ff 0b       	sbc	r31, r31
    258c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2590:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2594:	e7 58       	subi	r30, 0x87	; 135
    2596:	fb 4f       	sbci	r31, 0xFB	; 251
    2598:	80 83       	st	Z, r24
			F1_array[i]=key;
    259a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    259e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    25a2:	e1 e0       	ldi	r30, 0x01	; 1
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	ec 0f       	add	r30, r28
    25a8:	fd 1f       	adc	r31, r29
    25aa:	e1 0f       	add	r30, r17
    25ac:	f1 1d       	adc	r31, r1
    25ae:	17 fd       	sbrc	r17, 7
    25b0:	fa 95       	dec	r31
    25b2:	80 83       	st	Z, r24
			
			key=-1;
    25b4:	8f ef       	ldi	r24, 0xFF	; 255
    25b6:	9f ef       	ldi	r25, 0xFF	; 255
    25b8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    25bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			//if(cursor<Digits_disp-1){cursor++;}
			Display_set_menu();
    25c0:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    25c4:	1f c1       	rjmp	.+574    	; 0x2804 <FAV_menu+0x35e>
		}
		else if (key==right && i<(sizeof(F_eep)-1))
    25c6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    25ca:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    25ce:	46 97       	sbiw	r24, 0x16	; 22
    25d0:	c1 f4       	brne	.+48     	; 0x2602 <FAV_menu+0x15c>
    25d2:	17 30       	cpi	r17, 0x07	; 7
    25d4:	b0 f4       	brcc	.+44     	; 0x2602 <FAV_menu+0x15c>
		{
			i++;
    25d6:	1f 5f       	subi	r17, 0xFF	; 255
			key=-1;
    25d8:	8f ef       	ldi	r24, 0xFF	; 255
    25da:	9f ef       	ldi	r25, 0xFF	; 255
    25dc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    25e0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Fav_menu_check(i,F1_array[i]);
    25e4:	e1 e0       	ldi	r30, 0x01	; 1
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	ec 0f       	add	r30, r28
    25ea:	fd 1f       	adc	r31, r29
    25ec:	e1 0f       	add	r30, r17
    25ee:	f1 1d       	adc	r31, r1
    25f0:	17 fd       	sbrc	r17, 7
    25f2:	fa 95       	dec	r31
    25f4:	60 81       	ld	r22, Z
    25f6:	81 2f       	mov	r24, r17
    25f8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Fav_menu_check>
			//set_clock_buf[1]= i+1;
			//set_clock_buf[3]= F1_array[i];		
			Display_set_menu();
    25fc:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    2600:	01 c1       	rjmp	.+514    	; 0x2804 <FAV_menu+0x35e>
		}
		else if (key==left && i>0)
    2602:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2606:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    260a:	45 97       	sbiw	r24, 0x15	; 21
    260c:	c1 f4       	brne	.+48     	; 0x263e <FAV_menu+0x198>
    260e:	11 16       	cp	r1, r17
    2610:	b4 f4       	brge	.+44     	; 0x263e <FAV_menu+0x198>
		{
			i--;
    2612:	11 50       	subi	r17, 0x01	; 1
			key=-1;
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	9f ef       	ldi	r25, 0xFF	; 255
    2618:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    261c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Fav_menu_check(i,F1_array[i]);
    2620:	e1 e0       	ldi	r30, 0x01	; 1
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	ec 0f       	add	r30, r28
    2626:	fd 1f       	adc	r31, r29
    2628:	e1 0f       	add	r30, r17
    262a:	f1 1d       	adc	r31, r1
    262c:	17 fd       	sbrc	r17, 7
    262e:	fa 95       	dec	r31
    2630:	60 81       	ld	r22, Z
    2632:	81 2f       	mov	r24, r17
    2634:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Fav_menu_check>
			//set_clock_buf[1]= i+1;
			//set_clock_buf[3]= F1_array[i];
			Display_set_menu();
    2638:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    263c:	e3 c0       	rjmp	.+454    	; 0x2804 <FAV_menu+0x35e>
		}
		else if (key==up)
    263e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2642:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2646:	40 97       	sbiw	r24, 0x10	; 16
    2648:	09 f0       	breq	.+2      	; 0x264c <FAV_menu+0x1a6>
    264a:	52 c0       	rjmp	.+164    	; 0x26f0 <FAV_menu+0x24a>
		{
			key=-1;			
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	9f ef       	ldi	r25, 0xFF	; 255
    2650:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2654:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==0 && F1_array[i]<16){
    2658:	11 11       	cpse	r17, r1
    265a:	2a c0       	rjmp	.+84     	; 0x26b0 <FAV_menu+0x20a>
    265c:	21 2f       	mov	r18, r17
    265e:	01 2e       	mov	r0, r17
    2660:	00 0c       	add	r0, r0
    2662:	33 0b       	sbc	r19, r19
    2664:	e1 e0       	ldi	r30, 0x01	; 1
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	ec 0f       	add	r30, r28
    266a:	fd 1f       	adc	r31, r29
    266c:	e2 0f       	add	r30, r18
    266e:	f3 1f       	adc	r31, r19
    2670:	80 81       	ld	r24, Z
    2672:	80 31       	cpi	r24, 0x10	; 16
    2674:	e8 f4       	brcc	.+58     	; 0x26b0 <FAV_menu+0x20a>
				F1_array[i]+=1;
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	e1 e0       	ldi	r30, 0x01	; 1
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	ec 0f       	add	r30, r28
    267e:	fd 1f       	adc	r31, r29
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2686:	e9 e7       	ldi	r30, 0x79	; 121
    2688:	f4 e0       	ldi	r31, 0x04	; 4
    268a:	9d ec       	ldi	r25, 0xCD	; 205
    268c:	89 9f       	mul	r24, r25
    268e:	91 2d       	mov	r25, r1
    2690:	11 24       	eor	r1, r1
    2692:	96 95       	lsr	r25
    2694:	96 95       	lsr	r25
    2696:	96 95       	lsr	r25
    2698:	29 2f       	mov	r18, r25
    269a:	2f 70       	andi	r18, 0x0F	; 15
    269c:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    269e:	99 0f       	add	r25, r25
    26a0:	29 2f       	mov	r18, r25
    26a2:	22 0f       	add	r18, r18
    26a4:	22 0f       	add	r18, r18
    26a6:	92 0f       	add	r25, r18
    26a8:	89 1b       	sub	r24, r25
    26aa:	8f 70       	andi	r24, 0x0F	; 15
    26ac:	83 83       	std	Z+3, r24	; 0x03
    26ae:	1d c0       	rjmp	.+58     	; 0x26ea <FAV_menu+0x244>
				}else if (F1_array[i]<9){
    26b0:	21 2f       	mov	r18, r17
    26b2:	01 2e       	mov	r0, r17
    26b4:	00 0c       	add	r0, r0
    26b6:	33 0b       	sbc	r19, r19
    26b8:	e1 e0       	ldi	r30, 0x01	; 1
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	ec 0f       	add	r30, r28
    26be:	fd 1f       	adc	r31, r29
    26c0:	e2 0f       	add	r30, r18
    26c2:	f3 1f       	adc	r31, r19
    26c4:	80 81       	ld	r24, Z
    26c6:	89 30       	cpi	r24, 0x09	; 9
    26c8:	80 f4       	brcc	.+32     	; 0x26ea <FAV_menu+0x244>
				F1_array[i]+=1;
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	e1 e0       	ldi	r30, 0x01	; 1
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	ec 0f       	add	r30, r28
    26d2:	fd 1f       	adc	r31, r29
    26d4:	e2 0f       	add	r30, r18
    26d6:	f3 1f       	adc	r31, r19
    26d8:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    26da:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    26de:	0e 2e       	mov	r0, r30
    26e0:	00 0c       	add	r0, r0
    26e2:	ff 0b       	sbc	r31, r31
    26e4:	e7 58       	subi	r30, 0x87	; 135
    26e6:	fb 4f       	sbci	r31, 0xFB	; 251
    26e8:	80 83       	st	Z, r24
			}	
			//F1_array[i]+=1;
			//set_clock_buf[cursor]=F1_array[i];			
			Display_set_menu();
    26ea:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    26ee:	8a c0       	rjmp	.+276    	; 0x2804 <FAV_menu+0x35e>
		}
		else if (key==down)
    26f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    26f4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    26f8:	41 97       	sbiw	r24, 0x11	; 17
    26fa:	09 f0       	breq	.+2      	; 0x26fe <FAV_menu+0x258>
    26fc:	52 c0       	rjmp	.+164    	; 0x27a2 <FAV_menu+0x2fc>
		{
			key=-1;
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	9f ef       	ldi	r25, 0xFF	; 255
    2702:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2706:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if (i==0 && F1_array[i]>0){
    270a:	11 11       	cpse	r17, r1
    270c:	2a c0       	rjmp	.+84     	; 0x2762 <FAV_menu+0x2bc>
    270e:	21 2f       	mov	r18, r17
    2710:	01 2e       	mov	r0, r17
    2712:	00 0c       	add	r0, r0
    2714:	33 0b       	sbc	r19, r19
    2716:	e1 e0       	ldi	r30, 0x01	; 1
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	ec 0f       	add	r30, r28
    271c:	fd 1f       	adc	r31, r29
    271e:	e2 0f       	add	r30, r18
    2720:	f3 1f       	adc	r31, r19
    2722:	80 81       	ld	r24, Z
    2724:	88 23       	and	r24, r24
    2726:	e9 f0       	breq	.+58     	; 0x2762 <FAV_menu+0x2bc>
				F1_array[i]-=1;
    2728:	81 50       	subi	r24, 0x01	; 1
    272a:	e1 e0       	ldi	r30, 0x01	; 1
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	ec 0f       	add	r30, r28
    2730:	fd 1f       	adc	r31, r29
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 83       	st	Z, r24
				set_clock_buf[2]= (F1_array[i]/10)&0x0f;
    2738:	e9 e7       	ldi	r30, 0x79	; 121
    273a:	f4 e0       	ldi	r31, 0x04	; 4
    273c:	9d ec       	ldi	r25, 0xCD	; 205
    273e:	89 9f       	mul	r24, r25
    2740:	91 2d       	mov	r25, r1
    2742:	11 24       	eor	r1, r1
    2744:	96 95       	lsr	r25
    2746:	96 95       	lsr	r25
    2748:	96 95       	lsr	r25
    274a:	29 2f       	mov	r18, r25
    274c:	2f 70       	andi	r18, 0x0F	; 15
    274e:	22 83       	std	Z+2, r18	; 0x02
				set_clock_buf[3]= (F1_array[i]%10)&0x0f;
    2750:	99 0f       	add	r25, r25
    2752:	29 2f       	mov	r18, r25
    2754:	22 0f       	add	r18, r18
    2756:	22 0f       	add	r18, r18
    2758:	92 0f       	add	r25, r18
    275a:	89 1b       	sub	r24, r25
    275c:	8f 70       	andi	r24, 0x0F	; 15
    275e:	83 83       	std	Z+3, r24	; 0x03
    2760:	1d c0       	rjmp	.+58     	; 0x279c <FAV_menu+0x2f6>
				}else if (F1_array[i]>1){
    2762:	21 2f       	mov	r18, r17
    2764:	01 2e       	mov	r0, r17
    2766:	00 0c       	add	r0, r0
    2768:	33 0b       	sbc	r19, r19
    276a:	e1 e0       	ldi	r30, 0x01	; 1
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	ec 0f       	add	r30, r28
    2770:	fd 1f       	adc	r31, r29
    2772:	e2 0f       	add	r30, r18
    2774:	f3 1f       	adc	r31, r19
    2776:	80 81       	ld	r24, Z
    2778:	82 30       	cpi	r24, 0x02	; 2
    277a:	80 f0       	brcs	.+32     	; 0x279c <FAV_menu+0x2f6>
				F1_array[i]-=1;
    277c:	81 50       	subi	r24, 0x01	; 1
    277e:	e1 e0       	ldi	r30, 0x01	; 1
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	ec 0f       	add	r30, r28
    2784:	fd 1f       	adc	r31, r29
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
    278a:	80 83       	st	Z, r24
				set_clock_buf[cursor]=F1_array[i];
    278c:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2790:	0e 2e       	mov	r0, r30
    2792:	00 0c       	add	r0, r0
    2794:	ff 0b       	sbc	r31, r31
    2796:	e7 58       	subi	r30, 0x87	; 135
    2798:	fb 4f       	sbci	r31, 0xFB	; 251
    279a:	80 83       	st	Z, r24
			}
			
			Display_set_menu();
    279c:	0e 94 96 0b 	call	0x172c	; 0x172c <Display_set_menu>
    27a0:	31 c0       	rjmp	.+98     	; 0x2804 <FAV_menu+0x35e>
		}
		else if (key==ok)
    27a2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    27a6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    27aa:	47 97       	sbiw	r24, 0x17	; 23
    27ac:	59 f5       	brne	.+86     	; 0x2804 <FAV_menu+0x35e>
    27ae:	11 c0       	rjmp	.+34     	; 0x27d2 <FAV_menu+0x32c>
		{
			for (i=0;i<sizeof(FAV_eep);i++)
			{
				eeprom_write_byte ((uint8_t*) &FAV_eep[i], F1_array[i]);
    27b0:	81 2f       	mov	r24, r17
    27b2:	01 2e       	mov	r0, r17
    27b4:	00 0c       	add	r0, r0
    27b6:	99 0b       	sbc	r25, r25
    27b8:	e1 e0       	ldi	r30, 0x01	; 1
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	ec 0f       	add	r30, r28
    27be:	fd 1f       	adc	r31, r29
    27c0:	e8 0f       	add	r30, r24
    27c2:	f9 1f       	adc	r31, r25
    27c4:	60 81       	ld	r22, Z
    27c6:	88 5f       	subi	r24, 0xF8	; 248
    27c8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ca:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
			
			Display_set_menu();
		}
		else if (key==ok)
		{
			for (i=0;i<sizeof(FAV_eep);i++)
    27ce:	1f 5f       	subi	r17, 0xFF	; 255
    27d0:	01 c0       	rjmp	.+2      	; 0x27d4 <FAV_menu+0x32e>
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    27d4:	18 30       	cpi	r17, 0x08	; 8
    27d6:	60 f3       	brcs	.-40     	; 0x27b0 <FAV_menu+0x30a>
			{
				eeprom_write_byte ((uint8_t*) &FAV_eep[i], F1_array[i]);
			}
			Digits_disp= eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
    27d8:	88 e0       	ldi	r24, 0x08	; 8
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    27e0:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
			if (Digits_disp<2 || Digits_disp>MAX_DISPLAY_DIGITS)
    27e4:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    27e8:	82 30       	cpi	r24, 0x02	; 2
    27ea:	24 f0       	brlt	.+8      	; 0x27f4 <FAV_menu+0x34e>
    27ec:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    27f0:	85 31       	cpi	r24, 0x15	; 21
    27f2:	1c f0       	brlt	.+6      	; 0x27fa <FAV_menu+0x354>
			Digits_disp=4;
    27f4:	84 e0       	ldi	r24, 0x04	; 4
    27f6:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
			user_instruction=0;
    27fa:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	cursor = 2;
	shift = 0;
	Menu_blink_on=1;
	Display_set_menu();
	user_instruction='e';
	while(user_instruction!=0){
    2804:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    2808:	81 11       	cpse	r24, r1
    280a:	af ce       	rjmp	.-674    	; 0x256a <FAV_menu+0xc4>
			Digits_disp=4;
			user_instruction=0;
			display_init(1);
		}
	}
	cursor=0;
    280c:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
	shift=0;
    2810:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Clock_blink=0;
    2814:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
}
    2818:	28 96       	adiw	r28, 0x08	; 8
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	08 95       	ret

00002832 <Set_clock>:
		}
	}
	Display_Out();
}

void Set_clock(void){
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	60 97       	sbiw	r28, 0x10	; 16
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
	struct rtc_time ds1302;
	struct rtc_time *rtc;
	rtc = &ds1302;
	//int8_t clk_byte;
	ds1302_update(rtc);   // update all fields in the struct
    2846:	ce 01       	movw	r24, r28
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
	set_clock_buf[0]= (rtc->hour&0xf0)>>4;
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	98 2f       	mov	r25, r24
    2852:	92 95       	swap	r25
    2854:	9f 70       	andi	r25, 0x0F	; 15
    2856:	e9 e7       	ldi	r30, 0x79	; 121
    2858:	f4 e0       	ldi	r31, 0x04	; 4
    285a:	90 83       	st	Z, r25
	set_clock_buf[1]= (rtc->hour&0x0f);  //adding dot
    285c:	8f 70       	andi	r24, 0x0F	; 15
    285e:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= ((rtc->minute&0xf0)>>4);  //adding dot;
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	98 2f       	mov	r25, r24
    2864:	92 95       	swap	r25
    2866:	9f 70       	andi	r25, 0x0F	; 15
    2868:	92 83       	std	Z+2, r25	; 0x02
	set_clock_buf[3]= (rtc->minute&0x0f);
    286a:	8f 70       	andi	r24, 0x0F	; 15
    286c:	83 83       	std	Z+3, r24	; 0x03
	set_clock_buf[4]= ((rtc->second&0xf0)>>4);
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	98 2f       	mov	r25, r24
    2872:	92 95       	swap	r25
    2874:	9f 70       	andi	r25, 0x0F	; 15
    2876:	94 83       	std	Z+4, r25	; 0x04
	set_clock_buf[5]= (rtc->second&0x0f);
    2878:	8f 70       	andi	r24, 0x0F	; 15
    287a:	85 83       	std	Z+5, r24	; 0x05
	Display_set_clock();
    287c:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
	user_instruction='s';
    2880:	83 e7       	ldi	r24, 0x73	; 115
    2882:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	cursor=0;Menu_blink_on=1;
    2886:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	while(user_instruction!=0)
    2890:	9f c0       	rjmp	.+318    	; 0x29d0 <Set_clock+0x19e>
	{
		if(key>=0 && key<10)
    2892:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2896:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    289a:	99 23       	and	r25, r25
    289c:	d4 f1       	brlt	.+116    	; 0x2912 <Set_clock+0xe0>
    289e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    28a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    28a6:	0a 97       	sbiw	r24, 0x0a	; 10
    28a8:	a4 f5       	brge	.+104    	; 0x2912 <Set_clock+0xe0>
		{
			set_clock_buf[cursor]= key;
    28aa:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    28ae:	0e 2e       	mov	r0, r30
    28b0:	00 0c       	add	r0, r0
    28b2:	ff 0b       	sbc	r31, r31
    28b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    28b8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    28bc:	e7 58       	subi	r30, 0x87	; 135
    28be:	fb 4f       	sbci	r31, 0xFB	; 251
    28c0:	80 83       	st	Z, r24
			if (cursor==1 || cursor==2 || cursor==3 )
    28c2:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28c6:	81 30       	cpi	r24, 0x01	; 1
    28c8:	41 f0       	breq	.+16     	; 0x28da <Set_clock+0xa8>
    28ca:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	21 f0       	breq	.+8      	; 0x28da <Set_clock+0xa8>
    28d2:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	51 f4       	brne	.+20     	; 0x28ee <Set_clock+0xbc>
			{
				set_clock_buf[cursor]|=0x80;
    28da:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    28de:	0e 2e       	mov	r0, r30
    28e0:	00 0c       	add	r0, r0
    28e2:	ff 0b       	sbc	r31, r31
    28e4:	e7 58       	subi	r30, 0x87	; 135
    28e6:	fb 4f       	sbci	r31, 0xFB	; 251
    28e8:	80 81       	ld	r24, Z
    28ea:	80 68       	ori	r24, 0x80	; 128
    28ec:	80 83       	st	Z, r24
			}
			key=-1;
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    28f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    28fa:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    28fe:	85 30       	cpi	r24, 0x05	; 5
    2900:	28 f4       	brcc	.+10     	; 0x290c <Set_clock+0xda>
    2902:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_clock();
    290c:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    2910:	5f c0       	rjmp	.+190    	; 0x29d0 <Set_clock+0x19e>
		}
		else if (key==left)		//check for left <-
    2912:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2916:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    291a:	45 97       	sbiw	r24, 0x15	; 21
    291c:	99 f4       	brne	.+38     	; 0x2944 <Set_clock+0x112>
		{
			if(cursor!=0)
    291e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2922:	88 23       	and	r24, r24
    2924:	09 f4       	brne	.+2      	; 0x2928 <Set_clock+0xf6>
    2926:	54 c0       	rjmp	.+168    	; 0x29d0 <Set_clock+0x19e>
			{
				cursor--;
    2928:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    292c:	81 50       	subi	r24, 0x01	; 1
    292e:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2932:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	9f ef       	ldi	r25, 0xFF	; 255
    293a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    293e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2942:	46 c0       	rjmp	.+140    	; 0x29d0 <Set_clock+0x19e>
			}			
		}
		else if (key==right)		//check for right ->
    2944:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2948:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    294c:	46 97       	sbiw	r24, 0x16	; 22
    294e:	91 f4       	brne	.+36     	; 0x2974 <Set_clock+0x142>
		{
			if(cursor<sizeof(set_clock_buf)-1)
    2950:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2954:	85 30       	cpi	r24, 0x05	; 5
    2956:	e0 f5       	brcc	.+120    	; 0x29d0 <Set_clock+0x19e>
			{
				cursor++;
    2958:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    295c:	8f 5f       	subi	r24, 0xFF	; 255
    295e:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2962:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2966:	8f ef       	ldi	r24, 0xFF	; 255
    2968:	9f ef       	ldi	r25, 0xFF	; 255
    296a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    296e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2972:	2e c0       	rjmp	.+92     	; 0x29d0 <Set_clock+0x19e>
			}
			
		}
		else if (key==ok)
    2974:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2978:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    297c:	47 97       	sbiw	r24, 0x17	; 23
    297e:	41 f5       	brne	.+80     	; 0x29d0 <Set_clock+0x19e>
		{
			struct rtc_time ds1302;
			struct rtc_time *rtc;
			rtc = &ds1302;
			int8_t byte_get;
			rtc->hour_format = H24;
    2980:	8c e0       	ldi	r24, 0x0C	; 12
    2982:	88 8b       	std	Y+16, r24	; 0x10
			byte_get=(set_clock_buf[0] & 0x0f)<<4;
    2984:	e9 e7       	ldi	r30, 0x79	; 121
    2986:	f4 e0       	ldi	r31, 0x04	; 4
    2988:	80 81       	ld	r24, Z
    298a:	20 e1       	ldi	r18, 0x10	; 16
    298c:	82 9f       	mul	r24, r18
    298e:	c0 01       	movw	r24, r0
    2990:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[1] & 0x0f);
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	9f 70       	andi	r25, 0x0F	; 15
    2996:	89 2b       	or	r24, r25
			rtc->hour = byte_get;
    2998:	8b 87       	std	Y+11, r24	; 0x0b
			byte_get=(set_clock_buf[2] & 0x0f)<<4;
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	20 e1       	ldi	r18, 0x10	; 16
    299e:	82 9f       	mul	r24, r18
    29a0:	c0 01       	movw	r24, r0
    29a2:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[3] & 0x0f);
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	9f 70       	andi	r25, 0x0F	; 15
    29a8:	89 2b       	or	r24, r25
			rtc->minute = byte_get;
    29aa:	8a 87       	std	Y+10, r24	; 0x0a
			byte_get=(set_clock_buf[4] & 0x0f)<<4;
    29ac:	84 81       	ldd	r24, Z+4	; 0x04
    29ae:	20 e1       	ldi	r18, 0x10	; 16
    29b0:	82 9f       	mul	r24, r18
    29b2:	c0 01       	movw	r24, r0
    29b4:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[5] & 0x0f);
    29b6:	95 81       	ldd	r25, Z+5	; 0x05
    29b8:	9f 70       	andi	r25, 0x0F	; 15
    29ba:	89 2b       	or	r24, r25
			rtc->second = byte_get;			
    29bc:	89 87       	std	Y+9, r24	; 0x09
			ds1302_write_time(rtc);
    29be:	ce 01       	movw	r24, r28
    29c0:	09 96       	adiw	r24, 0x09	; 9
    29c2:	0e 94 7f 07 	call	0xefe	; 0xefe <ds1302_write_time>
			user_instruction=0;
    29c6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	set_clock_buf[4]= ((rtc->second&0xf0)>>4);
	set_clock_buf[5]= (rtc->second&0x0f);
	Display_set_clock();
	user_instruction='s';
	cursor=0;Menu_blink_on=1;
	while(user_instruction!=0)
    29d0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    29d4:	81 11       	cpse	r24, r1
    29d6:	5d cf       	rjmp	.-326    	; 0x2892 <Set_clock+0x60>
			ds1302_write_time(rtc);
			user_instruction=0;
			display_init(1);
		}
	}
	cursor=0;
    29d8:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
	shift=0;
    29dc:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Clock_blink=0;
    29e0:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
	Menu_blink_on=0;
    29e4:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <Menu_blink_on>
}
    29e8:	60 96       	adiw	r28, 0x10	; 16
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	08 95       	ret

000029fa <Set_countdown>:
		Change_timer_on=0;
}


void Set_countdown(volatile	int8_t bank)
{
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <Set_countdown+0xa>
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	8a 83       	std	Y+2, r24	; 0x02
	volatile int8_t eep_add_bank;
	
	switch (bank)
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	82 30       	cpi	r24, 0x02	; 2
    2a0e:	69 f0       	breq	.+26     	; 0x2a2a <Set_countdown+0x30>
    2a10:	1c f4       	brge	.+6      	; 0x2a18 <Set_countdown+0x1e>
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	31 f0       	breq	.+12     	; 0x2a22 <Set_countdown+0x28>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <Set_countdown+0x46>
    2a18:	83 30       	cpi	r24, 0x03	; 3
    2a1a:	59 f0       	breq	.+22     	; 0x2a32 <Set_countdown+0x38>
    2a1c:	84 30       	cpi	r24, 0x04	; 4
    2a1e:	69 f0       	breq	.+26     	; 0x2a3a <Set_countdown+0x40>
    2a20:	0f c0       	rjmp	.+30     	; 0x2a40 <Set_countdown+0x46>
	{
	case (1):
		eep_add_bank = Countdown1_eep;
    2a22:	80 e1       	ldi	r24, 0x10	; 16
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	89 83       	std	Y+1, r24	; 0x01
		break;
    2a28:	0b c0       	rjmp	.+22     	; 0x2a40 <Set_countdown+0x46>
	case (2):
		eep_add_bank = Countdown2_eep;
    2a2a:	83 e1       	ldi	r24, 0x13	; 19
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	89 83       	std	Y+1, r24	; 0x01
		break;
    2a30:	07 c0       	rjmp	.+14     	; 0x2a40 <Set_countdown+0x46>
	case (3):
		eep_add_bank = Countdown_alarm1;
    2a32:	86 e1       	ldi	r24, 0x16	; 22
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	89 83       	std	Y+1, r24	; 0x01
		break;
    2a38:	03 c0       	rjmp	.+6      	; 0x2a40 <Set_countdown+0x46>
	case (4):
		eep_add_bank = Countdown_alarm2;
    2a3a:	89 e1       	ldi	r24, 0x19	; 25
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	set_clock_buf[0]= (eeprom_read_byte((uint8_t*)eep_add_bank))>>4;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	08 2e       	mov	r0, r24
    2a44:	00 0c       	add	r0, r0
    2a46:	99 0b       	sbc	r25, r25
    2a48:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2a4c:	09 e7       	ldi	r16, 0x79	; 121
    2a4e:	14 e0       	ldi	r17, 0x04	; 4
    2a50:	82 95       	swap	r24
    2a52:	8f 70       	andi	r24, 0x0F	; 15
    2a54:	f8 01       	movw	r30, r16
    2a56:	80 83       	st	Z, r24
	set_clock_buf[1]= (eeprom_read_byte((uint8_t*)eep_add_bank)&0x0f); 
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	08 2e       	mov	r0, r24
    2a5c:	00 0c       	add	r0, r0
    2a5e:	99 0b       	sbc	r25, r25
    2a60:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2a64:	8f 70       	andi	r24, 0x0F	; 15
    2a66:	f8 01       	movw	r30, r16
    2a68:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= (eeprom_read_byte((uint8_t*)eep_add_bank+1)&0xf0)>>4;
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	08 2e       	mov	r0, r24
    2a6e:	00 0c       	add	r0, r0
    2a70:	99 0b       	sbc	r25, r25
    2a72:	01 96       	adiw	r24, 0x01	; 1
    2a74:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2a78:	82 95       	swap	r24
    2a7a:	8f 70       	andi	r24, 0x0F	; 15
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	82 83       	std	Z+2, r24	; 0x02
	set_clock_buf[3]= (eeprom_read_byte((uint8_t*)eep_add_bank+1)&0x0f);
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	08 2e       	mov	r0, r24
    2a84:	00 0c       	add	r0, r0
    2a86:	99 0b       	sbc	r25, r25
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2a8e:	8f 70       	andi	r24, 0x0F	; 15
    2a90:	f8 01       	movw	r30, r16
    2a92:	83 83       	std	Z+3, r24	; 0x03
	set_clock_buf[4]= (eeprom_read_byte((uint8_t*)eep_add_bank+2)&0xf0)>>4;
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	08 2e       	mov	r0, r24
    2a98:	00 0c       	add	r0, r0
    2a9a:	99 0b       	sbc	r25, r25
    2a9c:	02 96       	adiw	r24, 0x02	; 2
    2a9e:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2aa2:	82 95       	swap	r24
    2aa4:	8f 70       	andi	r24, 0x0F	; 15
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	84 83       	std	Z+4, r24	; 0x04
	set_clock_buf[5]= (eeprom_read_byte((uint8_t*)eep_add_bank+2)&0x0f);
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	08 2e       	mov	r0, r24
    2aae:	00 0c       	add	r0, r0
    2ab0:	99 0b       	sbc	r25, r25
    2ab2:	02 96       	adiw	r24, 0x02	; 2
    2ab4:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2ab8:	8f 70       	andi	r24, 0x0F	; 15
    2aba:	f8 01       	movw	r30, r16
    2abc:	85 83       	std	Z+5, r24	; 0x05
		set_clock_buf[3]= (eeprom_read_byte((uint8_t*)Countdown2_eep+1)&0x0f);
		set_clock_buf[4]= (eeprom_read_byte((uint8_t*)Countdown2_eep+2)&0xf0)>>4;
		set_clock_buf[5]= (eeprom_read_byte((uint8_t*)Countdown2_eep+2)&0x0f);
	}*/
	
	user_instruction='c'; //intex for countdown
    2abe:	83 e6       	ldi	r24, 0x63	; 99
    2ac0:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	cursor=0;Menu_blink_on=1;
    2ac4:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	shift=0;
    2ace:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
	Display_set_clock();
    2ad2:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
	while(user_instruction!=0)
    2ad6:	b1 c0       	rjmp	.+354    	; 0x2c3a <Set_countdown+0x240>
	{
		if(key>=0 && key<10)
    2ad8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2adc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2ae0:	99 23       	and	r25, r25
    2ae2:	d4 f1       	brlt	.+116    	; 0x2b58 <Set_countdown+0x15e>
    2ae4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2ae8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2aec:	0a 97       	sbiw	r24, 0x0a	; 10
    2aee:	a4 f5       	brge	.+104    	; 0x2b58 <Set_countdown+0x15e>
		{
			set_clock_buf[cursor]= key;
    2af0:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2af4:	0e 2e       	mov	r0, r30
    2af6:	00 0c       	add	r0, r0
    2af8:	ff 0b       	sbc	r31, r31
    2afa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2afe:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2b02:	e7 58       	subi	r30, 0x87	; 135
    2b04:	fb 4f       	sbci	r31, 0xFB	; 251
    2b06:	80 83       	st	Z, r24
			if (cursor==1 || cursor==2 || cursor==3 )
    2b08:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	41 f0       	breq	.+16     	; 0x2b20 <Set_countdown+0x126>
    2b10:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	21 f0       	breq	.+8      	; 0x2b20 <Set_countdown+0x126>
    2b18:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b1c:	83 30       	cpi	r24, 0x03	; 3
    2b1e:	51 f4       	brne	.+20     	; 0x2b34 <Set_countdown+0x13a>
			{
				set_clock_buf[cursor]|=0x80;
    2b20:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2b24:	0e 2e       	mov	r0, r30
    2b26:	00 0c       	add	r0, r0
    2b28:	ff 0b       	sbc	r31, r31
    2b2a:	e7 58       	subi	r30, 0x87	; 135
    2b2c:	fb 4f       	sbci	r31, 0xFB	; 251
    2b2e:	80 81       	ld	r24, Z
    2b30:	80 68       	ori	r24, 0x80	; 128
    2b32:	80 83       	st	Z, r24
			}
			key=-1;
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	9f ef       	ldi	r25, 0xFF	; 255
    2b38:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2b3c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    2b40:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b44:	85 30       	cpi	r24, 0x05	; 5
    2b46:	28 f4       	brcc	.+10     	; 0x2b52 <Set_countdown+0x158>
    2b48:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b4c:	8f 5f       	subi	r24, 0xFF	; 255
    2b4e:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_clock();
    2b52:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    2b56:	71 c0       	rjmp	.+226    	; 0x2c3a <Set_countdown+0x240>
		}
		else if (key==left)		//check for left <-
    2b58:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2b5c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2b60:	45 97       	sbiw	r24, 0x15	; 21
    2b62:	99 f4       	brne	.+38     	; 0x2b8a <Set_countdown+0x190>
		{
			if(cursor!=0)
    2b64:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <Set_countdown+0x174>
    2b6c:	66 c0       	rjmp	.+204    	; 0x2c3a <Set_countdown+0x240>
			{
				cursor--;
    2b6e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b72:	81 50       	subi	r24, 0x01	; 1
    2b74:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2b78:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	9f ef       	ldi	r25, 0xFF	; 255
    2b80:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2b84:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2b88:	58 c0       	rjmp	.+176    	; 0x2c3a <Set_countdown+0x240>
			}			
		}
		else if (key==right)		//check for right ->
    2b8a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2b8e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2b92:	46 97       	sbiw	r24, 0x16	; 22
    2b94:	99 f4       	brne	.+38     	; 0x2bbc <Set_countdown+0x1c2>
		{
			if(cursor<sizeof(set_clock_buf)-1)
    2b96:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2b9a:	85 30       	cpi	r24, 0x05	; 5
    2b9c:	08 f0       	brcs	.+2      	; 0x2ba0 <Set_countdown+0x1a6>
    2b9e:	4d c0       	rjmp	.+154    	; 0x2c3a <Set_countdown+0x240>
			{
				cursor++;
    2ba0:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2ba4:	8f 5f       	subi	r24, 0xFF	; 255
    2ba6:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2baa:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2bae:	8f ef       	ldi	r24, 0xFF	; 255
    2bb0:	9f ef       	ldi	r25, 0xFF	; 255
    2bb2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2bb6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2bba:	3f c0       	rjmp	.+126    	; 0x2c3a <Set_countdown+0x240>
			}			
		}
		else if (key==ok)
    2bbc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2bc0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2bc4:	47 97       	sbiw	r24, 0x17	; 23
    2bc6:	c9 f5       	brne	.+114    	; 0x2c3a <Set_countdown+0x240>
		{
			eeprom_write_byte ((uint8_t*) eep_add_bank, ((set_clock_buf[0] & 0x0f)<<4)|(set_clock_buf[1] & 0x0f));
    2bc8:	09 e7       	ldi	r16, 0x79	; 121
    2bca:	14 e0       	ldi	r17, 0x04	; 4
    2bcc:	f8 01       	movw	r30, r16
    2bce:	20 81       	ld	r18, Z
    2bd0:	f0 e1       	ldi	r31, 0x10	; 16
    2bd2:	2f 9f       	mul	r18, r31
    2bd4:	90 01       	movw	r18, r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	f8 01       	movw	r30, r16
    2bda:	61 81       	ldd	r22, Z+1	; 0x01
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	6f 70       	andi	r22, 0x0F	; 15
    2be0:	62 2b       	or	r22, r18
    2be2:	08 2e       	mov	r0, r24
    2be4:	00 0c       	add	r0, r0
    2be6:	99 0b       	sbc	r25, r25
    2be8:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
			eeprom_write_byte ((uint8_t*) eep_add_bank+1, ((set_clock_buf[2] & 0x0f)<<4)|(set_clock_buf[3] & 0x0f));
    2bec:	f8 01       	movw	r30, r16
    2bee:	22 81       	ldd	r18, Z+2	; 0x02
    2bf0:	f0 e1       	ldi	r31, 0x10	; 16
    2bf2:	2f 9f       	mul	r18, r31
    2bf4:	90 01       	movw	r18, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	63 81       	ldd	r22, Z+3	; 0x03
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	08 2e       	mov	r0, r24
    2c00:	00 0c       	add	r0, r0
    2c02:	99 0b       	sbc	r25, r25
    2c04:	6f 70       	andi	r22, 0x0F	; 15
    2c06:	62 2b       	or	r22, r18
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
			eeprom_write_byte ((uint8_t*) eep_add_bank+2, ((set_clock_buf[4] & 0x0f)<<4)|(set_clock_buf[5] & 0x0f));
    2c0e:	f8 01       	movw	r30, r16
    2c10:	24 81       	ldd	r18, Z+4	; 0x04
    2c12:	f0 e1       	ldi	r31, 0x10	; 16
    2c14:	2f 9f       	mul	r18, r31
    2c16:	90 01       	movw	r18, r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	65 81       	ldd	r22, Z+5	; 0x05
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	08 2e       	mov	r0, r24
    2c22:	00 0c       	add	r0, r0
    2c24:	99 0b       	sbc	r25, r25
    2c26:	6f 70       	andi	r22, 0x0F	; 15
    2c28:	62 2b       	or	r22, r18
    2c2a:	02 96       	adiw	r24, 0x02	; 2
    2c2c:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
				eeprom_write_byte ((uint8_t*) &Countdown2_eep, ((set_clock_buf[0] & 0x0f)<<4)|(set_clock_buf[1] & 0x0f));
				eeprom_write_byte ((uint8_t*) &Countdown2_eep+1, ((set_clock_buf[2] & 0x0f)<<4)|(set_clock_buf[3] & 0x0f));
				eeprom_write_byte ((uint8_t*) &Countdown2_eep+2, ((set_clock_buf[4] & 0x0f)<<4)|(set_clock_buf[5] & 0x0f));
			}*/
			
			user_instruction=0;
    2c30:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	
	user_instruction='c'; //intex for countdown
	cursor=0;Menu_blink_on=1;
	shift=0;
	Display_set_clock();
	while(user_instruction!=0)
    2c3a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    2c3e:	81 11       	cpse	r24, r1
    2c40:	4b cf       	rjmp	.-362    	; 0x2ad8 <Set_countdown+0xde>
			
			user_instruction=0;
			display_init(1);
		}
	}
	display_init(1);
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	08 95       	ret

00002c56 <Set_date>:

void Set_date(void){
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	60 97       	sbiw	r28, 0x10	; 16
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
	struct rtc_time ds1302;
	struct rtc_time *rtc;
	rtc = &ds1302;
	//int8_t clk_byte;
	ds1302_update(rtc);   // update all fields in the struct
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	01 96       	adiw	r24, 0x01	; 1
    2c6e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <ds1302_update>
	set_clock_buf[0]= (rtc->date&0xf0)>>4;
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	98 2f       	mov	r25, r24
    2c76:	92 95       	swap	r25
    2c78:	9f 70       	andi	r25, 0x0F	; 15
    2c7a:	e9 e7       	ldi	r30, 0x79	; 121
    2c7c:	f4 e0       	ldi	r31, 0x04	; 4
    2c7e:	90 83       	st	Z, r25
	set_clock_buf[1]= (rtc->date&0x0f); 
    2c80:	8f 70       	andi	r24, 0x0F	; 15
    2c82:	81 83       	std	Z+1, r24	; 0x01
	set_clock_buf[2]= ((rtc->month&0xf0)>>4);
    2c84:	8e 81       	ldd	r24, Y+6	; 0x06
    2c86:	98 2f       	mov	r25, r24
    2c88:	92 95       	swap	r25
    2c8a:	9f 70       	andi	r25, 0x0F	; 15
    2c8c:	92 83       	std	Z+2, r25	; 0x02
	set_clock_buf[3]= (rtc->month&0x0f);
    2c8e:	8f 70       	andi	r24, 0x0F	; 15
    2c90:	83 83       	std	Z+3, r24	; 0x03
	set_clock_buf[4]= ((rtc->year&0xf0)>>4);
    2c92:	8f 81       	ldd	r24, Y+7	; 0x07
    2c94:	98 2f       	mov	r25, r24
    2c96:	92 95       	swap	r25
    2c98:	9f 70       	andi	r25, 0x0F	; 15
    2c9a:	94 83       	std	Z+4, r25	; 0x04
	set_clock_buf[5]= (rtc->year&0x0f);
    2c9c:	8f 70       	andi	r24, 0x0F	; 15
    2c9e:	85 83       	std	Z+5, r24	; 0x05
	Display_set_clock();
    2ca0:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
	user_instruction='d';
    2ca4:	84 e6       	ldi	r24, 0x64	; 100
    2ca6:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	cursor=0;Menu_blink_on=1;
    2caa:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <Menu_blink_on>
	while(user_instruction!=0)
    2cb4:	9f c0       	rjmp	.+318    	; 0x2df4 <Set_date+0x19e>
	{
		if(key>=0 && key<10)
    2cb6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2cba:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2cbe:	99 23       	and	r25, r25
    2cc0:	d4 f1       	brlt	.+116    	; 0x2d36 <Set_date+0xe0>
    2cc2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2cc6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2cca:	0a 97       	sbiw	r24, 0x0a	; 10
    2ccc:	a4 f5       	brge	.+104    	; 0x2d36 <Set_date+0xe0>
		{
			set_clock_buf[cursor]= key;
    2cce:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2cd2:	0e 2e       	mov	r0, r30
    2cd4:	00 0c       	add	r0, r0
    2cd6:	ff 0b       	sbc	r31, r31
    2cd8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2cdc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2ce0:	e7 58       	subi	r30, 0x87	; 135
    2ce2:	fb 4f       	sbci	r31, 0xFB	; 251
    2ce4:	80 83       	st	Z, r24
			if (cursor==1 || cursor==2 || cursor==3 )
    2ce6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	41 f0       	breq	.+16     	; 0x2cfe <Set_date+0xa8>
    2cee:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2cf2:	82 30       	cpi	r24, 0x02	; 2
    2cf4:	21 f0       	breq	.+8      	; 0x2cfe <Set_date+0xa8>
    2cf6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2cfa:	83 30       	cpi	r24, 0x03	; 3
    2cfc:	51 f4       	brne	.+20     	; 0x2d12 <Set_date+0xbc>
			{
				set_clock_buf[cursor]|=0x80;
    2cfe:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    2d02:	0e 2e       	mov	r0, r30
    2d04:	00 0c       	add	r0, r0
    2d06:	ff 0b       	sbc	r31, r31
    2d08:	e7 58       	subi	r30, 0x87	; 135
    2d0a:	fb 4f       	sbci	r31, 0xFB	; 251
    2d0c:	80 81       	ld	r24, Z
    2d0e:	80 68       	ori	r24, 0x80	; 128
    2d10:	80 83       	st	Z, r24
			}
			key=-1;
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	9f ef       	ldi	r25, 0xFF	; 255
    2d16:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2d1a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    2d1e:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d22:	85 30       	cpi	r24, 0x05	; 5
    2d24:	28 f4       	brcc	.+10     	; 0x2d30 <Set_date+0xda>
    2d26:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
			Display_set_clock();
    2d30:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    2d34:	5f c0       	rjmp	.+190    	; 0x2df4 <Set_date+0x19e>
		}
		else if (key==left)		//check for left <-
    2d36:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2d3a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2d3e:	45 97       	sbiw	r24, 0x15	; 21
    2d40:	99 f4       	brne	.+38     	; 0x2d68 <Set_date+0x112>
		{
			if(cursor!=0)
    2d42:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d46:	88 23       	and	r24, r24
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <Set_date+0xf6>
    2d4a:	54 c0       	rjmp	.+168    	; 0x2df4 <Set_date+0x19e>
			{
				cursor--;
    2d4c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d50:	81 50       	subi	r24, 0x01	; 1
    2d52:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2d56:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2d5a:	8f ef       	ldi	r24, 0xFF	; 255
    2d5c:	9f ef       	ldi	r25, 0xFF	; 255
    2d5e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2d62:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2d66:	46 c0       	rjmp	.+140    	; 0x2df4 <Set_date+0x19e>
			}			
		}
		else if (key==right)		//check for right ->
    2d68:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2d6c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2d70:	46 97       	sbiw	r24, 0x16	; 22
    2d72:	91 f4       	brne	.+36     	; 0x2d98 <Set_date+0x142>
		{
			if(cursor<sizeof(set_clock_buf)-1)
    2d74:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d78:	85 30       	cpi	r24, 0x05	; 5
    2d7a:	e0 f5       	brcc	.+120    	; 0x2df4 <Set_date+0x19e>
			{
				cursor++;
    2d7c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    2d86:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
				key=-1;
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	9f ef       	ldi	r25, 0xFF	; 255
    2d8e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    2d92:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    2d96:	2e c0       	rjmp	.+92     	; 0x2df4 <Set_date+0x19e>
			}
			
		}
		else if (key==ok)
    2d98:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    2d9c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    2da0:	47 97       	sbiw	r24, 0x17	; 23
    2da2:	41 f5       	brne	.+80     	; 0x2df4 <Set_date+0x19e>
		{
			struct rtc_time ds1302;
			struct rtc_time *date;
			date = &ds1302;
			int8_t byte_get;
			date->hour_format = H24;
    2da4:	8c e0       	ldi	r24, 0x0C	; 12
    2da6:	88 8b       	std	Y+16, r24	; 0x10
			byte_get=(set_clock_buf[0] & 0x0f)<<4;
    2da8:	e9 e7       	ldi	r30, 0x79	; 121
    2daa:	f4 e0       	ldi	r31, 0x04	; 4
    2dac:	80 81       	ld	r24, Z
    2dae:	20 e1       	ldi	r18, 0x10	; 16
    2db0:	82 9f       	mul	r24, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[1] & 0x0f);
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	9f 70       	andi	r25, 0x0F	; 15
    2dba:	89 2b       	or	r24, r25
			date->date = byte_get;
    2dbc:	8d 87       	std	Y+13, r24	; 0x0d
			byte_get=(set_clock_buf[2] & 0x0f)<<4;
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	20 e1       	ldi	r18, 0x10	; 16
    2dc2:	82 9f       	mul	r24, r18
    2dc4:	c0 01       	movw	r24, r0
    2dc6:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[3] & 0x0f);
    2dc8:	93 81       	ldd	r25, Z+3	; 0x03
    2dca:	9f 70       	andi	r25, 0x0F	; 15
    2dcc:	89 2b       	or	r24, r25
			date->month = byte_get;
    2dce:	8e 87       	std	Y+14, r24	; 0x0e
			byte_get=(set_clock_buf[4] & 0x0f)<<4;
    2dd0:	84 81       	ldd	r24, Z+4	; 0x04
    2dd2:	20 e1       	ldi	r18, 0x10	; 16
    2dd4:	82 9f       	mul	r24, r18
    2dd6:	c0 01       	movw	r24, r0
    2dd8:	11 24       	eor	r1, r1
			byte_get=byte_get | (set_clock_buf[5] & 0x0f);
    2dda:	95 81       	ldd	r25, Z+5	; 0x05
    2ddc:	9f 70       	andi	r25, 0x0F	; 15
    2dde:	89 2b       	or	r24, r25
			date->year = byte_get;			
    2de0:	8f 87       	std	Y+15, r24	; 0x0f
			ds1302_write_date(date);
    2de2:	ce 01       	movw	r24, r28
    2de4:	09 96       	adiw	r24, 0x09	; 9
    2de6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <ds1302_write_date>
			user_instruction=0;
    2dea:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			display_init(1);
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	set_clock_buf[4]= ((rtc->year&0xf0)>>4);
	set_clock_buf[5]= (rtc->year&0x0f);
	Display_set_clock();
	user_instruction='d';
	cursor=0;Menu_blink_on=1;
	while(user_instruction!=0)
    2df4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    2df8:	81 11       	cpse	r24, r1
    2dfa:	5d cf       	rjmp	.-326    	; 0x2cb6 <Set_date+0x60>
			ds1302_write_date(date);
			user_instruction=0;
			display_init(1);
		}
	}
	display_init(1);
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	//cursor=0;
	//shift=0;
	//Clock_blink=0;Menu_blink_on=0;
}
    2e02:	60 96       	adiw	r28, 0x10	; 16
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <show_brightness>:
		//uint8_t digits = eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
		//TLC_config_byte(sram_brigt,digits);
	} 
}

void show_brightness(void){
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <show_brightness+0x6>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <show_brightness+0x8>
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <show_brightness+0xa>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
	char dec_bright[2]; 
	char dec_address[4];
	uint8_t i;
	itoa(sram_brigt,dec_bright,10);	
    2e22:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sram_brigt>
    2e26:	4a e0       	ldi	r20, 0x0A	; 10
    2e28:	be 01       	movw	r22, r28
    2e2a:	6f 5f       	subi	r22, 0xFF	; 255
    2e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__itoa_ncheck>
	display_out_buf[0]= CHR_o;
    2e34:	ef e7       	ldi	r30, 0x7F	; 127
    2e36:	f4 e0       	ldi	r31, 0x04	; 4
    2e38:	82 e1       	ldi	r24, 0x12	; 18
    2e3a:	80 83       	st	Z, r24
	display_out_buf[1]= SPACE;
    2e3c:	8d e0       	ldi	r24, 0x0D	; 13
    2e3e:	81 83       	std	Z+1, r24	; 0x01
	if (dec_bright[1]!=0)
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	88 23       	and	r24, r24
    2e44:	31 f0       	breq	.+12     	; 0x2e52 <show_brightness+0x3e>
	{
		display_out_buf[2]=dec_bright[0]&0x0f;
    2e46:	99 81       	ldd	r25, Y+1	; 0x01
    2e48:	9f 70       	andi	r25, 0x0F	; 15
    2e4a:	92 83       	std	Z+2, r25	; 0x02
		display_out_buf[3]=dec_bright[1]&0x0f;
    2e4c:	8f 70       	andi	r24, 0x0F	; 15
    2e4e:	83 83       	std	Z+3, r24	; 0x03
    2e50:	07 c0       	rjmp	.+14     	; 0x2e60 <show_brightness+0x4c>
	}else{
		display_out_buf[2]= SPACE;
    2e52:	ef e7       	ldi	r30, 0x7F	; 127
    2e54:	f4 e0       	ldi	r31, 0x04	; 4
    2e56:	8d e0       	ldi	r24, 0x0D	; 13
    2e58:	82 83       	std	Z+2, r24	; 0x02
		display_out_buf[3]=dec_bright[0]&0x0f;
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	8f 70       	andi	r24, 0x0F	; 15
    2e5e:	83 83       	std	Z+3, r24	; 0x03
	}
	
	if (Digits_disp==6)	{
    2e60:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    2e64:	86 30       	cpi	r24, 0x06	; 6
    2e66:	31 f4       	brne	.+12     	; 0x2e74 <show_brightness+0x60>
		display_out_buf[4]= SPACE;
    2e68:	ef e7       	ldi	r30, 0x7F	; 127
    2e6a:	f4 e0       	ldi	r31, 0x04	; 4
    2e6c:	8d e0       	ldi	r24, 0x0D	; 13
    2e6e:	84 83       	std	Z+4, r24	; 0x04
		display_out_buf[5]= SPACE;
    2e70:	85 83       	std	Z+5, r24	; 0x05
    2e72:	22 c0       	rjmp	.+68     	; 0x2eb8 <show_brightness+0xa4>
	}else if (Digits_disp>=8){
    2e74:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    2e78:	88 30       	cpi	r24, 0x08	; 8
    2e7a:	f4 f0       	brlt	.+60     	; 0x2eb8 <show_brightness+0xa4>
		itoa(eeprom_read_byte((uint8_t*)Slave_address),dec_address,10);	
    2e7c:	8c e1       	ldi	r24, 0x1C	; 28
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    2e84:	4a e0       	ldi	r20, 0x0A	; 10
    2e86:	be 01       	movw	r22, r28
    2e88:	6d 5f       	subi	r22, 0xFD	; 253
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__itoa_ncheck>
		display_out_buf[4]= CHR_A;
    2e92:	ef e7       	ldi	r30, 0x7F	; 127
    2e94:	f4 e0       	ldi	r31, 0x04	; 4
    2e96:	84 e1       	ldi	r24, 0x14	; 20
    2e98:	84 83       	std	Z+4, r24	; 0x04
		display_out_buf[5]= SPACE;
    2e9a:	8d e0       	ldi	r24, 0x0D	; 13
    2e9c:	85 83       	std	Z+5, r24	; 0x05
		display_out_buf[6]= dec_address[0]&0xf;
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	8f 70       	andi	r24, 0x0F	; 15
    2ea2:	86 83       	std	Z+6, r24	; 0x06
		if (dec_address[1]){
    2ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea6:	88 23       	and	r24, r24
    2ea8:	21 f0       	breq	.+8      	; 0x2eb2 <show_brightness+0x9e>
			display_out_buf[7]= dec_address[1]&0xf;
    2eaa:	8f 70       	andi	r24, 0x0F	; 15
    2eac:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
    2eb0:	03 c0       	rjmp	.+6      	; 0x2eb8 <show_brightness+0xa4>
		}else{
			display_out_buf[7]= SPACE; 
    2eb2:	8d e0       	ldi	r24, 0x0D	; 13
    2eb4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <display_out_buf+0x7>
		}
		
	}
	
	
	Display_Out();
    2eb8:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
    2ebc:	2f ef       	ldi	r18, 0xFF	; 255
    2ebe:	8d e3       	ldi	r24, 0x3D	; 61
    2ec0:	99 e4       	ldi	r25, 0x49	; 73
    2ec2:	21 50       	subi	r18, 0x01	; 1
    2ec4:	80 40       	sbci	r24, 0x00	; 0
    2ec6:	90 40       	sbci	r25, 0x00	; 0
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <show_brightness+0xae>
    2eca:	00 c0       	rjmp	.+0      	; 0x2ecc <show_brightness+0xb8>
    2ecc:	00 00       	nop
	_delay_ms(3000);
	user_instruction=0;
    2ece:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
	display_init(1);
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
}
    2ed8:	26 96       	adiw	r28, 0x06	; 6
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	08 95       	ret

00002eea <Modebus_receve_finish>:
    else                            // Else LSB is not set
      CRC_receive >>= 1;                    // Just shift right
    }
}

extern void Modebus_receve_finish(void){
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
	if (Read_Modstr.CRC == CRC_receive)
    2ef0:	20 91 18 05 	lds	r18, 0x0518	; 0x800518 <Read_Modstr+0x43>
    2ef4:	30 91 19 05 	lds	r19, 0x0519	; 0x800519 <Read_Modstr+0x44>
    2ef8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2efc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2f00:	28 17       	cp	r18, r24
    2f02:	39 07       	cpc	r19, r25
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <Modebus_receve_finish+0x1e>
    2f06:	67 c5       	rjmp	.+2766   	; 0x39d6 <Modebus_receve_finish+0xaec>
	{
		int8_t i=0;
		uint8_t Status_Byte=0;
		send_Modstr.nb = 0;
    2f08:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <send_Modstr+0x2>
		uint8_t Len;
		switch(Read_Modstr.function)
    2f0c:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <Read_Modstr+0x1>
    2f10:	8e 2f       	mov	r24, r30
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	fc 01       	movw	r30, r24
    2f16:	31 97       	sbiw	r30, 0x01	; 1
    2f18:	e7 36       	cpi	r30, 0x67	; 103
    2f1a:	f1 05       	cpc	r31, r1
    2f1c:	08 f0       	brcs	.+2      	; 0x2f20 <Modebus_receve_finish+0x36>
    2f1e:	5b c5       	rjmp	.+2742   	; 0x39d6 <Modebus_receve_finish+0xaec>
    2f20:	ea 55       	subi	r30, 0x5A	; 90
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__tablejump2__>
		{
			case(MD_Device_ID):
				send_Modstr.function = MD_Device_ID;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <send_Modstr+0x1>
}

extern void Modebus_receve_finish(void){
	if (Read_Modstr.CRC == CRC_receive)
	{
		int8_t i=0;
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
		switch(Read_Modstr.function)
		{
			case(MD_Device_ID):
				send_Modstr.function = MD_Device_ID;
								
				while(i<sizeof(flash_Device_ID)){
    2f30:	0f c0       	rjmp	.+30     	; 0x2f50 <Modebus_receve_finish+0x66>
					send_Modstr.data[i] = flash_Device_ID[i];
    2f32:	84 2f       	mov	r24, r20
    2f34:	04 2e       	mov	r0, r20
    2f36:	00 0c       	add	r0, r0
    2f38:	99 0b       	sbc	r25, r25
    2f3a:	9c 01       	movw	r18, r24
    2f3c:	22 52       	subi	r18, 0x22	; 34
    2f3e:	3c 4f       	sbci	r19, 0xFC	; 252
    2f40:	f9 01       	movw	r30, r18
    2f42:	24 91       	lpm	r18, Z
    2f44:	dc 01       	movw	r26, r24
    2f46:	a6 57       	subi	r26, 0x76	; 118
    2f48:	bb 4f       	sbci	r27, 0xFB	; 251
    2f4a:	13 96       	adiw	r26, 0x03	; 3
    2f4c:	2c 93       	st	X, r18
					i++;
    2f4e:	4f 5f       	subi	r20, 0xFF	; 255
		switch(Read_Modstr.function)
		{
			case(MD_Device_ID):
				send_Modstr.function = MD_Device_ID;
								
				while(i<sizeof(flash_Device_ID)){
    2f50:	84 2f       	mov	r24, r20
    2f52:	41 31       	cpi	r20, 0x11	; 17
    2f54:	70 f3       	brcs	.-36     	; 0x2f32 <Modebus_receve_finish+0x48>
					send_Modstr.data[i] = flash_Device_ID[i];
					i++;
				}
				send_Modstr.nb = i-1;
    2f56:	81 50       	subi	r24, 0x01	; 1
    2f58:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <send_Modstr+0x2>
				send_Modstr.data[i] = 0;
    2f5c:	e4 2f       	mov	r30, r20
    2f5e:	44 0f       	add	r20, r20
    2f60:	ff 0b       	sbc	r31, r31
    2f62:	e6 57       	subi	r30, 0x76	; 118
    2f64:	fb 4f       	sbci	r31, 0xFB	; 251
    2f66:	13 82       	std	Z+3, r1	; 0x03
				//send_Modstr.address = eeprom_read_byte((uint8_t*)Slave_address);
				 //"CLOCK_TIMER_V.1.2"	
				//send_Modstr.CRC = CRC_receive;	
				Reply_modbus(send_Modstr);
    2f68:	8d b7       	in	r24, 0x3d	; 61
    2f6a:	9e b7       	in	r25, 0x3e	; 62
    2f6c:	85 54       	subi	r24, 0x45	; 69
    2f6e:	91 09       	sbc	r25, r1
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	9e bf       	out	0x3e, r25	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	8d bf       	out	0x3d, r24	; 61
    2f7a:	ad b7       	in	r26, 0x3d	; 61
    2f7c:	be b7       	in	r27, 0x3e	; 62
    2f7e:	11 96       	adiw	r26, 0x01	; 1
    2f80:	85 e4       	ldi	r24, 0x45	; 69
    2f82:	ea e8       	ldi	r30, 0x8A	; 138
    2f84:	f4 e0       	ldi	r31, 0x04	; 4
    2f86:	01 90       	ld	r0, Z+
    2f88:	0d 92       	st	X+, r0
    2f8a:	8a 95       	dec	r24
    2f8c:	e1 f7       	brne	.-8      	; 0x2f86 <Modebus_receve_finish+0x9c>
    2f8e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    2f92:	ed b7       	in	r30, 0x3d	; 61
    2f94:	fe b7       	in	r31, 0x3e	; 62
    2f96:	eb 5b       	subi	r30, 0xBB	; 187
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	fe bf       	out	0x3e, r31	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	ed bf       	out	0x3d, r30	; 61
    2fa4:	18 c5       	rjmp	.+2608   	; 0x39d6 <Modebus_receve_finish+0xaec>
			case(MD_Set_Address):
				cli();
    2fa6:	f8 94       	cli
				eeprom_write_byte ((uint8_t*)Slave_address,Read_Modstr.data[0]);
    2fa8:	60 91 d8 04 	lds	r22, 0x04D8	; 0x8004d8 <Read_Modstr+0x3>
    2fac:	8c e1       	ldi	r24, 0x1C	; 28
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
				sei();
    2fb4:	78 94       	sei
				send_Modstr.function = MD_Set_Address;
    2fb6:	ea e8       	ldi	r30, 0x8A	; 138
    2fb8:	f4 e0       	ldi	r31, 0x04	; 4
    2fba:	82 e1       	ldi	r24, 0x12	; 18
    2fbc:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    2fbe:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    2fc0:	8d b7       	in	r24, 0x3d	; 61
    2fc2:	9e b7       	in	r25, 0x3e	; 62
    2fc4:	85 54       	subi	r24, 0x45	; 69
    2fc6:	91 09       	sbc	r25, r1
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	9e bf       	out	0x3e, r25	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	8d bf       	out	0x3d, r24	; 61
    2fd2:	ad b7       	in	r26, 0x3d	; 61
    2fd4:	be b7       	in	r27, 0x3e	; 62
    2fd6:	11 96       	adiw	r26, 0x01	; 1
    2fd8:	85 e4       	ldi	r24, 0x45	; 69
    2fda:	01 90       	ld	r0, Z+
    2fdc:	0d 92       	st	X+, r0
    2fde:	8a 95       	dec	r24
    2fe0:	e1 f7       	brne	.-8      	; 0x2fda <Modebus_receve_finish+0xf0>
    2fe2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    2fe6:	ed b7       	in	r30, 0x3d	; 61
    2fe8:	fe b7       	in	r31, 0x3e	; 62
    2fea:	eb 5b       	subi	r30, 0xBB	; 187
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	fe bf       	out	0x3e, r31	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	ed bf       	out	0x3d, r30	; 61
    2ff8:	ee c4       	rjmp	.+2524   	; 0x39d6 <Modebus_receve_finish+0xaec>
			case(MD_Read_Brightness):
				send_Modstr.function = MD_Read_Brightness;
    2ffa:	ea e8       	ldi	r30, 0x8A	; 138
    2ffc:	f4 e0       	ldi	r31, 0x04	; 4
    2ffe:	80 e1       	ldi	r24, 0x10	; 16
    3000:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0] = sram_brigt;
    3002:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sram_brigt>
    3006:	83 83       	std	Z+3, r24	; 0x03
				send_Modstr.data[1] = 0;
    3008:	14 82       	std	Z+4, r1	; 0x04
				send_Modstr.nb =1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	82 83       	std	Z+2, r24	; 0x02
				Reply_modbus(send_Modstr);
    300e:	8d b7       	in	r24, 0x3d	; 61
    3010:	9e b7       	in	r25, 0x3e	; 62
    3012:	85 54       	subi	r24, 0x45	; 69
    3014:	91 09       	sbc	r25, r1
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	9e bf       	out	0x3e, r25	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	8d bf       	out	0x3d, r24	; 61
    3020:	ad b7       	in	r26, 0x3d	; 61
    3022:	be b7       	in	r27, 0x3e	; 62
    3024:	11 96       	adiw	r26, 0x01	; 1
    3026:	85 e4       	ldi	r24, 0x45	; 69
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	8a 95       	dec	r24
    302e:	e1 f7       	brne	.-8      	; 0x3028 <Modebus_receve_finish+0x13e>
    3030:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3034:	ed b7       	in	r30, 0x3d	; 61
    3036:	fe b7       	in	r31, 0x3e	; 62
    3038:	eb 5b       	subi	r30, 0xBB	; 187
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	fe bf       	out	0x3e, r31	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	ed bf       	out	0x3d, r30	; 61
    3046:	c7 c4       	rjmp	.+2446   	; 0x39d6 <Modebus_receve_finish+0xaec>
			case(MD_Set_Brightness):
				cli();
    3048:	f8 94       	cli
				eeprom_write_byte((uint8_t*)F_eep + Brightness,Read_Modstr.data[0]);
    304a:	60 91 d8 04 	lds	r22, 0x04D8	; 0x8004d8 <Read_Modstr+0x3>
    304e:	82 e0       	ldi	r24, 0x02	; 2
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
				sei();
    3056:	78 94       	sei
				send_Modstr.function = MD_Set_Brightness;
    3058:	ea e8       	ldi	r30, 0x8A	; 138
    305a:	f4 e0       	ldi	r31, 0x04	; 4
    305c:	81 e1       	ldi	r24, 0x11	; 17
    305e:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    3060:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3062:	8d b7       	in	r24, 0x3d	; 61
    3064:	9e b7       	in	r25, 0x3e	; 62
    3066:	85 54       	subi	r24, 0x45	; 69
    3068:	91 09       	sbc	r25, r1
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	9e bf       	out	0x3e, r25	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	8d bf       	out	0x3d, r24	; 61
    3074:	ad b7       	in	r26, 0x3d	; 61
    3076:	be b7       	in	r27, 0x3e	; 62
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	85 e4       	ldi	r24, 0x45	; 69
    307c:	01 90       	ld	r0, Z+
    307e:	0d 92       	st	X+, r0
    3080:	8a 95       	dec	r24
    3082:	e1 f7       	brne	.-8      	; 0x307c <Modebus_receve_finish+0x192>
    3084:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3088:	ed b7       	in	r30, 0x3d	; 61
    308a:	fe b7       	in	r31, 0x3e	; 62
    308c:	eb 5b       	subi	r30, 0xBB	; 187
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	fe bf       	out	0x3e, r31	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	ed bf       	out	0x3d, r30	; 61
    309a:	9d c4       	rjmp	.+2362   	; 0x39d6 <Modebus_receve_finish+0xaec>
#ifdef TIMER_DISPLAY
			case(MD_Start_Countdown1):
				if (user_instruction != 'A' && user_instruction != 'a') {
    309c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    30a0:	81 34       	cpi	r24, 0x41	; 65
    30a2:	69 f0       	breq	.+26     	; 0x30be <Modebus_receve_finish+0x1d4>
    30a4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    30a8:	81 36       	cpi	r24, 0x61	; 97
    30aa:	49 f0       	breq	.+18     	; 0x30be <Modebus_receve_finish+0x1d4>
					user_instruction = 'A'; // This means Counter down 1
    30ac:	81 e4       	ldi	r24, 0x41	; 65
    30ae:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	9f ef       	ldi	r25, 0xFF	; 255
    30b6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    30ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				}
				send_Modstr.function = MD_Start_Countdown1;
    30be:	ea e8       	ldi	r30, 0x8A	; 138
    30c0:	f4 e0       	ldi	r31, 0x04	; 4
    30c2:	85 e0       	ldi	r24, 0x05	; 5
    30c4:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    30c6:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    30c8:	8d b7       	in	r24, 0x3d	; 61
    30ca:	9e b7       	in	r25, 0x3e	; 62
    30cc:	85 54       	subi	r24, 0x45	; 69
    30ce:	91 09       	sbc	r25, r1
    30d0:	0f b6       	in	r0, 0x3f	; 63
    30d2:	f8 94       	cli
    30d4:	9e bf       	out	0x3e, r25	; 62
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	8d bf       	out	0x3d, r24	; 61
    30da:	ad b7       	in	r26, 0x3d	; 61
    30dc:	be b7       	in	r27, 0x3e	; 62
    30de:	11 96       	adiw	r26, 0x01	; 1
    30e0:	85 e4       	ldi	r24, 0x45	; 69
    30e2:	01 90       	ld	r0, Z+
    30e4:	0d 92       	st	X+, r0
    30e6:	8a 95       	dec	r24
    30e8:	e1 f7       	brne	.-8      	; 0x30e2 <Modebus_receve_finish+0x1f8>
    30ea:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    30ee:	ed b7       	in	r30, 0x3d	; 61
    30f0:	fe b7       	in	r31, 0x3e	; 62
    30f2:	eb 5b       	subi	r30, 0xBB	; 187
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	fe bf       	out	0x3e, r31	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	ed bf       	out	0x3d, r30	; 61
    3100:	6a c4       	rjmp	.+2260   	; 0x39d6 <Modebus_receve_finish+0xaec>
			case(MD_Start_Countdown2):
				if (user_instruction != 'B' && user_instruction != 'b') {
    3102:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3106:	82 34       	cpi	r24, 0x42	; 66
    3108:	69 f0       	breq	.+26     	; 0x3124 <Modebus_receve_finish+0x23a>
    310a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    310e:	82 36       	cpi	r24, 0x62	; 98
    3110:	49 f0       	breq	.+18     	; 0x3124 <Modebus_receve_finish+0x23a>
					user_instruction = 'B'; // This means Counter down 1
    3112:	82 e4       	ldi	r24, 0x42	; 66
    3114:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	9f ef       	ldi	r25, 0xFF	; 255
    311c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3120:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				}
				send_Modstr.function = MD_Start_Countdown2;
    3124:	ea e8       	ldi	r30, 0x8A	; 138
    3126:	f4 e0       	ldi	r31, 0x04	; 4
    3128:	86 e0       	ldi	r24, 0x06	; 6
    312a:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    312c:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    312e:	8d b7       	in	r24, 0x3d	; 61
    3130:	9e b7       	in	r25, 0x3e	; 62
    3132:	85 54       	subi	r24, 0x45	; 69
    3134:	91 09       	sbc	r25, r1
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	9e bf       	out	0x3e, r25	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	8d bf       	out	0x3d, r24	; 61
    3140:	ad b7       	in	r26, 0x3d	; 61
    3142:	be b7       	in	r27, 0x3e	; 62
    3144:	11 96       	adiw	r26, 0x01	; 1
    3146:	85 e4       	ldi	r24, 0x45	; 69
    3148:	01 90       	ld	r0, Z+
    314a:	0d 92       	st	X+, r0
    314c:	8a 95       	dec	r24
    314e:	e1 f7       	brne	.-8      	; 0x3148 <Modebus_receve_finish+0x25e>
    3150:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3154:	ed b7       	in	r30, 0x3d	; 61
    3156:	fe b7       	in	r31, 0x3e	; 62
    3158:	eb 5b       	subi	r30, 0xBB	; 187
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	fe bf       	out	0x3e, r31	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	ed bf       	out	0x3d, r30	; 61
    3166:	37 c4       	rjmp	.+2158   	; 0x39d6 <Modebus_receve_finish+0xaec>
			/*
				if (user_instruction != 'U' && user_instruction != 'u') {
					user_instruction = 'U'; // This means Up counter
					key = -1;
				} */
				user_instruction = 'U'; // This means Up counter
    3168:	85 e5       	ldi	r24, 0x55	; 85
    316a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
				key = -1;
    316e:	8f ef       	ldi	r24, 0xFF	; 255
    3170:	9f ef       	ldi	r25, 0xFF	; 255
    3172:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3176:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				TCCR2B=0;
    317a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				TCNT2=0;
    317e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
				timer[0]=0;timer[1]=0;timer[2]=0;
    3182:	e6 e7       	ldi	r30, 0x76	; 118
    3184:	f4 e0       	ldi	r31, 0x04	; 4
    3186:	10 82       	st	Z, r1
    3188:	11 82       	std	Z+1, r1	; 0x01
    318a:	12 82       	std	Z+2, r1	; 0x02
#ifndef SCOREBOARD
				milliseconds_count=0;
#endif
				Timer_blink_on=0x80;
    318c:	80 e8       	ldi	r24, 0x80	; 128
    318e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <Timer_blink_on>
				
				send_Modstr.function = MD_Start_Upcounter;
    3192:	ea e8       	ldi	r30, 0x8A	; 138
    3194:	f4 e0       	ldi	r31, 0x04	; 4
    3196:	87 e0       	ldi	r24, 0x07	; 7
    3198:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    319a:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    319c:	8d b7       	in	r24, 0x3d	; 61
    319e:	9e b7       	in	r25, 0x3e	; 62
    31a0:	85 54       	subi	r24, 0x45	; 69
    31a2:	91 09       	sbc	r25, r1
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	9e bf       	out	0x3e, r25	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	8d bf       	out	0x3d, r24	; 61
    31ae:	ad b7       	in	r26, 0x3d	; 61
    31b0:	be b7       	in	r27, 0x3e	; 62
    31b2:	11 96       	adiw	r26, 0x01	; 1
    31b4:	85 e4       	ldi	r24, 0x45	; 69
    31b6:	01 90       	ld	r0, Z+
    31b8:	0d 92       	st	X+, r0
    31ba:	8a 95       	dec	r24
    31bc:	e1 f7       	brne	.-8      	; 0x31b6 <Modebus_receve_finish+0x2cc>
    31be:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    31c2:	ed b7       	in	r30, 0x3d	; 61
    31c4:	fe b7       	in	r31, 0x3e	; 62
    31c6:	eb 5b       	subi	r30, 0xBB	; 187
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	fe bf       	out	0x3e, r31	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	ed bf       	out	0x3d, r30	; 61
    31d4:	00 c4       	rjmp	.+2048   	; 0x39d6 <Modebus_receve_finish+0xaec>
			case(MD_StartStop_timer):
				key=ok;
    31d6:	87 e1       	ldi	r24, 0x17	; 23
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    31de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				send_Modstr.function = MD_StartStop_timer;
    31e2:	ea e8       	ldi	r30, 0x8A	; 138
    31e4:	f4 e0       	ldi	r31, 0x04	; 4
    31e6:	82 e2       	ldi	r24, 0x22	; 34
    31e8:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    31ea:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    31ec:	8d b7       	in	r24, 0x3d	; 61
    31ee:	9e b7       	in	r25, 0x3e	; 62
    31f0:	85 54       	subi	r24, 0x45	; 69
    31f2:	91 09       	sbc	r25, r1
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	9e bf       	out	0x3e, r25	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	8d bf       	out	0x3d, r24	; 61
    31fe:	ad b7       	in	r26, 0x3d	; 61
    3200:	be b7       	in	r27, 0x3e	; 62
    3202:	11 96       	adiw	r26, 0x01	; 1
    3204:	85 e4       	ldi	r24, 0x45	; 69
    3206:	01 90       	ld	r0, Z+
    3208:	0d 92       	st	X+, r0
    320a:	8a 95       	dec	r24
    320c:	e1 f7       	brne	.-8      	; 0x3206 <Modebus_receve_finish+0x31c>
    320e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3212:	ed b7       	in	r30, 0x3d	; 61
    3214:	fe b7       	in	r31, 0x3e	; 62
    3216:	eb 5b       	subi	r30, 0xBB	; 187
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	fe bf       	out	0x3e, r31	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	ed bf       	out	0x3d, r30	; 61
    3224:	d8 c3       	rjmp	.+1968   	; 0x39d6 <Modebus_receve_finish+0xaec>

			case(MD_Start_timer):
				cli();
    3226:	f8 94       	cli
				if (eeprom_read_byte((uint8_t*)FAV_eep + Centimeter)){
    3228:	8e e0       	ldi	r24, 0x0E	; 14
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    3230:	88 23       	and	r24, r24
    3232:	21 f0       	breq	.+8      	; 0x323c <Modebus_receve_finish+0x352>
					TCCR2B = 0b00000001; //start timer for seconds
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    323a:	03 c0       	rjmp	.+6      	; 0x3242 <Modebus_receve_finish+0x358>
				}else{
					TCCR2B = 0b00000101; //start timer for seconds
    323c:	85 e0       	ldi	r24, 0x05	; 5
    323e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				}
				sei();
    3242:	78 94       	sei
				send_Modstr.function = MD_Start_timer;
    3244:	ea e8       	ldi	r30, 0x8A	; 138
    3246:	f4 e0       	ldi	r31, 0x04	; 4
    3248:	88 e1       	ldi	r24, 0x18	; 24
    324a:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    324c:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    324e:	8d b7       	in	r24, 0x3d	; 61
    3250:	9e b7       	in	r25, 0x3e	; 62
    3252:	85 54       	subi	r24, 0x45	; 69
    3254:	91 09       	sbc	r25, r1
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	9e bf       	out	0x3e, r25	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	8d bf       	out	0x3d, r24	; 61
    3260:	ad b7       	in	r26, 0x3d	; 61
    3262:	be b7       	in	r27, 0x3e	; 62
    3264:	11 96       	adiw	r26, 0x01	; 1
    3266:	85 e4       	ldi	r24, 0x45	; 69
    3268:	01 90       	ld	r0, Z+
    326a:	0d 92       	st	X+, r0
    326c:	8a 95       	dec	r24
    326e:	e1 f7       	brne	.-8      	; 0x3268 <Modebus_receve_finish+0x37e>
    3270:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				Buzzer(1,8600);
    3274:	ed b7       	in	r30, 0x3d	; 61
    3276:	fe b7       	in	r31, 0x3e	; 62
    3278:	eb 5b       	subi	r30, 0xBB	; 187
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	fe bf       	out	0x3e, r31	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	ed bf       	out	0x3d, r30	; 61
    3286:	68 e9       	ldi	r22, 0x98	; 152
    3288:	71 e2       	ldi	r23, 0x21	; 33
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    3292:	ff ef       	ldi	r31, 0xFF	; 255
    3294:	22 e5       	ldi	r18, 0x52	; 82
    3296:	87 e0       	ldi	r24, 0x07	; 7
    3298:	f1 50       	subi	r31, 0x01	; 1
    329a:	20 40       	sbci	r18, 0x00	; 0
    329c:	80 40       	sbci	r24, 0x00	; 0
    329e:	e1 f7       	brne	.-8      	; 0x3298 <Modebus_receve_finish+0x3ae>
    32a0:	00 c0       	rjmp	.+0      	; 0x32a2 <Modebus_receve_finish+0x3b8>
    32a2:	00 00       	nop
				_delay_ms(300);
				Buzzer(0,0);
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				break;
    32b0:	92 c3       	rjmp	.+1828   	; 0x39d6 <Modebus_receve_finish+0xaec>
//#endif
			case(MD_Stop_timer):
				TCCR2B=0;
    32b2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
				send_Modstr.function = MD_Stop_timer;
    32b6:	ea e8       	ldi	r30, 0x8A	; 138
    32b8:	f4 e0       	ldi	r31, 0x04	; 4
    32ba:	89 e1       	ldi	r24, 0x19	; 25
    32bc:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    32be:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    32c0:	ed b7       	in	r30, 0x3d	; 61
    32c2:	fe b7       	in	r31, 0x3e	; 62
    32c4:	e5 54       	subi	r30, 0x45	; 69
    32c6:	f1 09       	sbc	r31, r1
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	fe bf       	out	0x3e, r31	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	ed bf       	out	0x3d, r30	; 61
    32d2:	ad b7       	in	r26, 0x3d	; 61
    32d4:	be b7       	in	r27, 0x3e	; 62
    32d6:	11 96       	adiw	r26, 0x01	; 1
    32d8:	85 e4       	ldi	r24, 0x45	; 69
    32da:	ea e8       	ldi	r30, 0x8A	; 138
    32dc:	f4 e0       	ldi	r31, 0x04	; 4
    32de:	01 90       	ld	r0, Z+
    32e0:	0d 92       	st	X+, r0
    32e2:	8a 95       	dec	r24
    32e4:	e1 f7       	brne	.-8      	; 0x32de <Modebus_receve_finish+0x3f4>
    32e6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				Buzzer(1,8600);
    32ea:	8d b7       	in	r24, 0x3d	; 61
    32ec:	9e b7       	in	r25, 0x3e	; 62
    32ee:	8b 5b       	subi	r24, 0xBB	; 187
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	9e bf       	out	0x3e, r25	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	8d bf       	out	0x3d, r24	; 61
    32fc:	68 e9       	ldi	r22, 0x98	; 152
    32fe:	71 e2       	ldi	r23, 0x21	; 33
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    3308:	9f ef       	ldi	r25, 0xFF	; 255
    330a:	e2 e5       	ldi	r30, 0x52	; 82
    330c:	f7 e0       	ldi	r31, 0x07	; 7
    330e:	91 50       	subi	r25, 0x01	; 1
    3310:	e0 40       	sbci	r30, 0x00	; 0
    3312:	f0 40       	sbci	r31, 0x00	; 0
    3314:	e1 f7       	brne	.-8      	; 0x330e <Modebus_receve_finish+0x424>
    3316:	00 c0       	rjmp	.+0      	; 0x3318 <Modebus_receve_finish+0x42e>
    3318:	00 00       	nop
				_delay_ms(300);
				Buzzer(0,0);
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				break;
    3326:	57 c3       	rjmp	.+1710   	; 0x39d6 <Modebus_receve_finish+0xaec>
			case(MD_Exit_Timing):
				send_Modstr.function = MD_Exit_Timing;
    3328:	ea e8       	ldi	r30, 0x8A	; 138
    332a:	f4 e0       	ldi	r31, 0x04	; 4
    332c:	84 e0       	ldi	r24, 0x04	; 4
    332e:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    3330:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3332:	8d b7       	in	r24, 0x3d	; 61
    3334:	9e b7       	in	r25, 0x3e	; 62
    3336:	85 54       	subi	r24, 0x45	; 69
    3338:	91 09       	sbc	r25, r1
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	9e bf       	out	0x3e, r25	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	8d bf       	out	0x3d, r24	; 61
    3344:	ad b7       	in	r26, 0x3d	; 61
    3346:	be b7       	in	r27, 0x3e	; 62
    3348:	11 96       	adiw	r26, 0x01	; 1
    334a:	85 e4       	ldi	r24, 0x45	; 69
    334c:	01 90       	ld	r0, Z+
    334e:	0d 92       	st	X+, r0
    3350:	8a 95       	dec	r24
    3352:	e1 f7       	brne	.-8      	; 0x334c <Modebus_receve_finish+0x462>
    3354:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				user_instruction = 0;
    3358:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
				Set_countdown_bank = 0;
    335c:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
				display_init(1);
    3360:	ed b7       	in	r30, 0x3d	; 61
    3362:	fe b7       	in	r31, 0x3e	; 62
    3364:	eb 5b       	subi	r30, 0xBB	; 187
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	fe bf       	out	0x3e, r31	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	ed bf       	out	0x3d, r30	; 61
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
				break;
    337a:	2d c3       	rjmp	.+1626   	; 0x39d6 <Modebus_receve_finish+0xaec>
//.....................................................................
			case (MD_Set_Fav_Menu):
				i=0;
				cli();
    337c:	f8 94       	cli
				Set_countdown_bank = 0;
				display_init(1);
				break;
//.....................................................................
			case (MD_Set_Fav_Menu):
				i=0;
    337e:	c0 e0       	ldi	r28, 0x00	; 0
				cli();
				while(i<sizeof(FAV_eep)){
    3380:	0d c0       	rjmp	.+26     	; 0x339c <Modebus_receve_finish+0x4b2>
					eeprom_write_byte ((uint8_t*) FAV_eep + i, Read_Modstr.data[i]);
    3382:	8c 2f       	mov	r24, r28
    3384:	0c 2e       	mov	r0, r28
    3386:	00 0c       	add	r0, r0
    3388:	99 0b       	sbc	r25, r25
    338a:	fc 01       	movw	r30, r24
    338c:	eb 52       	subi	r30, 0x2B	; 43
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	63 81       	ldd	r22, Z+3	; 0x03
    3392:	88 5f       	subi	r24, 0xF8	; 248
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
					i++;
    339a:	cf 5f       	subi	r28, 0xFF	; 255
				break;
//.....................................................................
			case (MD_Set_Fav_Menu):
				i=0;
				cli();
				while(i<sizeof(FAV_eep)){
    339c:	c8 30       	cpi	r28, 0x08	; 8
    339e:	88 f3       	brcs	.-30     	; 0x3382 <Modebus_receve_finish+0x498>
					eeprom_write_byte ((uint8_t*) FAV_eep + i, Read_Modstr.data[i]);
					i++;
				}
				sei();
    33a0:	78 94       	sei
				send_Modstr.function = MD_Set_Fav_Menu;
    33a2:	ea e8       	ldi	r30, 0x8A	; 138
    33a4:	f4 e0       	ldi	r31, 0x04	; 4
    33a6:	88 e2       	ldi	r24, 0x28	; 40
    33a8:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    33aa:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    33ac:	8d b7       	in	r24, 0x3d	; 61
    33ae:	9e b7       	in	r25, 0x3e	; 62
    33b0:	85 54       	subi	r24, 0x45	; 69
    33b2:	91 09       	sbc	r25, r1
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	9e bf       	out	0x3e, r25	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	8d bf       	out	0x3d, r24	; 61
    33be:	ad b7       	in	r26, 0x3d	; 61
    33c0:	be b7       	in	r27, 0x3e	; 62
    33c2:	11 96       	adiw	r26, 0x01	; 1
    33c4:	85 e4       	ldi	r24, 0x45	; 69
    33c6:	01 90       	ld	r0, Z+
    33c8:	0d 92       	st	X+, r0
    33ca:	8a 95       	dec	r24
    33cc:	e1 f7       	brne	.-8      	; 0x33c6 <Modebus_receve_finish+0x4dc>
    33ce:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    33d2:	ed b7       	in	r30, 0x3d	; 61
    33d4:	fe b7       	in	r31, 0x3e	; 62
    33d6:	eb 5b       	subi	r30, 0xBB	; 187
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	fe bf       	out	0x3e, r31	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	ed bf       	out	0x3d, r30	; 61
    33e4:	f8 c2       	rjmp	.+1520   	; 0x39d6 <Modebus_receve_finish+0xaec>
				break;
#endif
//#ifndef GAS_PRICES 
//#ifdef TIMER_DISPLAY
			case (MD_Exit): //check 'EXIT' button
	            user_instruction = 0;
    33e6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
				Set_countdown_bank = 0;
    33ea:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
	            display_init(1);
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
				send_Modstr.function = MD_Start_Countdown2;
    33f6:	ea e8       	ldi	r30, 0x8A	; 138
    33f8:	f4 e0       	ldi	r31, 0x04	; 4
    33fa:	86 e0       	ldi	r24, 0x06	; 6
    33fc:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    33fe:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3400:	8d b7       	in	r24, 0x3d	; 61
    3402:	9e b7       	in	r25, 0x3e	; 62
    3404:	85 54       	subi	r24, 0x45	; 69
    3406:	91 09       	sbc	r25, r1
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	9e bf       	out	0x3e, r25	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	8d bf       	out	0x3d, r24	; 61
    3412:	ad b7       	in	r26, 0x3d	; 61
    3414:	be b7       	in	r27, 0x3e	; 62
    3416:	11 96       	adiw	r26, 0x01	; 1
    3418:	85 e4       	ldi	r24, 0x45	; 69
    341a:	01 90       	ld	r0, Z+
    341c:	0d 92       	st	X+, r0
    341e:	8a 95       	dec	r24
    3420:	e1 f7       	brne	.-8      	; 0x341a <Modebus_receve_finish+0x530>
    3422:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
	            break;
    3426:	ed b7       	in	r30, 0x3d	; 61
    3428:	fe b7       	in	r31, 0x3e	; 62
    342a:	eb 5b       	subi	r30, 0xBB	; 187
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	fe bf       	out	0x3e, r31	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	ed bf       	out	0x3d, r30	; 61
    3438:	ce c2       	rjmp	.+1436   	; 0x39d6 <Modebus_receve_finish+0xaec>
//#endif		
#ifdef SCOREBOARD
			case (MD_Read_Display):
				if (Game_on){Status_Byte =1;}
    343a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    343e:	81 11       	cpse	r24, r1
    3440:	81 e0       	ldi	r24, 0x01	; 1
				if (TCCR2B){Status_Byte |=2;}
    3442:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3446:	91 11       	cpse	r25, r1
    3448:	82 60       	ori	r24, 0x02	; 2
				if (user_instruction=='U'){
    344a:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <user_instruction>
    344e:	95 35       	cpi	r25, 0x55	; 85
    3450:	11 f4       	brne	.+4      	; 0x3456 <Modebus_receve_finish+0x56c>
					Status_Byte |=0b10000000;
    3452:	80 68       	ori	r24, 0x80	; 128
    3454:	0b c0       	rjmp	.+22     	; 0x346c <Modebus_receve_finish+0x582>
					}else if (user_instruction=='A'){
    3456:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <user_instruction>
    345a:	91 34       	cpi	r25, 0x41	; 65
    345c:	11 f4       	brne	.+4      	; 0x3462 <Modebus_receve_finish+0x578>
					Status_Byte |=0b01000000;
    345e:	80 64       	ori	r24, 0x40	; 64
    3460:	05 c0       	rjmp	.+10     	; 0x346c <Modebus_receve_finish+0x582>
					}else if (user_instruction=='B'){
    3462:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <user_instruction>
    3466:	92 34       	cpi	r25, 0x42	; 66
    3468:	09 f4       	brne	.+2      	; 0x346c <Modebus_receve_finish+0x582>
					Status_Byte |=0b00100000;
    346a:	80 62       	ori	r24, 0x20	; 32
				}
				send_Modstr.data[0]=timer[0];
    346c:	a6 e7       	ldi	r26, 0x76	; 118
    346e:	b4 e0       	ldi	r27, 0x04	; 4
    3470:	9c 91       	ld	r25, X
    3472:	ea e8       	ldi	r30, 0x8A	; 138
    3474:	f4 e0       	ldi	r31, 0x04	; 4
    3476:	93 83       	std	Z+3, r25	; 0x03
				send_Modstr.data[1]=timer[1];
    3478:	11 96       	adiw	r26, 0x01	; 1
    347a:	9c 91       	ld	r25, X
    347c:	11 97       	sbiw	r26, 0x01	; 1
    347e:	94 83       	std	Z+4, r25	; 0x04
				send_Modstr.data[2]=timer[2];
    3480:	12 96       	adiw	r26, 0x02	; 2
    3482:	9c 91       	ld	r25, X
    3484:	95 83       	std	Z+5, r25	; 0x05
				send_Modstr.data[3]=Score_home;
    3486:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <Score_home>
    348a:	96 83       	std	Z+6, r25	; 0x06
				send_Modstr.data[4]=Score_guest;
    348c:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <Score_guest>
    3490:	97 83       	std	Z+7, r25	; 0x07
				send_Modstr.data[5]=Status_Byte;
    3492:	80 87       	std	Z+8, r24	; 0x08
				send_Modstr.nb = 6;
    3494:	86 e0       	ldi	r24, 0x06	; 6
    3496:	82 83       	std	Z+2, r24	; 0x02
				send_Modstr.function = MD_Read_Display;
    3498:	80 e2       	ldi	r24, 0x20	; 32
    349a:	81 83       	std	Z+1, r24	; 0x01
				Reply_modbus(send_Modstr);
    349c:	8d b7       	in	r24, 0x3d	; 61
    349e:	9e b7       	in	r25, 0x3e	; 62
    34a0:	85 54       	subi	r24, 0x45	; 69
    34a2:	91 09       	sbc	r25, r1
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	9e bf       	out	0x3e, r25	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	8d bf       	out	0x3d, r24	; 61
    34ae:	ad b7       	in	r26, 0x3d	; 61
    34b0:	be b7       	in	r27, 0x3e	; 62
    34b2:	11 96       	adiw	r26, 0x01	; 1
    34b4:	85 e4       	ldi	r24, 0x45	; 69
    34b6:	01 90       	ld	r0, Z+
    34b8:	0d 92       	st	X+, r0
    34ba:	8a 95       	dec	r24
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <Modebus_receve_finish+0x5cc>
    34be:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    34c2:	ed b7       	in	r30, 0x3d	; 61
    34c4:	fe b7       	in	r31, 0x3e	; 62
    34c6:	eb 5b       	subi	r30, 0xBB	; 187
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	fe bf       	out	0x3e, r31	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	ed bf       	out	0x3d, r30	; 61
    34d4:	80 c2       	rjmp	.+1280   	; 0x39d6 <Modebus_receve_finish+0xaec>
				Reply_modbus(send_Modstr);
				break;
*/

			case (MD_Score1_plus):
				if (Game_on){
    34d6:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    34da:	88 23       	and	r24, r24
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <Modebus_receve_finish+0x5f6>
    34de:	7b c2       	rjmp	.+1270   	; 0x39d6 <Modebus_receve_finish+0xaec>
					Score_home++;
    34e0:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    34e4:	8f 5f       	subi	r24, 0xFF	; 255
    34e6:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					if (Score_home>99){Score_home=0;}
    34ea:	84 36       	cpi	r24, 0x64	; 100
    34ec:	10 f0       	brcs	.+4      	; 0x34f2 <Modebus_receve_finish+0x608>
    34ee:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
					update_score_display();
    34f2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    34f6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score1_plus;
    34fa:	ea e8       	ldi	r30, 0x8A	; 138
    34fc:	f4 e0       	ldi	r31, 0x04	; 4
    34fe:	81 e6       	ldi	r24, 0x61	; 97
    3500:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    3502:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    3504:	8d b7       	in	r24, 0x3d	; 61
    3506:	9e b7       	in	r25, 0x3e	; 62
    3508:	85 54       	subi	r24, 0x45	; 69
    350a:	91 09       	sbc	r25, r1
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	9e bf       	out	0x3e, r25	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	8d bf       	out	0x3d, r24	; 61
    3516:	ad b7       	in	r26, 0x3d	; 61
    3518:	be b7       	in	r27, 0x3e	; 62
    351a:	11 96       	adiw	r26, 0x01	; 1
    351c:	85 e4       	ldi	r24, 0x45	; 69
    351e:	01 90       	ld	r0, Z+
    3520:	0d 92       	st	X+, r0
    3522:	8a 95       	dec	r24
    3524:	e1 f7       	brne	.-8      	; 0x351e <Modebus_receve_finish+0x634>
    3526:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    352a:	ed b7       	in	r30, 0x3d	; 61
    352c:	fe b7       	in	r31, 0x3e	; 62
    352e:	eb 5b       	subi	r30, 0xBB	; 187
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	fe bf       	out	0x3e, r31	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	ed bf       	out	0x3d, r30	; 61
    353c:	4c c2       	rjmp	.+1176   	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Score1_minus):
				if (Game_on){
    353e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    3542:	88 23       	and	r24, r24
    3544:	09 f4       	brne	.+2      	; 0x3548 <Modebus_receve_finish+0x65e>
    3546:	47 c2       	rjmp	.+1166   	; 0x39d6 <Modebus_receve_finish+0xaec>
					Score_home--;
    3548:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    354c:	81 50       	subi	r24, 0x01	; 1
    354e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					if (Score_home>99){Score_home=99;}
    3552:	84 36       	cpi	r24, 0x64	; 100
    3554:	18 f0       	brcs	.+6      	; 0x355c <Modebus_receve_finish+0x672>
    3556:	83 e6       	ldi	r24, 0x63	; 99
    3558:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					update_score_display();
    355c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3560:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score1_minus;
    3564:	ea e8       	ldi	r30, 0x8A	; 138
    3566:	f4 e0       	ldi	r31, 0x04	; 4
    3568:	82 e6       	ldi	r24, 0x62	; 98
    356a:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    356c:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    356e:	8d b7       	in	r24, 0x3d	; 61
    3570:	9e b7       	in	r25, 0x3e	; 62
    3572:	85 54       	subi	r24, 0x45	; 69
    3574:	91 09       	sbc	r25, r1
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	9e bf       	out	0x3e, r25	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	8d bf       	out	0x3d, r24	; 61
    3580:	ad b7       	in	r26, 0x3d	; 61
    3582:	be b7       	in	r27, 0x3e	; 62
    3584:	11 96       	adiw	r26, 0x01	; 1
    3586:	85 e4       	ldi	r24, 0x45	; 69
    3588:	01 90       	ld	r0, Z+
    358a:	0d 92       	st	X+, r0
    358c:	8a 95       	dec	r24
    358e:	e1 f7       	brne	.-8      	; 0x3588 <Modebus_receve_finish+0x69e>
    3590:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3594:	ed b7       	in	r30, 0x3d	; 61
    3596:	fe b7       	in	r31, 0x3e	; 62
    3598:	eb 5b       	subi	r30, 0xBB	; 187
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	fe bf       	out	0x3e, r31	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	ed bf       	out	0x3d, r30	; 61
    35a6:	17 c2       	rjmp	.+1070   	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Score2_plus):
				if (Game_on){
    35a8:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    35ac:	88 23       	and	r24, r24
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <Modebus_receve_finish+0x6c8>
    35b0:	12 c2       	rjmp	.+1060   	; 0x39d6 <Modebus_receve_finish+0xaec>
					Score_guest++;
    35b2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    35b6:	8f 5f       	subi	r24, 0xFF	; 255
    35b8:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					if (Score_guest>99){Score_guest=0;}
    35bc:	84 36       	cpi	r24, 0x64	; 100
    35be:	10 f0       	brcs	.+4      	; 0x35c4 <Modebus_receve_finish+0x6da>
    35c0:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
					update_score_display();
    35c4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    35c8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score2_plus;
    35cc:	ea e8       	ldi	r30, 0x8A	; 138
    35ce:	f4 e0       	ldi	r31, 0x04	; 4
    35d0:	83 e6       	ldi	r24, 0x63	; 99
    35d2:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    35d4:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    35d6:	8d b7       	in	r24, 0x3d	; 61
    35d8:	9e b7       	in	r25, 0x3e	; 62
    35da:	85 54       	subi	r24, 0x45	; 69
    35dc:	91 09       	sbc	r25, r1
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	9e bf       	out	0x3e, r25	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	8d bf       	out	0x3d, r24	; 61
    35e8:	ad b7       	in	r26, 0x3d	; 61
    35ea:	be b7       	in	r27, 0x3e	; 62
    35ec:	11 96       	adiw	r26, 0x01	; 1
    35ee:	85 e4       	ldi	r24, 0x45	; 69
    35f0:	01 90       	ld	r0, Z+
    35f2:	0d 92       	st	X+, r0
    35f4:	8a 95       	dec	r24
    35f6:	e1 f7       	brne	.-8      	; 0x35f0 <Modebus_receve_finish+0x706>
    35f8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    35fc:	ed b7       	in	r30, 0x3d	; 61
    35fe:	fe b7       	in	r31, 0x3e	; 62
    3600:	eb 5b       	subi	r30, 0xBB	; 187
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	fe bf       	out	0x3e, r31	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	ed bf       	out	0x3d, r30	; 61
    360e:	e3 c1       	rjmp	.+966    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Score2_minus):
				if (Game_on){
    3610:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    3614:	88 23       	and	r24, r24
    3616:	09 f4       	brne	.+2      	; 0x361a <Modebus_receve_finish+0x730>
    3618:	de c1       	rjmp	.+956    	; 0x39d6 <Modebus_receve_finish+0xaec>
					Score_guest--;
    361a:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    361e:	81 50       	subi	r24, 0x01	; 1
    3620:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					if (Score_guest>99){Score_guest=99;}
    3624:	84 36       	cpi	r24, 0x64	; 100
    3626:	18 f0       	brcs	.+6      	; 0x362e <Modebus_receve_finish+0x744>
    3628:	83 e6       	ldi	r24, 0x63	; 99
    362a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					update_score_display();
    362e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3632:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Score2_minus;
    3636:	ea e8       	ldi	r30, 0x8A	; 138
    3638:	f4 e0       	ldi	r31, 0x04	; 4
    363a:	84 e6       	ldi	r24, 0x64	; 100
    363c:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    363e:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    3640:	8d b7       	in	r24, 0x3d	; 61
    3642:	9e b7       	in	r25, 0x3e	; 62
    3644:	85 54       	subi	r24, 0x45	; 69
    3646:	91 09       	sbc	r25, r1
    3648:	0f b6       	in	r0, 0x3f	; 63
    364a:	f8 94       	cli
    364c:	9e bf       	out	0x3e, r25	; 62
    364e:	0f be       	out	0x3f, r0	; 63
    3650:	8d bf       	out	0x3d, r24	; 61
    3652:	ad b7       	in	r26, 0x3d	; 61
    3654:	be b7       	in	r27, 0x3e	; 62
    3656:	11 96       	adiw	r26, 0x01	; 1
    3658:	85 e4       	ldi	r24, 0x45	; 69
    365a:	01 90       	ld	r0, Z+
    365c:	0d 92       	st	X+, r0
    365e:	8a 95       	dec	r24
    3660:	e1 f7       	brne	.-8      	; 0x365a <Modebus_receve_finish+0x770>
    3662:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3666:	ed b7       	in	r30, 0x3d	; 61
    3668:	fe b7       	in	r31, 0x3e	; 62
    366a:	eb 5b       	subi	r30, 0xBB	; 187
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	fe bf       	out	0x3e, r31	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	ed bf       	out	0x3d, r30	; 61
    3678:	ae c1       	rjmp	.+860    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_Set_Score):
				if (Game_on){
    367a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    367e:	88 23       	and	r24, r24
    3680:	09 f4       	brne	.+2      	; 0x3684 <Modebus_receve_finish+0x79a>
    3682:	a9 c1       	rjmp	.+850    	; 0x39d6 <Modebus_receve_finish+0xaec>
					Score_home = Read_Modstr.data[0];
    3684:	e5 ed       	ldi	r30, 0xD5	; 213
    3686:	f4 e0       	ldi	r31, 0x04	; 4
    3688:	83 81       	ldd	r24, Z+3	; 0x03
    368a:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
					Score_guest = Read_Modstr.data[1];
    368e:	84 81       	ldd	r24, Z+4	; 0x04
    3690:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
					update_score_display();
    3694:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					timer_display();
    3698:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Set_Score;
    369c:	ea e8       	ldi	r30, 0x8A	; 138
    369e:	f4 e0       	ldi	r31, 0x04	; 4
    36a0:	81 e2       	ldi	r24, 0x21	; 33
    36a2:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    36a4:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    36a6:	8d b7       	in	r24, 0x3d	; 61
    36a8:	9e b7       	in	r25, 0x3e	; 62
    36aa:	85 54       	subi	r24, 0x45	; 69
    36ac:	91 09       	sbc	r25, r1
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	9e bf       	out	0x3e, r25	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	8d bf       	out	0x3d, r24	; 61
    36b8:	ad b7       	in	r26, 0x3d	; 61
    36ba:	be b7       	in	r27, 0x3e	; 62
    36bc:	11 96       	adiw	r26, 0x01	; 1
    36be:	85 e4       	ldi	r24, 0x45	; 69
    36c0:	01 90       	ld	r0, Z+
    36c2:	0d 92       	st	X+, r0
    36c4:	8a 95       	dec	r24
    36c6:	e1 f7       	brne	.-8      	; 0x36c0 <Modebus_receve_finish+0x7d6>
    36c8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    36cc:	ed b7       	in	r30, 0x3d	; 61
    36ce:	fe b7       	in	r31, 0x3e	; 62
    36d0:	eb 5b       	subi	r30, 0xBB	; 187
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	fe bf       	out	0x3e, r31	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	ed bf       	out	0x3d, r30	; 61
    36de:	7b c1       	rjmp	.+758    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}				
				break;
			case (MD_TF1_plus):
				if (Game_on){
    36e0:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    36e4:	88 23       	and	r24, r24
    36e6:	09 f4       	brne	.+2      	; 0x36ea <Modebus_receve_finish+0x800>
    36e8:	76 c1       	rjmp	.+748    	; 0x39d6 <Modebus_receve_finish+0xaec>
					display_out_buf[8]++;
    36ea:	ef e7       	ldi	r30, 0x7F	; 127
    36ec:	f4 e0       	ldi	r31, 0x04	; 4
    36ee:	80 85       	ldd	r24, Z+8	; 0x08
    36f0:	8f 5f       	subi	r24, 0xFF	; 255
    36f2:	80 87       	std	Z+8, r24	; 0x08
					if (display_out_buf[8]>9){display_out_buf[8]=0;}
    36f4:	8a 30       	cpi	r24, 0x0A	; 10
    36f6:	10 f0       	brcs	.+4      	; 0x36fc <Modebus_receve_finish+0x812>
    36f8:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <display_out_buf+0x8>
					Display_Out();
    36fc:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
					send_Modstr.function = MD_TF1_plus;
    3700:	ea e8       	ldi	r30, 0x8A	; 138
    3702:	f4 e0       	ldi	r31, 0x04	; 4
    3704:	85 e6       	ldi	r24, 0x65	; 101
    3706:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    3708:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    370a:	8d b7       	in	r24, 0x3d	; 61
    370c:	9e b7       	in	r25, 0x3e	; 62
    370e:	85 54       	subi	r24, 0x45	; 69
    3710:	91 09       	sbc	r25, r1
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	9e bf       	out	0x3e, r25	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	8d bf       	out	0x3d, r24	; 61
    371c:	ad b7       	in	r26, 0x3d	; 61
    371e:	be b7       	in	r27, 0x3e	; 62
    3720:	11 96       	adiw	r26, 0x01	; 1
    3722:	85 e4       	ldi	r24, 0x45	; 69
    3724:	01 90       	ld	r0, Z+
    3726:	0d 92       	st	X+, r0
    3728:	8a 95       	dec	r24
    372a:	e1 f7       	brne	.-8      	; 0x3724 <Modebus_receve_finish+0x83a>
    372c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3730:	ed b7       	in	r30, 0x3d	; 61
    3732:	fe b7       	in	r31, 0x3e	; 62
    3734:	eb 5b       	subi	r30, 0xBB	; 187
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	fe bf       	out	0x3e, r31	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	ed bf       	out	0x3d, r30	; 61
    3742:	49 c1       	rjmp	.+658    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;
			case (MD_TF2_plus):
				if (Game_on){
    3744:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    3748:	88 23       	and	r24, r24
    374a:	09 f4       	brne	.+2      	; 0x374e <Modebus_receve_finish+0x864>
    374c:	44 c1       	rjmp	.+648    	; 0x39d6 <Modebus_receve_finish+0xaec>
					display_out_buf[9]++;
    374e:	ef e7       	ldi	r30, 0x7F	; 127
    3750:	f4 e0       	ldi	r31, 0x04	; 4
    3752:	81 85       	ldd	r24, Z+9	; 0x09
    3754:	8f 5f       	subi	r24, 0xFF	; 255
    3756:	81 87       	std	Z+9, r24	; 0x09
					if (display_out_buf[9]>9){display_out_buf[9]=0;}
    3758:	8a 30       	cpi	r24, 0x0A	; 10
    375a:	10 f0       	brcs	.+4      	; 0x3760 <Modebus_receve_finish+0x876>
    375c:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <display_out_buf+0x9>
					Display_Out();
    3760:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
					send_Modstr.function = MD_TF2_plus;
    3764:	ea e8       	ldi	r30, 0x8A	; 138
    3766:	f4 e0       	ldi	r31, 0x04	; 4
    3768:	86 e6       	ldi	r24, 0x66	; 102
    376a:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    376c:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    376e:	8d b7       	in	r24, 0x3d	; 61
    3770:	9e b7       	in	r25, 0x3e	; 62
    3772:	85 54       	subi	r24, 0x45	; 69
    3774:	91 09       	sbc	r25, r1
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	9e bf       	out	0x3e, r25	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	8d bf       	out	0x3d, r24	; 61
    3780:	ad b7       	in	r26, 0x3d	; 61
    3782:	be b7       	in	r27, 0x3e	; 62
    3784:	11 96       	adiw	r26, 0x01	; 1
    3786:	85 e4       	ldi	r24, 0x45	; 69
    3788:	01 90       	ld	r0, Z+
    378a:	0d 92       	st	X+, r0
    378c:	8a 95       	dec	r24
    378e:	e1 f7       	brne	.-8      	; 0x3788 <Modebus_receve_finish+0x89e>
    3790:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3794:	ed b7       	in	r30, 0x3d	; 61
    3796:	fe b7       	in	r31, 0x3e	; 62
    3798:	eb 5b       	subi	r30, 0xBB	; 187
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	fe bf       	out	0x3e, r31	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	ed bf       	out	0x3d, r30	; 61
    37a6:	17 c1       	rjmp	.+558    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;				
			case (MD_period_plus):
				if (Game_on){
    37a8:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    37ac:	88 23       	and	r24, r24
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <Modebus_receve_finish+0x8c8>
    37b0:	12 c1       	rjmp	.+548    	; 0x39d6 <Modebus_receve_finish+0xaec>
					display_out_buf[10]++;
    37b2:	ef e7       	ldi	r30, 0x7F	; 127
    37b4:	f4 e0       	ldi	r31, 0x04	; 4
    37b6:	82 85       	ldd	r24, Z+10	; 0x0a
    37b8:	8f 5f       	subi	r24, 0xFF	; 255
    37ba:	82 87       	std	Z+10, r24	; 0x0a
					if (display_out_buf[10]>9){display_out_buf[10]=0;}
    37bc:	8a 30       	cpi	r24, 0x0A	; 10
    37be:	10 f0       	brcs	.+4      	; 0x37c4 <Modebus_receve_finish+0x8da>
    37c0:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <display_out_buf+0xa>
					Display_Out();
    37c4:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
					send_Modstr.function = MD_period_plus;
    37c8:	ea e8       	ldi	r30, 0x8A	; 138
    37ca:	f4 e0       	ldi	r31, 0x04	; 4
    37cc:	87 e6       	ldi	r24, 0x67	; 103
    37ce:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    37d0:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    37d2:	8d b7       	in	r24, 0x3d	; 61
    37d4:	9e b7       	in	r25, 0x3e	; 62
    37d6:	85 54       	subi	r24, 0x45	; 69
    37d8:	91 09       	sbc	r25, r1
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	9e bf       	out	0x3e, r25	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	8d bf       	out	0x3d, r24	; 61
    37e4:	ad b7       	in	r26, 0x3d	; 61
    37e6:	be b7       	in	r27, 0x3e	; 62
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	85 e4       	ldi	r24, 0x45	; 69
    37ec:	01 90       	ld	r0, Z+
    37ee:	0d 92       	st	X+, r0
    37f0:	8a 95       	dec	r24
    37f2:	e1 f7       	brne	.-8      	; 0x37ec <Modebus_receve_finish+0x902>
    37f4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    37f8:	ed b7       	in	r30, 0x3d	; 61
    37fa:	fe b7       	in	r31, 0x3e	; 62
    37fc:	eb 5b       	subi	r30, 0xBB	; 187
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	fe bf       	out	0x3e, r31	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	ed bf       	out	0x3d, r30	; 61
    380a:	e5 c0       	rjmp	.+458    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;					
			case (MD_Change_Timer):
				if (Game_on){
    380c:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    3810:	88 23       	and	r24, r24
    3812:	09 f4       	brne	.+2      	; 0x3816 <Modebus_receve_finish+0x92c>
    3814:	e0 c0       	rjmp	.+448    	; 0x39d6 <Modebus_receve_finish+0xaec>
					timer[0]=Read_Modstr.data[0];
    3816:	a5 ed       	ldi	r26, 0xD5	; 213
    3818:	b4 e0       	ldi	r27, 0x04	; 4
    381a:	13 96       	adiw	r26, 0x03	; 3
    381c:	8c 91       	ld	r24, X
    381e:	13 97       	sbiw	r26, 0x03	; 3
    3820:	e6 e7       	ldi	r30, 0x76	; 118
    3822:	f4 e0       	ldi	r31, 0x04	; 4
    3824:	80 83       	st	Z, r24
					timer[1]=Read_Modstr.data[1];
    3826:	14 96       	adiw	r26, 0x04	; 4
    3828:	8c 91       	ld	r24, X
    382a:	14 97       	sbiw	r26, 0x04	; 4
    382c:	81 83       	std	Z+1, r24	; 0x01
					timer[2]=Read_Modstr.data[2];
    382e:	15 96       	adiw	r26, 0x05	; 5
    3830:	8c 91       	ld	r24, X
    3832:	82 83       	std	Z+2, r24	; 0x02
					TCNT2 = 0;
    3834:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
					timer_display();
    3838:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
					send_Modstr.function = MD_Change_Timer;
    383c:	ea e8       	ldi	r30, 0x8A	; 138
    383e:	f4 e0       	ldi	r31, 0x04	; 4
    3840:	84 e2       	ldi	r24, 0x24	; 36
    3842:	81 83       	std	Z+1, r24	; 0x01
					send_Modstr.data[0]=0;
    3844:	13 82       	std	Z+3, r1	; 0x03
					Reply_modbus(send_Modstr);
    3846:	8d b7       	in	r24, 0x3d	; 61
    3848:	9e b7       	in	r25, 0x3e	; 62
    384a:	85 54       	subi	r24, 0x45	; 69
    384c:	91 09       	sbc	r25, r1
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	9e bf       	out	0x3e, r25	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	8d bf       	out	0x3d, r24	; 61
    3858:	ad b7       	in	r26, 0x3d	; 61
    385a:	be b7       	in	r27, 0x3e	; 62
    385c:	11 96       	adiw	r26, 0x01	; 1
    385e:	85 e4       	ldi	r24, 0x45	; 69
    3860:	01 90       	ld	r0, Z+
    3862:	0d 92       	st	X+, r0
    3864:	8a 95       	dec	r24
    3866:	e1 f7       	brne	.-8      	; 0x3860 <Modebus_receve_finish+0x976>
    3868:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    386c:	ed b7       	in	r30, 0x3d	; 61
    386e:	fe b7       	in	r31, 0x3e	; 62
    3870:	eb 5b       	subi	r30, 0xBB	; 187
    3872:	ff 4f       	sbci	r31, 0xFF	; 255
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	fe bf       	out	0x3e, r31	; 62
    387a:	0f be       	out	0x3f, r0	; 63
    387c:	ed bf       	out	0x3d, r30	; 61
    387e:	ab c0       	rjmp	.+342    	; 0x39d6 <Modebus_receve_finish+0xaec>
				}
				break;
#endif
			case (MD_Read_F_Menu):
				i=0;
				cli();
    3880:	f8 94       	cli
					Reply_modbus(send_Modstr);
				}
				break;
#endif
			case (MD_Read_F_Menu):
				i=0;
    3882:	10 e0       	ldi	r17, 0x00	; 0
				cli();
				while(i<sizeof(F_eep)){
    3884:	0d c0       	rjmp	.+26     	; 0x38a0 <Modebus_receve_finish+0x9b6>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)F_eep + i);
    3886:	c1 2f       	mov	r28, r17
    3888:	01 2e       	mov	r0, r17
    388a:	00 0c       	add	r0, r0
    388c:	dd 0b       	sbc	r29, r29
    388e:	ce 01       	movw	r24, r28
    3890:	80 50       	subi	r24, 0x00	; 0
    3892:	90 40       	sbci	r25, 0x00	; 0
    3894:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    3898:	c6 57       	subi	r28, 0x76	; 118
    389a:	db 4f       	sbci	r29, 0xFB	; 251
    389c:	8b 83       	std	Y+3, r24	; 0x03
					i++;
    389e:	1f 5f       	subi	r17, 0xFF	; 255
				break;
#endif
			case (MD_Read_F_Menu):
				i=0;
				cli();
				while(i<sizeof(F_eep)){
    38a0:	18 30       	cpi	r17, 0x08	; 8
    38a2:	88 f3       	brcs	.-30     	; 0x3886 <Modebus_receve_finish+0x99c>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)F_eep + i);
					i++;
				}
				sei();
    38a4:	78 94       	sei
				send_Modstr.nb = sizeof(F_eep);
    38a6:	ea e8       	ldi	r30, 0x8A	; 138
    38a8:	f4 e0       	ldi	r31, 0x04	; 4
    38aa:	88 e0       	ldi	r24, 0x08	; 8
    38ac:	82 83       	std	Z+2, r24	; 0x02
				send_Modstr.function = MD_Read_F_Menu;
    38ae:	85 e2       	ldi	r24, 0x25	; 37
    38b0:	81 83       	std	Z+1, r24	; 0x01
				Reply_modbus(send_Modstr);
    38b2:	8d b7       	in	r24, 0x3d	; 61
    38b4:	9e b7       	in	r25, 0x3e	; 62
    38b6:	85 54       	subi	r24, 0x45	; 69
    38b8:	91 09       	sbc	r25, r1
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	9e bf       	out	0x3e, r25	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	8d bf       	out	0x3d, r24	; 61
    38c4:	ad b7       	in	r26, 0x3d	; 61
    38c6:	be b7       	in	r27, 0x3e	; 62
    38c8:	11 96       	adiw	r26, 0x01	; 1
    38ca:	85 e4       	ldi	r24, 0x45	; 69
    38cc:	01 90       	ld	r0, Z+
    38ce:	0d 92       	st	X+, r0
    38d0:	8a 95       	dec	r24
    38d2:	e1 f7       	brne	.-8      	; 0x38cc <Modebus_receve_finish+0x9e2>
    38d4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    38d8:	ed b7       	in	r30, 0x3d	; 61
    38da:	fe b7       	in	r31, 0x3e	; 62
    38dc:	eb 5b       	subi	r30, 0xBB	; 187
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	fe bf       	out	0x3e, r31	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	ed bf       	out	0x3d, r30	; 61
    38ea:	75 c0       	rjmp	.+234    	; 0x39d6 <Modebus_receve_finish+0xaec>
//#if defined (FAV_eep)
			case (MD_Read_Fav_Menu):
				i=0;
				cli();
    38ec:	f8 94       	cli
				send_Modstr.function = MD_Read_F_Menu;
				Reply_modbus(send_Modstr);
				break;
//#if defined (FAV_eep)
			case (MD_Read_Fav_Menu):
				i=0;
    38ee:	10 e0       	ldi	r17, 0x00	; 0
				cli();
				while(i<sizeof(FAV_eep)){
    38f0:	0d c0       	rjmp	.+26     	; 0x390c <Modebus_receve_finish+0xa22>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)FAV_eep + i);
    38f2:	c1 2f       	mov	r28, r17
    38f4:	01 2e       	mov	r0, r17
    38f6:	00 0c       	add	r0, r0
    38f8:	dd 0b       	sbc	r29, r29
    38fa:	ce 01       	movw	r24, r28
    38fc:	88 5f       	subi	r24, 0xF8	; 248
    38fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3900:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    3904:	c6 57       	subi	r28, 0x76	; 118
    3906:	db 4f       	sbci	r29, 0xFB	; 251
    3908:	8b 83       	std	Y+3, r24	; 0x03
					i++;
    390a:	1f 5f       	subi	r17, 0xFF	; 255
				break;
//#if defined (FAV_eep)
			case (MD_Read_Fav_Menu):
				i=0;
				cli();
				while(i<sizeof(FAV_eep)){
    390c:	18 30       	cpi	r17, 0x08	; 8
    390e:	88 f3       	brcs	.-30     	; 0x38f2 <Modebus_receve_finish+0xa08>
					send_Modstr.data[i] = eeprom_read_byte((uint8_t*)FAV_eep + i);
					i++;
				}
				sei();
    3910:	78 94       	sei
				send_Modstr.nb = sizeof(FAV_eep);
    3912:	ea e8       	ldi	r30, 0x8A	; 138
    3914:	f4 e0       	ldi	r31, 0x04	; 4
    3916:	88 e0       	ldi	r24, 0x08	; 8
    3918:	82 83       	std	Z+2, r24	; 0x02
				send_Modstr.function = MD_Read_Fav_Menu;
    391a:	86 e2       	ldi	r24, 0x26	; 38
    391c:	81 83       	std	Z+1, r24	; 0x01
				Reply_modbus(send_Modstr);
    391e:	8d b7       	in	r24, 0x3d	; 61
    3920:	9e b7       	in	r25, 0x3e	; 62
    3922:	85 54       	subi	r24, 0x45	; 69
    3924:	91 09       	sbc	r25, r1
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	9e bf       	out	0x3e, r25	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	8d bf       	out	0x3d, r24	; 61
    3930:	ad b7       	in	r26, 0x3d	; 61
    3932:	be b7       	in	r27, 0x3e	; 62
    3934:	11 96       	adiw	r26, 0x01	; 1
    3936:	85 e4       	ldi	r24, 0x45	; 69
    3938:	01 90       	ld	r0, Z+
    393a:	0d 92       	st	X+, r0
    393c:	8a 95       	dec	r24
    393e:	e1 f7       	brne	.-8      	; 0x3938 <Modebus_receve_finish+0xa4e>
    3940:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    3944:	ed b7       	in	r30, 0x3d	; 61
    3946:	fe b7       	in	r31, 0x3e	; 62
    3948:	eb 5b       	subi	r30, 0xBB	; 187
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	f8 94       	cli
    3950:	fe bf       	out	0x3e, r31	; 62
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	ed bf       	out	0x3d, r30	; 61
    3956:	3f c0       	rjmp	.+126    	; 0x39d6 <Modebus_receve_finish+0xaec>
//#endif
			case (MD_Set_F_Menu):
				i=0;
				cli();
    3958:	f8 94       	cli
				send_Modstr.function = MD_Read_Fav_Menu;
				Reply_modbus(send_Modstr);
				break;
//#endif
			case (MD_Set_F_Menu):
				i=0;
    395a:	c0 e0       	ldi	r28, 0x00	; 0
				cli();
				while(i<sizeof(F_eep)){
    395c:	0d c0       	rjmp	.+26     	; 0x3978 <Modebus_receve_finish+0xa8e>
					eeprom_write_byte ((uint8_t*) F_eep + i, Read_Modstr.data[i]);
    395e:	8c 2f       	mov	r24, r28
    3960:	0c 2e       	mov	r0, r28
    3962:	00 0c       	add	r0, r0
    3964:	99 0b       	sbc	r25, r25
    3966:	fc 01       	movw	r30, r24
    3968:	eb 52       	subi	r30, 0x2B	; 43
    396a:	fb 4f       	sbci	r31, 0xFB	; 251
    396c:	63 81       	ldd	r22, Z+3	; 0x03
    396e:	80 50       	subi	r24, 0x00	; 0
    3970:	90 40       	sbci	r25, 0x00	; 0
    3972:	0e 94 21 28 	call	0x5042	; 0x5042 <eeprom_write_byte>
					i++;
    3976:	cf 5f       	subi	r28, 0xFF	; 255
				break;
//#endif
			case (MD_Set_F_Menu):
				i=0;
				cli();
				while(i<sizeof(F_eep)){
    3978:	c8 30       	cpi	r28, 0x08	; 8
    397a:	88 f3       	brcs	.-30     	; 0x395e <Modebus_receve_finish+0xa74>
					eeprom_write_byte ((uint8_t*) F_eep + i, Read_Modstr.data[i]);
					i++;
				}
				sei();
    397c:	78 94       	sei
				send_Modstr.function = MD_Set_F_Menu;
    397e:	ea e8       	ldi	r30, 0x8A	; 138
    3980:	f4 e0       	ldi	r31, 0x04	; 4
    3982:	87 e2       	ldi	r24, 0x27	; 39
    3984:	81 83       	std	Z+1, r24	; 0x01
				send_Modstr.data[0]=0;
    3986:	13 82       	std	Z+3, r1	; 0x03
				Reply_modbus(send_Modstr);
    3988:	8d b7       	in	r24, 0x3d	; 61
    398a:	9e b7       	in	r25, 0x3e	; 62
    398c:	85 54       	subi	r24, 0x45	; 69
    398e:	91 09       	sbc	r25, r1
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	9e bf       	out	0x3e, r25	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	8d bf       	out	0x3d, r24	; 61
    399a:	ad b7       	in	r26, 0x3d	; 61
    399c:	be b7       	in	r27, 0x3e	; 62
    399e:	11 96       	adiw	r26, 0x01	; 1
    39a0:	85 e4       	ldi	r24, 0x45	; 69
    39a2:	01 90       	ld	r0, Z+
    39a4:	0d 92       	st	X+, r0
    39a6:	8a 95       	dec	r24
    39a8:	e1 f7       	brne	.-8      	; 0x39a2 <Modebus_receve_finish+0xab8>
    39aa:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
				break;
    39ae:	ed b7       	in	r30, 0x3d	; 61
    39b0:	fe b7       	in	r31, 0x3e	; 62
    39b2:	eb 5b       	subi	r30, 0xBB	; 187
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	fe bf       	out	0x3e, r31	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	ed bf       	out	0x3d, r30	; 61
    39c0:	0a c0       	rjmp	.+20     	; 0x39d6 <Modebus_receve_finish+0xaec>
				Reply_modbus(send_Modstr);
				Gas_Prices_Refresh();
				break;
#endif
			case (MD_Buzzer_sound):
				Buzzer(1,8600);
    39c2:	68 e9       	ldi	r22, 0x98	; 152
    39c4:	71 e2       	ldi	r23, 0x21	; 33
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
				Speaker_delay_open=Read_Modstr.data[0];
    39ce:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <Read_Modstr+0x3>
    39d2:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Speaker_delay_open>
				break;
		}
	}else{
		//answer for wrong CRC
	}
}
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	1f 91       	pop	r17
    39dc:	08 95       	ret

000039de <Check_receive_modbus>:
	Read_Modstr.data[0]=0;
	TCCR4B = 0;
}

extern void Check_receive_modbus()
{
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
	uint16_t c = uart0_getc();
    39e4:	0e 94 1c 08 	call	0x1038	; 0x1038 <uart0_getc>
    39e8:	ec 01       	movw	r28, r24
	uint8_t c_byte = c &0xff;
	uint8_t error_c = (c >> 8);
	if (!error_c)
    39ea:	d1 11       	cpse	r29, r1
    39ec:	5f c0       	rjmp	.+190    	; 0x3aac <Check_receive_modbus+0xce>
	{		
		switch (Modbus_intex)
    39ee:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <Modbus_intex>
    39f2:	81 30       	cpi	r24, 0x01	; 1
    39f4:	e1 f0       	breq	.+56     	; 0x3a2e <Check_receive_modbus+0x50>
    39f6:	30 f0       	brcs	.+12     	; 0x3a04 <Check_receive_modbus+0x26>
    39f8:	82 30       	cpi	r24, 0x02	; 2
    39fa:	41 f1       	breq	.+80     	; 0x3a4c <Check_receive_modbus+0x6e>
    39fc:	83 30       	cpi	r24, 0x03	; 3
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <Check_receive_modbus+0x24>
    3a00:	45 c0       	rjmp	.+138    	; 0x3a8c <Check_receive_modbus+0xae>
    3a02:	75 c0       	rjmp	.+234    	; 0x3aee <Check_receive_modbus+0x110>
		{
			case (0): // first incoming byte = address
			//uart1_putc((uint8_t)(c & 0x00ff));
				cli();
    3a04:	f8 94       	cli
				if (c_byte==Broadcast_address || c_byte == eeprom_read_byte((uint8_t*)Slave_address))
    3a06:	cc 23       	and	r28, r28
    3a08:	31 f0       	breq	.+12     	; 0x3a16 <Check_receive_modbus+0x38>
    3a0a:	8c e1       	ldi	r24, 0x1C	; 28
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    3a12:	c8 13       	cpse	r28, r24
    3a14:	0a c0       	rjmp	.+20     	; 0x3a2a <Check_receive_modbus+0x4c>
				{
					Modbus_intex =1;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
					Read_Modstr.address = c_byte;
    3a1c:	c0 93 d5 04 	sts	0x04D5, r28	; 0x8004d5 <Read_Modstr>
					Put_CRC(c_byte);					
    3a20:	8c 2f       	mov	r24, r28
    3a22:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
					Modbus_data_store = 0;
    3a26:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Modbus_data_store>
					//break;
				}
				sei();
    3a2a:	78 94       	sei
				break;
    3a2c:	60 c0       	rjmp	.+192    	; 0x3aee <Check_receive_modbus+0x110>
			case (1): // second incoming byte = function		
				Put_CRC(c_byte);
    3a2e:	8c 2f       	mov	r24, r28
    3a30:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
				Read_Modstr.function = c_byte;
    3a34:	e5 ed       	ldi	r30, 0xD5	; 213
    3a36:	f4 e0       	ldi	r31, 0x04	; 4
    3a38:	c1 83       	std	Z+1, r28	; 0x01
				Modbus_data_count = Check_MDdata_Length(Read_Modstr.function);
    3a3a:	81 81       	ldd	r24, Z+1	; 0x01
    3a3c:	0e 94 87 03 	call	0x70e	; 0x70e <Check_MDdata_Length>
    3a40:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Modbus_data_count>
				Modbus_intex =2;
    3a44:	82 e0       	ldi	r24, 0x02	; 2
    3a46:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
				break;
    3a4a:	51 c0       	rjmp	.+162    	; 0x3aee <Check_receive_modbus+0x110>
			case (2): // First CRC incoming byte = function		
				if (Modbus_data_count)
    3a4c:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <Modbus_data_count>
    3a50:	88 23       	and	r24, r24
    3a52:	99 f0       	breq	.+38     	; 0x3a7a <Check_receive_modbus+0x9c>
				{
					Read_Modstr.data[Modbus_data_store++]=c_byte;
    3a54:	e0 91 18 04 	lds	r30, 0x0418	; 0x800418 <Modbus_data_store>
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	8e 0f       	add	r24, r30
    3a5c:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <Modbus_data_store>
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	eb 52       	subi	r30, 0x2B	; 43
    3a64:	fb 4f       	sbci	r31, 0xFB	; 251
    3a66:	c3 83       	std	Z+3, r28	; 0x03
					Put_CRC(c_byte);
    3a68:	8c 2f       	mov	r24, r28
    3a6a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Put_CRC>
					Modbus_data_count--;
    3a6e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <Modbus_data_count>
    3a72:	81 50       	subi	r24, 0x01	; 1
    3a74:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <Modbus_data_count>
    3a78:	3a c0       	rjmp	.+116    	; 0x3aee <Check_receive_modbus+0x110>
    3a7a:	dd 27       	eor	r29, r29
					//Modbus_intex=2;
					//break;
				}else{
					Read_Modstr.CRC = c_byte;
    3a7c:	d0 93 19 05 	sts	0x0519, r29	; 0x800519 <Read_Modstr+0x44>
    3a80:	c0 93 18 05 	sts	0x0518, r28	; 0x800518 <Read_Modstr+0x43>
					Modbus_intex=3;
    3a84:	83 e0       	ldi	r24, 0x03	; 3
    3a86:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
    3a8a:	31 c0       	rjmp	.+98     	; 0x3aee <Check_receive_modbus+0x110>
					
				}
				break;
			case (3): // second CRC incoming byte = function
				Read_Modstr.CRC += c_byte<<8;
    3a8c:	e8 e1       	ldi	r30, 0x18	; 24
    3a8e:	f5 e0       	ldi	r31, 0x05	; 5
    3a90:	80 81       	ld	r24, Z
    3a92:	91 81       	ldd	r25, Z+1	; 0x01
    3a94:	dc 2f       	mov	r29, r28
    3a96:	cc 27       	eor	r28, r28
    3a98:	c8 0f       	add	r28, r24
    3a9a:	d9 1f       	adc	r29, r25
    3a9c:	d1 83       	std	Z+1, r29	; 0x01
    3a9e:	c0 83       	st	Z, r28
				Modbus_intex=0xff;
    3aa0:	8f ef       	ldi	r24, 0xFF	; 255
    3aa2:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Modbus_intex>
				Modebus_receve_finish();
    3aa6:	0e 94 75 17 	call	0x2eea	; 0x2eea <Modebus_receve_finish>
				break;
    3aaa:	21 c0       	rjmp	.+66     	; 0x3aee <Check_receive_modbus+0x110>
		}
	}else{
		send_Modstr.function = MD_Communication_Error;
    3aac:	ea e8       	ldi	r30, 0x8A	; 138
    3aae:	f4 e0       	ldi	r31, 0x04	; 4
    3ab0:	80 ef       	ldi	r24, 0xF0	; 240
    3ab2:	81 83       	std	Z+1, r24	; 0x01
		send_Modstr.data[0]=0;
    3ab4:	13 82       	std	Z+3, r1	; 0x03
		Reply_modbus(send_Modstr);
    3ab6:	8d b7       	in	r24, 0x3d	; 61
    3ab8:	9e b7       	in	r25, 0x3e	; 62
    3aba:	85 54       	subi	r24, 0x45	; 69
    3abc:	91 09       	sbc	r25, r1
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	f8 94       	cli
    3ac2:	9e bf       	out	0x3e, r25	; 62
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	8d bf       	out	0x3d, r24	; 61
    3ac8:	ad b7       	in	r26, 0x3d	; 61
    3aca:	be b7       	in	r27, 0x3e	; 62
    3acc:	11 96       	adiw	r26, 0x01	; 1
    3ace:	85 e4       	ldi	r24, 0x45	; 69
    3ad0:	01 90       	ld	r0, Z+
    3ad2:	0d 92       	st	X+, r0
    3ad4:	8a 95       	dec	r24
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <Check_receive_modbus+0xf2>
    3ad8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <Reply_modbus>
    3adc:	8d b7       	in	r24, 0x3d	; 61
    3ade:	9e b7       	in	r25, 0x3e	; 62
    3ae0:	8b 5b       	subi	r24, 0xBB	; 187
    3ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	9e bf       	out	0x3e, r25	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	8d bf       	out	0x3d, r24	; 61
	}
	Reset_Modbus_Timeout();
    3aee:	0e 94 4c 03 	call	0x698	; 0x698 <Reset_Modbus_Timeout>
}
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	08 95       	ret

00003afa <__vector_20>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    3afa:	1f 92       	push	r1
    3afc:	0f 92       	push	r0
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	0f 92       	push	r0
    3b02:	11 24       	eor	r1, r1
    3b04:	2f 93       	push	r18
    3b06:	3f 93       	push	r19
    3b08:	4f 93       	push	r20
    3b0a:	5f 93       	push	r21
    3b0c:	6f 93       	push	r22
    3b0e:	7f 93       	push	r23
    3b10:	8f 93       	push	r24
    3b12:	9f 93       	push	r25
    3b14:	af 93       	push	r26
    3b16:	bf 93       	push	r27
    3b18:	cf 93       	push	r28
    3b1a:	ef 93       	push	r30
    3b1c:	ff 93       	push	r31
    /* read UART status register and UART data register */
#if defined(AVR1_USART0)
    usr  = USART0_RXDATAH;
    data = USART0.RXDATAL;
#else
    usr  = UART0_STATUS;
    3b1e:	c0 91 c0 00 	lds	r28, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
    3b22:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
#if defined(AT90_UART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
#elif defined(ATMEGA_USART0)
    lastRxError = (usr & (_BV(FE)|_BV(DOR)));
    3b26:	c8 71       	andi	r28, 0x18	; 24
#elif defined (AVR1_USART0)
    lastRxError = (usr & (USART_BUFOVF_bm | USART_FERR_bm | USART_PERR_bm));
#endif

    /* calculate buffer index */
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    3b28:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <UART_RxHead>
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	01 96       	adiw	r24, 0x01	; 1
    3b30:	8f 77       	andi	r24, 0x7F	; 127
    3b32:	99 27       	eor	r25, r25

    if (tmphead == UART_RxTail) {
    3b34:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <UART_RxTail>
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	82 17       	cp	r24, r18
    3b3c:	93 07       	cpc	r25, r19
    3b3e:	49 f0       	breq	.+18     	; 0x3b52 <__vector_20+0x58>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    3b40:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    3b44:	fc 01       	movw	r30, r24
    3b46:	e8 56       	subi	r30, 0x68	; 104
    3b48:	fd 4f       	sbci	r31, 0xFD	; 253
    3b4a:	40 83       	st	Z, r20
#if defined(MODBUS)
		Check_receive_modbus();
    3b4c:	0e 94 ef 1c 	call	0x39de	; 0x39de <Check_receive_modbus>
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <__vector_20+0x5a>
    /* calculate buffer index */
    tmphead = (UART_RxHead + 1) & UART_RX0_BUFFER_MASK;

    if (tmphead == UART_RxTail) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    3b52:	c2 e0       	ldi	r28, 0x02	; 2
#if defined(MODBUS)
		Check_receive_modbus();
#endif		
		
    }
    UART_LastRxError = lastRxError;
    3b54:	c0 93 93 02 	sts	0x0293, r28	; 0x800293 <UART_LastRxError>
}
    3b58:	ff 91       	pop	r31
    3b5a:	ef 91       	pop	r30
    3b5c:	cf 91       	pop	r28
    3b5e:	bf 91       	pop	r27
    3b60:	af 91       	pop	r26
    3b62:	9f 91       	pop	r25
    3b64:	8f 91       	pop	r24
    3b66:	7f 91       	pop	r23
    3b68:	6f 91       	pop	r22
    3b6a:	5f 91       	pop	r21
    3b6c:	4f 91       	pop	r20
    3b6e:	3f 91       	pop	r19
    3b70:	2f 91       	pop	r18
    3b72:	0f 90       	pop	r0
    3b74:	0f be       	out	0x3f, r0	; 63
    3b76:	0f 90       	pop	r0
    3b78:	1f 90       	pop	r1
    3b7a:	18 95       	reti

00003b7c <Change_Timer>:
	shift=0;
	Clock_blink=0;
	Menu_blink_on=0;
}

void Change_Timer(){
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
		uint8_t Timer_val=TCCR2B;
    3b80:	e1 eb       	ldi	r30, 0xB1	; 177
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	c0 81       	ld	r28, Z
		TCCR2B =0;
    3b86:	10 82       	st	Z, r1
		Change_timer_on=1;
    3b88:	d1 e0       	ldi	r29, 0x01	; 1
    3b8a:	d0 93 1c 04 	sts	0x041C, r29	; 0x80041c <Change_timer_on>
		set_clock_buf[0]= ( timer[0]&0xf0)>>4;
    3b8e:	a6 e7       	ldi	r26, 0x76	; 118
    3b90:	b4 e0       	ldi	r27, 0x04	; 4
    3b92:	8c 91       	ld	r24, X
    3b94:	98 2f       	mov	r25, r24
    3b96:	92 95       	swap	r25
    3b98:	9f 70       	andi	r25, 0x0F	; 15
    3b9a:	e9 e7       	ldi	r30, 0x79	; 121
    3b9c:	f4 e0       	ldi	r31, 0x04	; 4
    3b9e:	90 83       	st	Z, r25
		set_clock_buf[1]= ( timer[0]&0x0f);  //adding dot
    3ba0:	8f 70       	andi	r24, 0x0F	; 15
    3ba2:	81 83       	std	Z+1, r24	; 0x01
		set_clock_buf[2]= (( timer[1]&0xf0)>>4);  //adding dot;
    3ba4:	11 96       	adiw	r26, 0x01	; 1
    3ba6:	8c 91       	ld	r24, X
    3ba8:	11 97       	sbiw	r26, 0x01	; 1
    3baa:	98 2f       	mov	r25, r24
    3bac:	92 95       	swap	r25
    3bae:	9f 70       	andi	r25, 0x0F	; 15
    3bb0:	92 83       	std	Z+2, r25	; 0x02
		set_clock_buf[3]= ( timer[1]&0x0f);
    3bb2:	8f 70       	andi	r24, 0x0F	; 15
    3bb4:	83 83       	std	Z+3, r24	; 0x03
		set_clock_buf[4]= (( timer[2]&0xf0)>>4);
    3bb6:	12 96       	adiw	r26, 0x02	; 2
    3bb8:	8c 91       	ld	r24, X
    3bba:	98 2f       	mov	r25, r24
    3bbc:	92 95       	swap	r25
    3bbe:	9f 70       	andi	r25, 0x0F	; 15
    3bc0:	94 83       	std	Z+4, r25	; 0x04
		set_clock_buf[5]= ( timer[2]&0x0f);
    3bc2:	8f 70       	andi	r24, 0x0F	; 15
    3bc4:	85 83       	std	Z+5, r24	; 0x05
		Display_set_clock();
    3bc6:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
		cursor=0;Menu_blink_on=1;
    3bca:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
    3bce:	d0 93 1f 04 	sts	0x041F, r29	; 0x80041f <Menu_blink_on>
		while(key!=ok && key!=exit_button)
    3bd2:	99 c0       	rjmp	.+306    	; 0x3d06 <Change_Timer+0x18a>
		{
			if(key>=0 && key<10)
    3bd4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3bd8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3bdc:	99 23       	and	r25, r25
    3bde:	d4 f1       	brlt	.+116    	; 0x3c54 <Change_Timer+0xd8>
    3be0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3be4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3be8:	0a 97       	sbiw	r24, 0x0a	; 10
    3bea:	a4 f5       	brge	.+104    	; 0x3c54 <Change_Timer+0xd8>
			{
				set_clock_buf[cursor]= key;
    3bec:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    3bf0:	0e 2e       	mov	r0, r30
    3bf2:	00 0c       	add	r0, r0
    3bf4:	ff 0b       	sbc	r31, r31
    3bf6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3bfa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3bfe:	e7 58       	subi	r30, 0x87	; 135
    3c00:	fb 4f       	sbci	r31, 0xFB	; 251
    3c02:	80 83       	st	Z, r24
				if (cursor==1 || cursor==2 || cursor==3 )
    3c04:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c08:	81 30       	cpi	r24, 0x01	; 1
    3c0a:	41 f0       	breq	.+16     	; 0x3c1c <Change_Timer+0xa0>
    3c0c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c10:	82 30       	cpi	r24, 0x02	; 2
    3c12:	21 f0       	breq	.+8      	; 0x3c1c <Change_Timer+0xa0>
    3c14:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c18:	83 30       	cpi	r24, 0x03	; 3
    3c1a:	51 f4       	brne	.+20     	; 0x3c30 <Change_Timer+0xb4>
				{
					set_clock_buf[cursor]|=0x80;
    3c1c:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <cursor>
    3c20:	0e 2e       	mov	r0, r30
    3c22:	00 0c       	add	r0, r0
    3c24:	ff 0b       	sbc	r31, r31
    3c26:	e7 58       	subi	r30, 0x87	; 135
    3c28:	fb 4f       	sbci	r31, 0xFB	; 251
    3c2a:	80 81       	ld	r24, Z
    3c2c:	80 68       	ori	r24, 0x80	; 128
    3c2e:	80 83       	st	Z, r24
				}
				key=-1;
    3c30:	8f ef       	ldi	r24, 0xFF	; 255
    3c32:	9f ef       	ldi	r25, 0xFF	; 255
    3c34:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3c38:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				if(cursor<sizeof(set_clock_buf)-1){cursor++;}
    3c3c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c40:	85 30       	cpi	r24, 0x05	; 5
    3c42:	28 f4       	brcc	.+10     	; 0x3c4e <Change_Timer+0xd2>
    3c44:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c48:	8f 5f       	subi	r24, 0xFF	; 255
    3c4a:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
				Display_set_clock();
    3c4e:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
    3c52:	59 c0       	rjmp	.+178    	; 0x3d06 <Change_Timer+0x18a>
			}
			else if (key==left)		//check for left <-
    3c54:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3c58:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3c5c:	45 97       	sbiw	r24, 0x15	; 21
    3c5e:	99 f4       	brne	.+38     	; 0x3c86 <Change_Timer+0x10a>
			{
				if(cursor!=0)
    3c60:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c64:	88 23       	and	r24, r24
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <Change_Timer+0xee>
    3c68:	4e c0       	rjmp	.+156    	; 0x3d06 <Change_Timer+0x18a>
				{
					cursor--;
    3c6a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c6e:	81 50       	subi	r24, 0x01	; 1
    3c70:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
					Display_set_clock();
    3c74:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
					key=-1;
    3c78:	8f ef       	ldi	r24, 0xFF	; 255
    3c7a:	9f ef       	ldi	r25, 0xFF	; 255
    3c7c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3c80:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3c84:	40 c0       	rjmp	.+128    	; 0x3d06 <Change_Timer+0x18a>
				}
			}
			else if (key==right)		//check for right ->
    3c86:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3c8a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3c8e:	46 97       	sbiw	r24, 0x16	; 22
    3c90:	91 f4       	brne	.+36     	; 0x3cb6 <Change_Timer+0x13a>
			{
				if(cursor<sizeof(set_clock_buf)-1)
    3c92:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c96:	85 30       	cpi	r24, 0x05	; 5
    3c98:	b0 f5       	brcc	.+108    	; 0x3d06 <Change_Timer+0x18a>
				{
					cursor++;
    3c9a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <cursor>
    3c9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ca0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <cursor>
					Display_set_clock();
    3ca4:	0e 94 b6 0b 	call	0x176c	; 0x176c <Display_set_clock>
					key=-1;
    3ca8:	8f ef       	ldi	r24, 0xFF	; 255
    3caa:	9f ef       	ldi	r25, 0xFF	; 255
    3cac:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3cb0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3cb4:	28 c0       	rjmp	.+80     	; 0x3d06 <Change_Timer+0x18a>
				}
				
			}
			else if (key==ok)
    3cb6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3cba:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3cbe:	47 97       	sbiw	r24, 0x17	; 23
    3cc0:	11 f5       	brne	.+68     	; 0x3d06 <Change_Timer+0x18a>
			{
				int8_t byte_get;
				byte_get=(set_clock_buf[0] & 0x0f)<<4;
    3cc2:	e9 e7       	ldi	r30, 0x79	; 121
    3cc4:	f4 e0       	ldi	r31, 0x04	; 4
    3cc6:	80 81       	ld	r24, Z
    3cc8:	20 e1       	ldi	r18, 0x10	; 16
    3cca:	82 9f       	mul	r24, r18
    3ccc:	c0 01       	movw	r24, r0
    3cce:	11 24       	eor	r1, r1
				byte_get=byte_get | (set_clock_buf[1] & 0x0f);
    3cd0:	91 81       	ldd	r25, Z+1	; 0x01
    3cd2:	9f 70       	andi	r25, 0x0F	; 15
    3cd4:	89 2b       	or	r24, r25
				timer[0] = byte_get;
    3cd6:	a6 e7       	ldi	r26, 0x76	; 118
    3cd8:	b4 e0       	ldi	r27, 0x04	; 4
    3cda:	8c 93       	st	X, r24
				byte_get=(set_clock_buf[2] & 0x0f)<<4;
    3cdc:	82 81       	ldd	r24, Z+2	; 0x02
    3cde:	20 e1       	ldi	r18, 0x10	; 16
    3ce0:	82 9f       	mul	r24, r18
    3ce2:	c0 01       	movw	r24, r0
    3ce4:	11 24       	eor	r1, r1
				byte_get=byte_get | (set_clock_buf[3] & 0x0f);
    3ce6:	93 81       	ldd	r25, Z+3	; 0x03
    3ce8:	9f 70       	andi	r25, 0x0F	; 15
    3cea:	89 2b       	or	r24, r25
				timer[1] = byte_get;
    3cec:	11 96       	adiw	r26, 0x01	; 1
    3cee:	8c 93       	st	X, r24
    3cf0:	11 97       	sbiw	r26, 0x01	; 1
				byte_get=(set_clock_buf[4] & 0x0f)<<4;
    3cf2:	84 81       	ldd	r24, Z+4	; 0x04
    3cf4:	20 e1       	ldi	r18, 0x10	; 16
    3cf6:	82 9f       	mul	r24, r18
    3cf8:	c0 01       	movw	r24, r0
    3cfa:	11 24       	eor	r1, r1
				byte_get=byte_get | (set_clock_buf[5] & 0x0f);
    3cfc:	95 81       	ldd	r25, Z+5	; 0x05
    3cfe:	9f 70       	andi	r25, 0x0F	; 15
    3d00:	89 2b       	or	r24, r25
				timer[2] = byte_get;
    3d02:	12 96       	adiw	r26, 0x02	; 2
    3d04:	8c 93       	st	X, r24
		set_clock_buf[3]= ( timer[1]&0x0f);
		set_clock_buf[4]= (( timer[2]&0xf0)>>4);
		set_clock_buf[5]= ( timer[2]&0x0f);
		Display_set_clock();
		cursor=0;Menu_blink_on=1;
		while(key!=ok && key!=exit_button)
    3d06:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3d0a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3d0e:	47 97       	sbiw	r24, 0x17	; 23
    3d10:	39 f0       	breq	.+14     	; 0x3d20 <Change_Timer+0x1a4>
    3d12:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3d16:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3d1a:	8f 97       	sbiw	r24, 0x2f	; 47
    3d1c:	09 f0       	breq	.+2      	; 0x3d20 <Change_Timer+0x1a4>
    3d1e:	5a cf       	rjmp	.-332    	; 0x3bd4 <Change_Timer+0x58>
				byte_get=(set_clock_buf[4] & 0x0f)<<4;
				byte_get=byte_get | (set_clock_buf[5] & 0x0f);
				timer[2] = byte_get;
			}
		}
		cursor=0;
    3d20:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <cursor>
		shift=0;
    3d24:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <shift>
		Clock_blink=0;
    3d28:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <Clock_blink>
		Menu_blink_on=0;
    3d2c:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <Menu_blink_on>
		TCCR2B=Timer_val;
    3d30:	c0 93 b1 00 	sts	0x00B1, r28	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		update_score_display();
    3d34:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
		timer_display();		
    3d38:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
		if (key==ok)	{
    3d3c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    3d40:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    3d44:	47 97       	sbiw	r24, 0x17	; 23
    3d46:	99 f4       	brne	.+38     	; 0x3d6e <Change_Timer+0x1f2>
			Buzzer(1,8600);
    3d48:	68 e9       	ldi	r22, 0x98	; 152
    3d4a:	71 e2       	ldi	r23, 0x21	; 33
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    3d52:	8f ef       	ldi	r24, 0xFF	; 255
    3d54:	92 e5       	ldi	r25, 0x52	; 82
    3d56:	27 e0       	ldi	r18, 0x07	; 7
    3d58:	81 50       	subi	r24, 0x01	; 1
    3d5a:	90 40       	sbci	r25, 0x00	; 0
    3d5c:	20 40       	sbci	r18, 0x00	; 0
    3d5e:	e1 f7       	brne	.-8      	; 0x3d58 <Change_Timer+0x1dc>
    3d60:	00 c0       	rjmp	.+0      	; 0x3d62 <Change_Timer+0x1e6>
    3d62:	00 00       	nop
			_delay_ms(300);
			Buzzer(0,0);
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	70 e0       	ldi	r23, 0x00	; 0
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}		
		key=-1;
    3d6e:	8f ef       	ldi	r24, 0xFF	; 255
    3d70:	9f ef       	ldi	r25, 0xFF	; 255
    3d72:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3d76:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
		Change_timer_on=0;
    3d7a:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <Change_timer_on>
}
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	08 95       	ret

00003d84 <remote_instruction>:
		display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
	}
	
}

void remote_instruction(void) {
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	00 d0       	rcall	.+0      	; 0x3d8c <remote_instruction+0x8>
    3d8c:	cd b7       	in	r28, 0x3d	; 61
    3d8e:	de b7       	in	r29, 0x3e	; 62
    uint16_t command;
    /* Poll for new RC5 command */
    if (RC5_NewCommandReceived( & command)) {
    3d90:	ce 01       	movw	r24, r28
    3d92:	01 96       	adiw	r24, 0x01	; 1
    3d94:	0e 94 3e 03 	call	0x67c	; 0x67c <RC5_NewCommandReceived>
    3d98:	88 23       	and	r24, r24
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <remote_instruction+0x1a>
    3d9c:	d7 c1       	rjmp	.+942    	; 0x414c <remote_instruction+0x3c8>
        /* Reset RC5 lib so the next command
         * can be decoded. This is a must! */
        RC5_Reset();
    3d9e:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
        /* Toggle the LED on PB5 */
        PORTE ^= RED_LED;
    3da2:	9e b1       	in	r25, 0x0e	; 14
    3da4:	84 e0       	ldi	r24, 0x04	; 4
    3da6:	89 27       	eor	r24, r25
    3da8:	8e b9       	out	0x0e, r24	; 14
        /* Do something with the command 
        Perhaps validate the start bits and output
        it via UART... */
        if (RC5_GetStartBits(command) != 3) {
    3daa:	29 81       	ldd	r18, Y+1	; 0x01
    3dac:	3a 81       	ldd	r19, Y+2	; 0x02
            /* ERROR */
        }
        uint8_t cmdaddress = RC5_GetAddressBits(command);
    3dae:	c9 01       	movw	r24, r18
    3db0:	80 7c       	andi	r24, 0xC0	; 192
    3db2:	97 70       	andi	r25, 0x07	; 7
    3db4:	00 24       	eor	r0, r0
    3db6:	88 0f       	add	r24, r24
    3db8:	99 1f       	adc	r25, r25
    3dba:	00 1c       	adc	r0, r0
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	00 1c       	adc	r0, r0
    3dc2:	89 2f       	mov	r24, r25
    3dc4:	90 2d       	mov	r25, r0
        uint8_t cmdnum = RC5_GetCommandBits(command);
    3dc6:	12 2f       	mov	r17, r18
    3dc8:	1f 73       	andi	r17, 0x3F	; 63
        uint8_t toggle = RC5_GetToggleBit(command);
    3dca:	22 27       	eor	r18, r18
    3dcc:	38 70       	andi	r19, 0x08	; 8
    3dce:	93 2f       	mov	r25, r19
    3dd0:	96 95       	lsr	r25
    3dd2:	96 95       	lsr	r25
    3dd4:	96 95       	lsr	r25
		//display_out_buf[5]= cmdaddress;
        if (previews_togle != toggle && cmdaddress == 0 || previews_togle != toggle && cmdaddress == 3) {
    3dd6:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <previews_togle>
    3dda:	04 2e       	mov	r0, r20
    3ddc:	00 0c       	add	r0, r0
    3dde:	55 0b       	sbc	r21, r21
    3de0:	29 2f       	mov	r18, r25
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	42 17       	cp	r20, r18
    3de6:	53 07       	cpc	r21, r19
    3de8:	11 f0       	breq	.+4      	; 0x3dee <remote_instruction+0x6a>
    3dea:	88 23       	and	r24, r24
    3dec:	61 f0       	breq	.+24     	; 0x3e06 <remote_instruction+0x82>
    3dee:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <previews_togle>
    3df2:	04 2e       	mov	r0, r20
    3df4:	00 0c       	add	r0, r0
    3df6:	55 0b       	sbc	r21, r21
    3df8:	24 17       	cp	r18, r20
    3dfa:	35 07       	cpc	r19, r21
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <remote_instruction+0x7c>
    3dfe:	2e c1       	rjmp	.+604    	; 0x405c <remote_instruction+0x2d8>
    3e00:	83 30       	cpi	r24, 0x03	; 3
    3e02:	09 f0       	breq	.+2      	; 0x3e06 <remote_instruction+0x82>
    3e04:	2b c1       	rjmp	.+598    	; 0x405c <remote_instruction+0x2d8>
            previews_togle = toggle;
    3e06:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <previews_togle>
            key = cmdnum;
    3e0a:	81 2f       	mov	r24, r17
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e12:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
            switch (cmdnum) {
    3e16:	81 2f       	mov	r24, r17
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	3a 97       	sbiw	r30, 0x0a	; 10
    3e1e:	e5 33       	cpi	r30, 0x35	; 53
    3e20:	f1 05       	cpc	r31, r1
    3e22:	08 f0       	brcs	.+2      	; 0x3e26 <remote_instruction+0xa2>
    3e24:	89 c1       	rjmp	.+786    	; 0x4138 <remote_instruction+0x3b4>
    3e26:	e3 5f       	subi	r30, 0xF3	; 243
    3e28:	fe 4f       	sbci	r31, 0xFE	; 254
    3e2a:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__tablejump2__>
				case  (forward):
					Score_home=0;Score_guest=0;
    3e2e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
    3e32:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
					display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
    3e36:	ef e7       	ldi	r30, 0x7F	; 127
    3e38:	f4 e0       	ldi	r31, 0x04	; 4
    3e3a:	10 86       	std	Z+8, r1	; 0x08
    3e3c:	11 86       	std	Z+9, r1	; 0x09
    3e3e:	12 86       	std	Z+10, r1	; 0x0a
					update_score_display();
    3e40:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
					key = -1;
    3e44:	8f ef       	ldi	r24, 0xFF	; 255
    3e46:	9f ef       	ldi	r25, 0xFF	; 255
    3e48:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e4c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;
    3e50:	73 c1       	rjmp	.+742    	; 0x4138 <remote_instruction+0x3b4>
				case  (countdown_timer1):
				if (user_instruction != 'A' && user_instruction != 'a') {
    3e52:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e56:	81 34       	cpi	r24, 0x41	; 65
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <remote_instruction+0xd8>
    3e5a:	6e c1       	rjmp	.+732    	; 0x4138 <remote_instruction+0x3b4>
    3e5c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e60:	81 36       	cpi	r24, 0x61	; 97
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <remote_instruction+0xe2>
    3e64:	69 c1       	rjmp	.+722    	; 0x4138 <remote_instruction+0x3b4>
					user_instruction = 'A'; // This means Counter down 1
    3e66:	81 e4       	ldi	r24, 0x41	; 65
    3e68:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
    3e6e:	9f ef       	ldi	r25, 0xFF	; 255
    3e70:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e74:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3e78:	5f c1       	rjmp	.+702    	; 0x4138 <remote_instruction+0x3b4>
				}
				break;
				case  (countdown_timer2):
				if (user_instruction != 'B' && user_instruction != 'b') {
    3e7a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e7e:	82 34       	cpi	r24, 0x42	; 66
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <remote_instruction+0x100>
    3e82:	5a c1       	rjmp	.+692    	; 0x4138 <remote_instruction+0x3b4>
    3e84:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3e88:	82 36       	cpi	r24, 0x62	; 98
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <remote_instruction+0x10a>
    3e8c:	55 c1       	rjmp	.+682    	; 0x4138 <remote_instruction+0x3b4>
					user_instruction = 'B'; // This means Counter down 1
    3e8e:	82 e4       	ldi	r24, 0x42	; 66
    3e90:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    3e94:	8f ef       	ldi	r24, 0xFF	; 255
    3e96:	9f ef       	ldi	r25, 0xFF	; 255
    3e98:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3e9c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3ea0:	4b c1       	rjmp	.+662    	; 0x4138 <remote_instruction+0x3b4>
				}
				break;
				case  (up_timer):
					if (user_instruction != 'U' && user_instruction != 'u') {
    3ea2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ea6:	85 35       	cpi	r24, 0x55	; 85
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <remote_instruction+0x128>
    3eaa:	46 c1       	rjmp	.+652    	; 0x4138 <remote_instruction+0x3b4>
    3eac:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3eb0:	85 37       	cpi	r24, 0x75	; 117
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <remote_instruction+0x132>
    3eb4:	41 c1       	rjmp	.+642    	; 0x4138 <remote_instruction+0x3b4>
					    user_instruction = 'U'; // This means Up counter
    3eb6:	85 e5       	ldi	r24, 0x55	; 85
    3eb8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					    key = -1;
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	9f ef       	ldi	r25, 0xFF	; 255
    3ec0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3ec4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3ec8:	37 c1       	rjmp	.+622    	; 0x4138 <remote_instruction+0x3b4>
					}
					break;
				case (info): //button [INFO]
					if (user_instruction != 'S' && user_instruction != 's') {
    3eca:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ece:	83 35       	cpi	r24, 0x53	; 83
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <remote_instruction+0x150>
    3ed2:	32 c1       	rjmp	.+612    	; 0x4138 <remote_instruction+0x3b4>
    3ed4:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ed8:	83 37       	cpi	r24, 0x73	; 115
    3eda:	09 f4       	brne	.+2      	; 0x3ede <remote_instruction+0x15a>
    3edc:	2d c1       	rjmp	.+602    	; 0x4138 <remote_instruction+0x3b4>
					    user_instruction = 'S'; // This means Set cklock
    3ede:	83 e5       	ldi	r24, 0x53	; 83
    3ee0:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					    key = -1;
    3ee4:	8f ef       	ldi	r24, 0xFF	; 255
    3ee6:	9f ef       	ldi	r25, 0xFF	; 255
    3ee8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3eec:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3ef0:	23 c1       	rjmp	.+582    	; 0x4138 <remote_instruction+0x3b4>
					}
					break;
	            case (nettv):
	                if (user_instruction != 'D' && user_instruction != 'd') {
    3ef2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ef6:	84 34       	cpi	r24, 0x44	; 68
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <remote_instruction+0x178>
    3efa:	1e c1       	rjmp	.+572    	; 0x4138 <remote_instruction+0x3b4>
    3efc:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f00:	84 36       	cpi	r24, 0x64	; 100
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <remote_instruction+0x182>
    3f04:	19 c1       	rjmp	.+562    	; 0x4138 <remote_instruction+0x3b4>
	                    user_instruction = 'D'; // This means set date
    3f06:	84 e4       	ldi	r24, 0x44	; 68
    3f08:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	                    key = -1;
    3f0c:	8f ef       	ldi	r24, 0xFF	; 255
    3f0e:	9f ef       	ldi	r25, 0xFF	; 255
    3f10:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f14:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f18:	0f c1       	rjmp	.+542    	; 0x4138 <remote_instruction+0x3b4>
	                }
	                break;
	            case (source):
	                if (user_instruction != 'F' && user_instruction != 'f') {
    3f1a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f1e:	86 34       	cpi	r24, 0x46	; 70
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <remote_instruction+0x1a0>
    3f22:	0a c1       	rjmp	.+532    	; 0x4138 <remote_instruction+0x3b4>
    3f24:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f28:	86 36       	cpi	r24, 0x66	; 102
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <remote_instruction+0x1aa>
    3f2c:	05 c1       	rjmp	.+522    	; 0x4138 <remote_instruction+0x3b4>
	                    user_instruction = 'F'; // This means set F menu 
    3f2e:	86 e4       	ldi	r24, 0x46	; 70
    3f30:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	                    key = -1;
    3f34:	8f ef       	ldi	r24, 0xFF	; 255
    3f36:	9f ef       	ldi	r25, 0xFF	; 255
    3f38:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f3c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f40:	fb c0       	rjmp	.+502    	; 0x4138 <remote_instruction+0x3b4>
	                }
	                break;
				case (fav):
	                if (user_instruction != 'E' && user_instruction != 'e') {
    3f42:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f46:	85 34       	cpi	r24, 0x45	; 69
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <remote_instruction+0x1c8>
    3f4a:	f6 c0       	rjmp	.+492    	; 0x4138 <remote_instruction+0x3b4>
    3f4c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f50:	85 36       	cpi	r24, 0x65	; 101
    3f52:	09 f4       	brne	.+2      	; 0x3f56 <remote_instruction+0x1d2>
    3f54:	f1 c0       	rjmp	.+482    	; 0x4138 <remote_instruction+0x3b4>
	                    user_instruction = 'E'; // This means set F menu 
    3f56:	85 e4       	ldi	r24, 0x45	; 69
    3f58:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
	                    key = -1;
    3f5c:	8f ef       	ldi	r24, 0xFF	; 255
    3f5e:	9f ef       	ldi	r25, 0xFF	; 255
    3f60:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f64:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f68:	e7 c0       	rjmp	.+462    	; 0x4138 <remote_instruction+0x3b4>
	                }
	                break;
				case (countdown_set):
	                if (user_instruction != 'C' && user_instruction != 'c') {
    3f6a:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f6e:	83 34       	cpi	r24, 0x43	; 67
    3f70:	89 f0       	breq	.+34     	; 0x3f94 <remote_instruction+0x210>
    3f72:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f76:	83 36       	cpi	r24, 0x63	; 99
    3f78:	69 f0       	breq	.+26     	; 0x3f94 <remote_instruction+0x210>
	                    user_instruction = 'C'; // This means Counter down menu 1
    3f7a:	83 e4       	ldi	r24, 0x43	; 67
    3f7c:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
						Set_countdown_bank = 1;
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3f86:	8f ef       	ldi	r24, 0xFF	; 255
    3f88:	9f ef       	ldi	r25, 0xFF	; 255
    3f8a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3f8e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3f92:	d2 c0       	rjmp	.+420    	; 0x4138 <remote_instruction+0x3b4>
	                }else if (user_instruction == 'C' || user_instruction == 'c')
    3f94:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3f98:	83 34       	cpi	r24, 0x43	; 67
    3f9a:	29 f0       	breq	.+10     	; 0x3fa6 <remote_instruction+0x222>
    3f9c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3fa0:	83 36       	cpi	r24, 0x63	; 99
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <remote_instruction+0x222>
    3fa4:	c9 c0       	rjmp	.+402    	; 0x4138 <remote_instruction+0x3b4>
	                {
						user_instruction = 0;	// This means Counter down menu 2
    3fa6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
						Set_countdown_bank = 2; //Set this =2 to recall the function with bank2
    3faa:	82 e0       	ldi	r24, 0x02	; 2
    3fac:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3fb0:	8f ef       	ldi	r24, 0xFF	; 255
    3fb2:	9f ef       	ldi	r25, 0xFF	; 255
    3fb4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3fb8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3fbc:	bd c0       	rjmp	.+378    	; 0x4138 <remote_instruction+0x3b4>
	                }
	                break;
				case (countdown_alarm_set):
	                if (user_instruction != 'C' && user_instruction != 'c' && Set_countdown_bank != 3) {
    3fbe:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3fc2:	83 34       	cpi	r24, 0x43	; 67
    3fc4:	a9 f0       	breq	.+42     	; 0x3ff0 <remote_instruction+0x26c>
    3fc6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3fca:	83 36       	cpi	r24, 0x63	; 99
    3fcc:	89 f0       	breq	.+34     	; 0x3ff0 <remote_instruction+0x26c>
    3fce:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    3fd2:	83 30       	cpi	r24, 0x03	; 3
    3fd4:	69 f0       	breq	.+26     	; 0x3ff0 <remote_instruction+0x26c>
	                    user_instruction = 'C'; // This means Counter down menu 1
    3fd6:	83 e4       	ldi	r24, 0x43	; 67
    3fd8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
						Set_countdown_bank = 3; // Means Set countown alarm 1
    3fdc:	83 e0       	ldi	r24, 0x03	; 3
    3fde:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    3fe2:	8f ef       	ldi	r24, 0xFF	; 255
    3fe4:	9f ef       	ldi	r25, 0xFF	; 255
    3fe6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    3fea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    3fee:	a4 c0       	rjmp	.+328    	; 0x4138 <remote_instruction+0x3b4>
	                }else if (user_instruction == 'c' && Set_countdown_bank == 3)
    3ff0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    3ff4:	83 36       	cpi	r24, 0x63	; 99
    3ff6:	09 f0       	breq	.+2      	; 0x3ffa <remote_instruction+0x276>
    3ff8:	9f c0       	rjmp	.+318    	; 0x4138 <remote_instruction+0x3b4>
    3ffa:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    3ffe:	83 30       	cpi	r24, 0x03	; 3
    4000:	09 f0       	breq	.+2      	; 0x4004 <remote_instruction+0x280>
    4002:	9a c0       	rjmp	.+308    	; 0x4138 <remote_instruction+0x3b4>
	                {
						user_instruction = 0;	// This means Counter down menu 2
    4004:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
						Set_countdown_bank = 4; //Set this =2 to recall the function with bank2
    4008:	84 e0       	ldi	r24, 0x04	; 4
    400a:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <Set_countdown_bank>
	                    key = -1;
    400e:	8f ef       	ldi	r24, 0xFF	; 255
    4010:	9f ef       	ldi	r25, 0xFF	; 255
    4012:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    4016:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    401a:	8e c0       	rjmp	.+284    	; 0x4138 <remote_instruction+0x3b4>
	                }
	                break;
	            case (exit_button): //check 'EXIT' button	                
	                if (!Change_timer_on){	  
    401c:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <Change_timer_on>
    4020:	81 11       	cpse	r24, r1
    4022:	8a c0       	rjmp	.+276    	; 0x4138 <remote_instruction+0x3b4>
						user_instruction = 0;
    4024:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
						Set_countdown_bank = 0;             
    4028:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
						display_init(1);
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
    4032:	82 c0       	rjmp	.+260    	; 0x4138 <remote_instruction+0x3b4>
					}
	                break;
				case (Shift_source): //unstruction to show brightness
					if (user_instruction != 'O' && user_instruction != 'O') {
    4034:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    4038:	8f 34       	cpi	r24, 0x4F	; 79
    403a:	09 f4       	brne	.+2      	; 0x403e <remote_instruction+0x2ba>
    403c:	7d c0       	rjmp	.+250    	; 0x4138 <remote_instruction+0x3b4>
    403e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    4042:	8f 34       	cpi	r24, 0x4F	; 79
    4044:	09 f4       	brne	.+2      	; 0x4048 <remote_instruction+0x2c4>
    4046:	78 c0       	rjmp	.+240    	; 0x4138 <remote_instruction+0x3b4>
						user_instruction = 'O'; // This means show brightness
    4048:	8f e4       	ldi	r24, 0x4F	; 79
    404a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
						key = -1;
    404e:	8f ef       	ldi	r24, 0xFF	; 255
    4050:	9f ef       	ldi	r25, 0xFF	; 255
    4052:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    4056:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    405a:	6e c0       	rjmp	.+220    	; 0x4138 <remote_instruction+0x3b4>
					}
					break;
			}
		}else if (Game_on){
    405c:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    4060:	88 23       	and	r24, r24
    4062:	09 f4       	brne	.+2      	; 0x4066 <remote_instruction+0x2e2>
    4064:	69 c0       	rjmp	.+210    	; 0x4138 <remote_instruction+0x3b4>
        switch (cmdnum) {
    4066:	81 2f       	mov	r24, r17
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	fc 01       	movw	r30, r24
    406c:	37 97       	sbiw	r30, 0x07	; 7
    406e:	eb 31       	cpi	r30, 0x1B	; 27
    4070:	f1 05       	cpc	r31, r1
    4072:	08 f0       	brcs	.+2      	; 0x4076 <remote_instruction+0x2f2>
    4074:	61 c0       	rjmp	.+194    	; 0x4138 <remote_instruction+0x3b4>
    4076:	ee 5b       	subi	r30, 0xBE	; 190
    4078:	fe 4f       	sbci	r31, 0xFE	; 254
    407a:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__tablejump2__>
			case (V_plus):
				Score_home++;
    407e:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    4082:	8f 5f       	subi	r24, 0xFF	; 255
    4084:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=0;}
    4088:	84 36       	cpi	r24, 0x64	; 100
    408a:	10 f0       	brcs	.+4      	; 0x4090 <remote_instruction+0x30c>
    408c:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
				update_score_display();
    4090:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    4094:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    4098:	4f c0       	rjmp	.+158    	; 0x4138 <remote_instruction+0x3b4>
			case (V_minus):
				Score_home--;
    409a:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    409e:	81 50       	subi	r24, 0x01	; 1
    40a0:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=99;}
    40a4:	84 36       	cpi	r24, 0x64	; 100
    40a6:	18 f0       	brcs	.+6      	; 0x40ae <remote_instruction+0x32a>
    40a8:	83 e6       	ldi	r24, 0x63	; 99
    40aa:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				update_score_display();
    40ae:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    40b2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    40b6:	40 c0       	rjmp	.+128    	; 0x4138 <remote_instruction+0x3b4>
			case (P_plus):
				Score_guest++;
    40b8:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    40bc:	8f 5f       	subi	r24, 0xFF	; 255
    40be:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=0;}
    40c2:	84 36       	cpi	r24, 0x64	; 100
    40c4:	10 f0       	brcs	.+4      	; 0x40ca <remote_instruction+0x346>
    40c6:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
				update_score_display();
    40ca:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    40ce:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    40d2:	32 c0       	rjmp	.+100    	; 0x4138 <remote_instruction+0x3b4>
			case (P_minus):
				Score_guest--;
    40d4:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    40d8:	81 50       	subi	r24, 0x01	; 1
    40da:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=99;}
    40de:	84 36       	cpi	r24, 0x64	; 100
    40e0:	18 f0       	brcs	.+6      	; 0x40e8 <remote_instruction+0x364>
    40e2:	83 e6       	ldi	r24, 0x63	; 99
    40e4:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				update_score_display();
    40e8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				timer_display();
    40ec:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
				break;
    40f0:	23 c0       	rjmp	.+70     	; 0x4138 <remote_instruction+0x3b4>
			case (7): //change TF1
				display_out_buf[8]++;
    40f2:	ef e7       	ldi	r30, 0x7F	; 127
    40f4:	f4 e0       	ldi	r31, 0x04	; 4
    40f6:	80 85       	ldd	r24, Z+8	; 0x08
    40f8:	8f 5f       	subi	r24, 0xFF	; 255
    40fa:	80 87       	std	Z+8, r24	; 0x08
				if (display_out_buf[8]>9){display_out_buf[8]=0;}
    40fc:	8a 30       	cpi	r24, 0x0A	; 10
    40fe:	10 f0       	brcs	.+4      	; 0x4104 <remote_instruction+0x380>
    4100:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <display_out_buf+0x8>
				Display_Out();				
    4104:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				break;
    4108:	17 c0       	rjmp	.+46     	; 0x4138 <remote_instruction+0x3b4>
			case (8): //change TF2
				display_out_buf[9]++;
    410a:	ef e7       	ldi	r30, 0x7F	; 127
    410c:	f4 e0       	ldi	r31, 0x04	; 4
    410e:	81 85       	ldd	r24, Z+9	; 0x09
    4110:	8f 5f       	subi	r24, 0xFF	; 255
    4112:	81 87       	std	Z+9, r24	; 0x09
				if (display_out_buf[9]>9){display_out_buf[9]=0;}
    4114:	8a 30       	cpi	r24, 0x0A	; 10
    4116:	10 f0       	brcs	.+4      	; 0x411c <remote_instruction+0x398>
    4118:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <display_out_buf+0x9>
				Display_Out();
    411c:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				break;
    4120:	0b c0       	rjmp	.+22     	; 0x4138 <remote_instruction+0x3b4>
			case (9): //change period
				display_out_buf[10]++;
    4122:	ef e7       	ldi	r30, 0x7F	; 127
    4124:	f4 e0       	ldi	r31, 0x04	; 4
    4126:	82 85       	ldd	r24, Z+10	; 0x0a
    4128:	8f 5f       	subi	r24, 0xFF	; 255
    412a:	82 87       	std	Z+10, r24	; 0x0a
				if (display_out_buf[10]>9){display_out_buf[10]=0;}
    412c:	8a 30       	cpi	r24, 0x0A	; 10
    412e:	10 f0       	brcs	.+4      	; 0x4134 <remote_instruction+0x3b0>
    4130:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <display_out_buf+0xa>
				Display_Out();
    4134:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
				break;
			}
		}
		
        if (cmdnum==Speaker){
    4138:	1d 30       	cpi	r17, 0x0D	; 13
    413a:	41 f4       	brne	.+16     	; 0x414c <remote_instruction+0x3c8>
			Buzzer(1,8600);
    413c:	68 e9       	ldi	r22, 0x98	; 152
    413e:	71 e2       	ldi	r23, 0x21	; 33
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
			Speaker_delay_open=2;
    4146:	82 e0       	ldi	r24, 0x02	; 2
    4148:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <Speaker_delay_open>
	        //_delay_ms(300);
	        //Buzzer(0,0);
			}

    }
}
    414c:	0f 90       	pop	r0
    414e:	0f 90       	pop	r0
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	1f 91       	pop	r17
    4156:	08 95       	ret

00004158 <__vector_3>:
}

#else

ISR(INT2_vect)
{
    4158:	1f 92       	push	r1
    415a:	0f 92       	push	r0
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	0f 92       	push	r0
    4160:	11 24       	eor	r1, r1
    4162:	2f 93       	push	r18
    4164:	3f 93       	push	r19
    4166:	4f 93       	push	r20
    4168:	5f 93       	push	r21
    416a:	6f 93       	push	r22
    416c:	7f 93       	push	r23
    416e:	8f 93       	push	r24
    4170:	9f 93       	push	r25
    4172:	af 93       	push	r26
    4174:	bf 93       	push	r27
    4176:	cf 93       	push	r28
    4178:	ef 93       	push	r30
    417a:	ff 93       	push	r31
    uint16_t delay = TCNT1;
    417c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    4180:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     *  0 - short space
     *  2 - short pulse
     *  4 - long space
     *  6 - long pulse
     */
    uint8_t event = (PINB & _BV(PINB2)) ? 2 : 0;
    4184:	1a 9b       	sbis	0x03, 2	; 3
    4186:	02 c0       	rjmp	.+4      	; 0x418c <__vector_3+0x34>
    4188:	c2 e0       	ldi	r28, 0x02	; 2
    418a:	01 c0       	rjmp	.+2      	; 0x418e <__vector_3+0x36>
    418c:	c0 e0       	ldi	r28, 0x00	; 0
    
    if(delay > LONG_MIN && delay < LONG_MAX)
    418e:	9c 01       	movw	r18, r24
    4190:	27 53       	subi	r18, 0x37	; 55
    4192:	35 40       	sbci	r19, 0x05	; 5
    4194:	27 37       	cpi	r18, 0x77	; 119
    4196:	33 40       	sbci	r19, 0x03	; 3
    4198:	10 f4       	brcc	.+4      	; 0x419e <__vector_3+0x46>
    {
        event += 4;
    419a:	cc 5f       	subi	r28, 0xFC	; 252
    419c:	07 c0       	rjmp	.+14     	; 0x41ac <__vector_3+0x54>
    }
    else if(delay < SHORT_MIN || delay > SHORT_MAX)
    419e:	8c 5b       	subi	r24, 0xBC	; 188
    41a0:	91 40       	sbci	r25, 0x01	; 1
    41a2:	8a 37       	cpi	r24, 0x7A	; 122
    41a4:	93 40       	sbci	r25, 0x03	; 3
    41a6:	10 f0       	brcs	.+4      	; 0x41ac <__vector_3+0x54>
    {
        /* If delay wasn't long and isn't short then
         * it is erroneous so we need to reset but
         * we don't return from interrupt so we don't
         * loose the edge currently detected. */
        RC5_Reset();
    41a8:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
    }

    if(state == STATE_BEGIN)
    41ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <state>
    41b0:	25 30       	cpi	r18, 0x05	; 5
    41b2:	01 f5       	brne	.+64     	; 0x41f4 <__vector_3+0x9c>
    {
        ccounter--;
    41b4:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <ccounter>
    41b8:	81 50       	subi	r24, 0x01	; 1
    41ba:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <ccounter>
        command |= 1 << ccounter;
    41be:	21 e0       	ldi	r18, 0x01	; 1
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	a9 01       	movw	r20, r18
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <__vector_3+0x72>
    41c6:	44 0f       	add	r20, r20
    41c8:	55 1f       	adc	r21, r21
    41ca:	8a 95       	dec	r24
    41cc:	e2 f7       	brpl	.-8      	; 0x41c6 <__vector_3+0x6e>
    41ce:	ca 01       	movw	r24, r20
    41d0:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <command>
    41d4:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <command+0x1>
    41d8:	82 2b       	or	r24, r18
    41da:	93 2b       	or	r25, r19
    41dc:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <command+0x1>
    41e0:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <command>
        state = STATE_MID1;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
        TCNT1 = 0;
    41ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    41ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
        return;
    41f2:	4c c0       	rjmp	.+152    	; 0x428c <__vector_3+0x134>
    }
    
    State newstate = (trans[state] >> event) & 0x03;
    41f4:	e2 2f       	mov	r30, r18
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	e6 5f       	subi	r30, 0xF6	; 246
    41fa:	fe 4f       	sbci	r31, 0xFE	; 254
    41fc:	80 81       	ld	r24, Z
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <__vector_3+0xae>
    4202:	95 95       	asr	r25
    4204:	87 95       	ror	r24
    4206:	ca 95       	dec	r28
    4208:	e2 f7       	brpl	.-8      	; 0x4202 <__vector_3+0xaa>
    420a:	83 70       	andi	r24, 0x03	; 3

    if(newstate == state || state > STATE_START0)
    420c:	28 17       	cp	r18, r24
    420e:	11 f0       	breq	.+4      	; 0x4214 <__vector_3+0xbc>
    4210:	24 30       	cpi	r18, 0x04	; 4
    4212:	18 f0       	brcs	.+6      	; 0x421a <__vector_3+0xc2>
    {
        /* No state change or wrong state means
         * error so reset. */
        RC5_Reset();
    4214:	0e 94 1d 03 	call	0x63a	; 0x63a <RC5_Reset>
        return;
    4218:	39 c0       	rjmp	.+114    	; 0x428c <__vector_3+0x134>
    }
    
    state = newstate;
    421a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
    
    /* Emit 0 - jest decrement bit position counter
     * cause data is already zeroed by default. */
    if(state == STATE_MID0)
    421e:	82 30       	cpi	r24, 0x02	; 2
    4220:	31 f4       	brne	.+12     	; 0x422e <__vector_3+0xd6>
    {
        ccounter--;
    4222:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <ccounter>
    4226:	91 50       	subi	r25, 0x01	; 1
    4228:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <ccounter>
    422c:	18 c0       	rjmp	.+48     	; 0x425e <__vector_3+0x106>
    }
    else if(state == STATE_MID1)
    422e:	81 30       	cpi	r24, 0x01	; 1
    4230:	b1 f4       	brne	.+44     	; 0x425e <__vector_3+0x106>
    {
        /* Emit 1 */
        ccounter--;
    4232:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <ccounter>
    4236:	91 50       	subi	r25, 0x01	; 1
    4238:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <ccounter>
        command |= 1 << ccounter;
    423c:	21 e0       	ldi	r18, 0x01	; 1
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	02 c0       	rjmp	.+4      	; 0x4246 <__vector_3+0xee>
    4242:	22 0f       	add	r18, r18
    4244:	33 1f       	adc	r19, r19
    4246:	9a 95       	dec	r25
    4248:	e2 f7       	brpl	.-8      	; 0x4242 <__vector_3+0xea>
    424a:	40 91 d0 04 	lds	r20, 0x04D0	; 0x8004d0 <command>
    424e:	50 91 d1 04 	lds	r21, 0x04D1	; 0x8004d1 <command+0x1>
    4252:	24 2b       	or	r18, r20
    4254:	35 2b       	or	r19, r21
    4256:	30 93 d1 04 	sts	0x04D1, r19	; 0x8004d1 <command+0x1>
    425a:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <command>
    }
    
    /* The only valid end states are MID0 and START1.
     * Mid0 is ok, but if we finish in MID1 we need to wait
     * for START1 so the last edge is consumed. */
    if(ccounter == 0 && (state == STATE_START1 || state == STATE_MID0))
    425e:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <ccounter>
    4262:	91 11       	cpse	r25, r1
    4264:	0f c0       	rjmp	.+30     	; 0x4284 <__vector_3+0x12c>
    4266:	88 23       	and	r24, r24
    4268:	11 f0       	breq	.+4      	; 0x426e <__vector_3+0x116>
    426a:	82 30       	cpi	r24, 0x02	; 2
    426c:	59 f4       	brne	.+22     	; 0x4284 <__vector_3+0x12c>
    {
        state = STATE_END;
    426e:	86 e0       	ldi	r24, 0x06	; 6
    4270:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
        has_new = 1;
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <has_new>
        
        /* Disable INT0 */
        EIMSK &= ~_BV(INT2);
    427a:	8d b3       	in	r24, 0x1d	; 29
    427c:	8b 7f       	andi	r24, 0xFB	; 251
    427e:	8d bb       	out	0x1d, r24	; 29
	remote_instruction();
    4280:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <remote_instruction>
    }
    
    TCNT1 = 0;
    4284:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    4288:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
    428c:	ff 91       	pop	r31
    428e:	ef 91       	pop	r30
    4290:	cf 91       	pop	r28
    4292:	bf 91       	pop	r27
    4294:	af 91       	pop	r26
    4296:	9f 91       	pop	r25
    4298:	8f 91       	pop	r24
    429a:	7f 91       	pop	r23
    429c:	6f 91       	pop	r22
    429e:	5f 91       	pop	r21
    42a0:	4f 91       	pop	r20
    42a2:	3f 91       	pop	r19
    42a4:	2f 91       	pop	r18
    42a6:	0f 90       	pop	r0
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	0f 90       	pop	r0
    42ac:	1f 90       	pop	r1
    42ae:	18 95       	reti

000042b0 <rf_instruction>:

void rf_instruction(uint8_t button){
    42b0:	cf 93       	push	r28
    42b2:	c8 2f       	mov	r28, r24
	if (eeprom_read_byte((uint8_t*)FAV_eep + RF_remote))
    42b4:	8c e0       	ldi	r24, 0x0C	; 12
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    42bc:	88 23       	and	r24, r24
    42be:	09 f4       	brne	.+2      	; 0x42c2 <rf_instruction+0x12>
    42c0:	cb c0       	rjmp	.+406    	; 0x4458 <rf_instruction+0x1a8>
	{
	switch(button){
    42c2:	c2 30       	cpi	r28, 0x02	; 2
    42c4:	61 f0       	breq	.+24     	; 0x42de <rf_instruction+0x2e>
    42c6:	20 f4       	brcc	.+8      	; 0x42d0 <rf_instruction+0x20>
    42c8:	c1 30       	cpi	r28, 0x01	; 1
    42ca:	09 f4       	brne	.+2      	; 0x42ce <rf_instruction+0x1e>
    42cc:	92 c0       	rjmp	.+292    	; 0x43f2 <rf_instruction+0x142>
    42ce:	e2 c0       	rjmp	.+452    	; 0x4494 <rf_instruction+0x1e4>
    42d0:	c4 30       	cpi	r28, 0x04	; 4
    42d2:	09 f4       	brne	.+2      	; 0x42d6 <rf_instruction+0x26>
    42d4:	ba c0       	rjmp	.+372    	; 0x444a <rf_instruction+0x19a>
    42d6:	c8 30       	cpi	r28, 0x08	; 8
    42d8:	09 f4       	brne	.+2      	; 0x42dc <rf_instruction+0x2c>
    42da:	5f c0       	rjmp	.+190    	; 0x439a <rf_instruction+0xea>
    42dc:	db c0       	rjmp	.+438    	; 0x4494 <rf_instruction+0x1e4>
		
		case (RF_BUTTON_1):
		if (Game_on && !Timer_Butt_Minus){
    42de:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    42e2:	88 23       	and	r24, r24
    42e4:	69 f0       	breq	.+26     	; 0x4300 <rf_instruction+0x50>
    42e6:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    42ea:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    42ee:	89 2b       	or	r24, r25
    42f0:	39 f4       	brne	.+14     	; 0x4300 <rf_instruction+0x50>
			key=ok;			
    42f2:	87 e1       	ldi	r24, 0x17	; 23
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    42fa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
    42fe:	ca c0       	rjmp	.+404    	; 0x4494 <rf_instruction+0x1e4>
		}else if (Timer_Butt_Start){
    4300:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <Timer_Butt_Start>
    4304:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <Timer_Butt_Start+0x1>
    4308:	89 2b       	or	r24, r25
    430a:	91 f1       	breq	.+100    	; 0x4370 <rf_instruction+0xc0>
			uint8_t Start_setting = eeprom_read_byte((uint8_t*)FAV_eep + Start_game_choice);
    430c:	8b e0       	ldi	r24, 0x0B	; 11
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
			switch (Start_setting){
    4314:	81 30       	cpi	r24, 0x01	; 1
    4316:	71 f0       	breq	.+28     	; 0x4334 <rf_instruction+0x84>
    4318:	18 f0       	brcs	.+6      	; 0x4320 <rf_instruction+0x70>
    431a:	82 30       	cpi	r24, 0x02	; 2
    431c:	a9 f0       	breq	.+42     	; 0x4348 <rf_instruction+0x98>
    431e:	1e c0       	rjmp	.+60     	; 0x435c <rf_instruction+0xac>
				case (0):
					user_instruction = 'U'; // This means Up counter
    4320:	85 e5       	ldi	r24, 0x55	; 85
    4322:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    4326:	8f ef       	ldi	r24, 0xFF	; 255
    4328:	9f ef       	ldi	r25, 0xFF	; 255
    432a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    432e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;
    4332:	b0 c0       	rjmp	.+352    	; 0x4494 <rf_instruction+0x1e4>
				case (1):
					user_instruction = 'A'; // This means Counter Down 1
    4334:	81 e4       	ldi	r24, 0x41	; 65
    4336:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    433a:	8f ef       	ldi	r24, 0xFF	; 255
    433c:	9f ef       	ldi	r25, 0xFF	; 255
    433e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    4342:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;
    4346:	a6 c0       	rjmp	.+332    	; 0x4494 <rf_instruction+0x1e4>
				case (2):
					user_instruction = 'B'; // This means Counter Down 2
    4348:	82 e4       	ldi	r24, 0x42	; 66
    434a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    434e:	8f ef       	ldi	r24, 0xFF	; 255
    4350:	9f ef       	ldi	r25, 0xFF	; 255
    4352:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    4356:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
				break;
    435a:	9c c0       	rjmp	.+312    	; 0x4494 <rf_instruction+0x1e4>
				default:
					user_instruction = 'U'; // This means Up counter
    435c:	85 e5       	ldi	r24, 0x55	; 85
    435e:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <user_instruction>
					key = -1;
    4362:	8f ef       	ldi	r24, 0xFF	; 255
    4364:	9f ef       	ldi	r25, 0xFF	; 255
    4366:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    436a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
					break;				
    436e:	92 c0       	rjmp	.+292    	; 0x4494 <rf_instruction+0x1e4>
			}
		}else if (Timer_Butt_Minus){	//this is stop game
    4370:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    4374:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    4378:	89 2b       	or	r24, r25
    437a:	41 f0       	breq	.+16     	; 0x438c <rf_instruction+0xdc>
			user_instruction = 0;
    437c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
			Set_countdown_bank = 0;
    4380:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
			display_init(1);
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
			break;
    438a:	84 c0       	rjmp	.+264    	; 0x4494 <rf_instruction+0x1e4>
		}else{
			Timer_Butt_Start = RF_REPEAT_TIME;
    438c:	80 ea       	ldi	r24, 0xA0	; 160
    438e:	9f e0       	ldi	r25, 0x0F	; 15
    4390:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <Timer_Butt_Start+0x1>
    4394:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <Timer_Butt_Start>
    4398:	7d c0       	rjmp	.+250    	; 0x4494 <rf_instruction+0x1e4>
		}		
		break;	
//--------------------------------------------------------------
		case (RF_BUTTON_3):
			if (!Game_on)
    439a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    439e:	88 23       	and	r24, r24
    43a0:	09 f4       	brne	.+2      	; 0x43a4 <rf_instruction+0xf4>
    43a2:	78 c0       	rjmp	.+240    	; 0x4494 <rf_instruction+0x1e4>
				break;
			if (Timer_Butt_Minus){
    43a4:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    43a8:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    43ac:	89 2b       	or	r24, r25
    43ae:	99 f0       	breq	.+38     	; 0x43d6 <rf_instruction+0x126>
				Timer_Butt_Minus = RF_REPEAT_TIME;
    43b0:	80 ea       	ldi	r24, 0xA0	; 160
    43b2:	9f e0       	ldi	r25, 0x0F	; 15
    43b4:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    43b8:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
				Score_home--;
    43bc:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    43c0:	81 50       	subi	r24, 0x01	; 1
    43c2:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=99;}
    43c6:	84 36       	cpi	r24, 0x64	; 100
    43c8:	18 f0       	brcs	.+6      	; 0x43d0 <rf_instruction+0x120>
    43ca:	83 e6       	ldi	r24, 0x63	; 99
    43cc:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				update_score_display();
    43d0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
    43d4:	09 c0       	rjmp	.+18     	; 0x43e8 <rf_instruction+0x138>
			}else{
				Score_home++;
    43d6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    43da:	8f 5f       	subi	r24, 0xFF	; 255
    43dc:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
				if (Score_home>99){Score_home=0;}
    43e0:	84 36       	cpi	r24, 0x64	; 100
    43e2:	10 f0       	brcs	.+4      	; 0x43e8 <rf_instruction+0x138>
    43e4:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
			}
			update_score_display();
    43e8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
			timer_display();
    43ec:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
			break;
    43f0:	51 c0       	rjmp	.+162    	; 0x4494 <rf_instruction+0x1e4>
//--------------------------------------------------------------			
		case (RF_BUTTON_4):
			if (!Game_on)
    43f2:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    43f6:	88 23       	and	r24, r24
    43f8:	09 f4       	brne	.+2      	; 0x43fc <rf_instruction+0x14c>
    43fa:	4c c0       	rjmp	.+152    	; 0x4494 <rf_instruction+0x1e4>
				break;
			if (Timer_Butt_Minus){
    43fc:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <Timer_Butt_Minus>
    4400:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <Timer_Butt_Minus+0x1>
    4404:	89 2b       	or	r24, r25
    4406:	99 f0       	breq	.+38     	; 0x442e <rf_instruction+0x17e>
				Timer_Butt_Minus = RF_REPEAT_TIME;
    4408:	80 ea       	ldi	r24, 0xA0	; 160
    440a:	9f e0       	ldi	r25, 0x0F	; 15
    440c:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    4410:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
				Score_guest--;
    4414:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    4418:	81 50       	subi	r24, 0x01	; 1
    441a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=99;}
    441e:	84 36       	cpi	r24, 0x64	; 100
    4420:	18 f0       	brcs	.+6      	; 0x4428 <rf_instruction+0x178>
    4422:	83 e6       	ldi	r24, 0x63	; 99
    4424:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				update_score_display();
    4428:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
    442c:	09 c0       	rjmp	.+18     	; 0x4440 <rf_instruction+0x190>
				}else{
				Score_guest++;
    442e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    4432:	8f 5f       	subi	r24, 0xFF	; 255
    4434:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
				if (Score_guest>99){Score_guest=0;}
    4438:	84 36       	cpi	r24, 0x64	; 100
    443a:	10 f0       	brcs	.+4      	; 0x4440 <rf_instruction+0x190>
    443c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
			}
			update_score_display();
    4440:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
			timer_display();
    4444:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
			break;
    4448:	25 c0       	rjmp	.+74     	; 0x4494 <rf_instruction+0x1e4>
//--------------------------------------------------------------
		case (RF_BUTTON_2):
			Timer_Butt_Minus = RF_REPEAT_TIME;
    444a:	80 ea       	ldi	r24, 0xA0	; 160
    444c:	9f e0       	ldi	r25, 0x0F	; 15
    444e:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <Timer_Butt_Minus+0x1>
    4452:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <Timer_Butt_Minus>
			break;		
    4456:	1e c0       	rjmp	.+60     	; 0x4494 <rf_instruction+0x1e4>
		}
	}else if (Game_on){
    4458:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <Game_on>
    445c:	88 23       	and	r24, r24
    445e:	d1 f0       	breq	.+52     	; 0x4494 <rf_instruction+0x1e4>
		switch(button){
    4460:	c2 30       	cpi	r28, 0x02	; 2
    4462:	69 f0       	breq	.+26     	; 0x447e <rf_instruction+0x1ce>
    4464:	18 f4       	brcc	.+6      	; 0x446c <rf_instruction+0x1bc>
    4466:	c1 30       	cpi	r28, 0x01	; 1
    4468:	31 f0       	breq	.+12     	; 0x4476 <rf_instruction+0x1c6>
    446a:	14 c0       	rjmp	.+40     	; 0x4494 <rf_instruction+0x1e4>
    446c:	c4 30       	cpi	r28, 0x04	; 4
    446e:	59 f0       	breq	.+22     	; 0x4486 <rf_instruction+0x1d6>
    4470:	c8 30       	cpi	r28, 0x08	; 8
    4472:	69 f0       	breq	.+26     	; 0x448e <rf_instruction+0x1de>
    4474:	0f c0       	rjmp	.+30     	; 0x4494 <rf_instruction+0x1e4>
			//Here starts is the Box Button check 
			case (BOX_BUTTON_1):
				Button_Key=1;
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;				
    447c:	0b c0       	rjmp	.+22     	; 0x4494 <rf_instruction+0x1e4>
			case (BOX_BUTTON_2):
				Button_Key=2;
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;
    4484:	07 c0       	rjmp	.+14     	; 0x4494 <rf_instruction+0x1e4>
			case (BOX_BUTTON_3):
				Button_Key=3;
    4486:	83 e0       	ldi	r24, 0x03	; 3
    4488:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;				
    448c:	03 c0       	rjmp	.+6      	; 0x4494 <rf_instruction+0x1e4>
			case (BOX_BUTTON_4):
				Button_Key=4;
    448e:	84 e0       	ldi	r24, 0x04	; 4
    4490:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Button_Key>
				break;
		}
	}
}
    4494:	cf 91       	pop	r28
    4496:	08 95       	ret

00004498 <__vector_7>:
	PCICR = 0b00001000;
	PCMSK3 = 0b11110000;
}

ISR(PCINT3_vect)
{
    4498:	1f 92       	push	r1
    449a:	0f 92       	push	r0
    449c:	0f b6       	in	r0, 0x3f	; 63
    449e:	0f 92       	push	r0
    44a0:	11 24       	eor	r1, r1
    44a2:	2f 93       	push	r18
    44a4:	3f 93       	push	r19
    44a6:	4f 93       	push	r20
    44a8:	5f 93       	push	r21
    44aa:	6f 93       	push	r22
    44ac:	7f 93       	push	r23
    44ae:	8f 93       	push	r24
    44b0:	9f 93       	push	r25
    44b2:	af 93       	push	r26
    44b4:	bf 93       	push	r27
    44b6:	ef 93       	push	r30
    44b8:	ff 93       	push	r31
	uint8_t Input = ~RF_Pins;
    44ba:	89 b1       	in	r24, 0x09	; 9
    44bc:	80 95       	com	r24
	Input =Input>>4;
    44be:	82 95       	swap	r24
    44c0:	8f 70       	andi	r24, 0x0F	; 15
	
	rf_instruction(Input);
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	0e 94 58 21 	call	0x42b0	; 0x42b0 <rf_instruction>
	
	

}
    44c8:	ff 91       	pop	r31
    44ca:	ef 91       	pop	r30
    44cc:	bf 91       	pop	r27
    44ce:	af 91       	pop	r26
    44d0:	9f 91       	pop	r25
    44d2:	8f 91       	pop	r24
    44d4:	7f 91       	pop	r23
    44d6:	6f 91       	pop	r22
    44d8:	5f 91       	pop	r21
    44da:	4f 91       	pop	r20
    44dc:	3f 91       	pop	r19
    44de:	2f 91       	pop	r18
    44e0:	0f 90       	pop	r0
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	0f 90       	pop	r0
    44e6:	1f 90       	pop	r1
    44e8:	18 95       	reti

000044ea <Buttons_Score>:

void Buttons_Score(){
	switch(Button_Key){
    44ea:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Button_Key>
    44ee:	82 30       	cpi	r24, 0x02	; 2
    44f0:	99 f0       	breq	.+38     	; 0x4518 <Buttons_Score+0x2e>
    44f2:	1c f4       	brge	.+6      	; 0x44fa <Buttons_Score+0x10>
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	31 f0       	breq	.+12     	; 0x4504 <Buttons_Score+0x1a>
    44f8:	2e c0       	rjmp	.+92     	; 0x4556 <Buttons_Score+0x6c>
    44fa:	83 30       	cpi	r24, 0x03	; 3
    44fc:	c1 f0       	breq	.+48     	; 0x452e <Buttons_Score+0x44>
    44fe:	84 30       	cpi	r24, 0x04	; 4
    4500:	01 f1       	breq	.+64     	; 0x4542 <Buttons_Score+0x58>
    4502:	29 c0       	rjmp	.+82     	; 0x4556 <Buttons_Score+0x6c>
		case (1):
		Score_home++;
    4504:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    4508:	8f 5f       	subi	r24, 0xFF	; 255
    450a:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
		if (Score_home>99){Score_home=0;}
    450e:	84 36       	cpi	r24, 0x64	; 100
    4510:	10 f1       	brcs	.+68     	; 0x4556 <Buttons_Score+0x6c>
    4512:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <Score_home>
    4516:	1f c0       	rjmp	.+62     	; 0x4556 <Buttons_Score+0x6c>
		break;		
		case (2):
		Score_home--;
    4518:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <Score_home>
    451c:	81 50       	subi	r24, 0x01	; 1
    451e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
		if (Score_home>99){Score_home=99;}
    4522:	84 36       	cpi	r24, 0x64	; 100
    4524:	c0 f0       	brcs	.+48     	; 0x4556 <Buttons_Score+0x6c>
    4526:	83 e6       	ldi	r24, 0x63	; 99
    4528:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <Score_home>
    452c:	14 c0       	rjmp	.+40     	; 0x4556 <Buttons_Score+0x6c>
		break;
		case (3):
		Score_guest++;
    452e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    4532:	8f 5f       	subi	r24, 0xFF	; 255
    4534:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
		if (Score_guest>99){Score_guest=0;}
    4538:	84 36       	cpi	r24, 0x64	; 100
    453a:	68 f0       	brcs	.+26     	; 0x4556 <Buttons_Score+0x6c>
    453c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <Score_guest>
    4540:	0a c0       	rjmp	.+20     	; 0x4556 <Buttons_Score+0x6c>
		break;		
		case (4):
		Score_guest--;
    4542:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <Score_guest>
    4546:	81 50       	subi	r24, 0x01	; 1
    4548:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
		if (Score_guest>99){Score_guest=99;}
    454c:	84 36       	cpi	r24, 0x64	; 100
    454e:	18 f0       	brcs	.+6      	; 0x4556 <Buttons_Score+0x6c>
    4550:	83 e6       	ldi	r24, 0x63	; 99
    4552:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <Score_guest>
		break;
	}
	update_score_display();
    4556:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
	timer_display();
    455a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	uint8_t i;
	uint8_t Input_PINs;
	for (i=0;i<3;i++){
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	13 c0       	rjmp	.+38     	; 0x4588 <Buttons_Score+0x9e>
    4562:	2f ef       	ldi	r18, 0xFF	; 255
    4564:	39 ef       	ldi	r19, 0xF9	; 249
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	21 50       	subi	r18, 0x01	; 1
    456a:	30 40       	sbci	r19, 0x00	; 0
    456c:	80 40       	sbci	r24, 0x00	; 0
    456e:	e1 f7       	brne	.-8      	; 0x4568 <Buttons_Score+0x7e>
    4570:	00 c0       	rjmp	.+0      	; 0x4572 <Buttons_Score+0x88>
    4572:	00 00       	nop
		_delay_ms(40);
		Input_PINs=0xff;
    4574:	8f ef       	ldi	r24, 0xFF	; 255
		while(Input_PINs){
    4576:	05 c0       	rjmp	.+10     	; 0x4582 <Buttons_Score+0x98>
			wdt_reset();
    4578:	a8 95       	wdr
			Input_PINs = ~RF_Pins;
    457a:	89 b1       	in	r24, 0x09	; 9
    457c:	80 95       	com	r24
			Input_PINs = Input_PINs>>4;
    457e:	82 95       	swap	r24
    4580:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t i;
	uint8_t Input_PINs;
	for (i=0;i<3;i++){
		_delay_ms(40);
		Input_PINs=0xff;
		while(Input_PINs){
    4582:	81 11       	cpse	r24, r1
    4584:	f9 cf       	rjmp	.-14     	; 0x4578 <Buttons_Score+0x8e>
	}
	update_score_display();
	timer_display();
	uint8_t i;
	uint8_t Input_PINs;
	for (i=0;i<3;i++){
    4586:	9f 5f       	subi	r25, 0xFF	; 255
    4588:	93 30       	cpi	r25, 0x03	; 3
    458a:	58 f3       	brcs	.-42     	; 0x4562 <Buttons_Score+0x78>
			wdt_reset();
			Input_PINs = ~RF_Pins;
			Input_PINs = Input_PINs>>4;
		}
	}
	Button_Key=0;
    458c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <Button_Key>
    4590:	08 95       	ret

00004592 <Counter_down>:
	display_out_buf[3]=last_temperature[3] ;
	Display_Out(); */
}

void Counter_down(int8_t bank)
{
    4592:	cf 93       	push	r28
    4594:	df 93       	push	r29
	key=-1;
    4596:	2f ef       	ldi	r18, 0xFF	; 255
    4598:	3f ef       	ldi	r19, 0xFF	; 255
    459a:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <key+0x1>
    459e:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <key>
	TCNT2 = 0;
    45a2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	Timer_blink_on=0x80;
    45a6:	90 e8       	ldi	r25, 0x80	; 128
    45a8:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <Timer_blink_on>
	
	if (bank==1)
    45ac:	81 30       	cpi	r24, 0x01	; 1
    45ae:	91 f4       	brne	.+36     	; 0x45d4 <Counter_down+0x42>
	{
		timer[0]= eeprom_read_byte((uint8_t*)Countdown1_eep);
    45b0:	80 e1       	ldi	r24, 0x10	; 16
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    45b8:	c6 e7       	ldi	r28, 0x76	; 118
    45ba:	d4 e0       	ldi	r29, 0x04	; 4
    45bc:	88 83       	st	Y, r24
		timer[1]= eeprom_read_byte((uint8_t*)Countdown1_eep+1);
    45be:	81 e1       	ldi	r24, 0x11	; 17
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    45c6:	89 83       	std	Y+1, r24	; 0x01
		timer[2]= eeprom_read_byte((uint8_t*)Countdown1_eep+2);
    45c8:	82 e1       	ldi	r24, 0x12	; 18
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    45d0:	8a 83       	std	Y+2, r24	; 0x02
    45d2:	13 c0       	rjmp	.+38     	; 0x45fa <Counter_down+0x68>
	}else if (bank==2)
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	89 f4       	brne	.+34     	; 0x45fa <Counter_down+0x68>
	{
		timer[0]= eeprom_read_byte((uint8_t*)Countdown2_eep);
    45d8:	83 e1       	ldi	r24, 0x13	; 19
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    45e0:	c6 e7       	ldi	r28, 0x76	; 118
    45e2:	d4 e0       	ldi	r29, 0x04	; 4
    45e4:	88 83       	st	Y, r24
		timer[1]= eeprom_read_byte((uint8_t*)Countdown2_eep+1);
    45e6:	84 e1       	ldi	r24, 0x14	; 20
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    45ee:	89 83       	std	Y+1, r24	; 0x01
		timer[2]= eeprom_read_byte((uint8_t*)Countdown2_eep+2);
    45f0:	85 e1       	ldi	r24, 0x15	; 21
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    45f8:	8a 83       	std	Y+2, r24	; 0x02
	}	
	timer_display();
    45fa:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	while (user_instruction!=0)
    45fe:	36 c0       	rjmp	.+108    	; 0x466c <Counter_down+0xda>
	{
		if (key==ok)
    4600:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    4604:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    4608:	47 97       	sbiw	r24, 0x17	; 23
    460a:	19 f5       	brne	.+70     	; 0x4652 <Counter_down+0xc0>
		{
			if (TCCR2B==0){
    460c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    4610:	81 11       	cpse	r24, r1
    4612:	04 c0       	rjmp	.+8      	; 0x461c <Counter_down+0x8a>
				TCCR2B = 0b00000101; //start timer for seconds
    4614:	85 e0       	ldi	r24, 0x05	; 5
    4616:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    461a:	02 c0       	rjmp	.+4      	; 0x4620 <Counter_down+0x8e>
				}else{
				TCCR2B = 0;
    461c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
			}
			key=-1;
    4620:	8f ef       	ldi	r24, 0xFF	; 255
    4622:	9f ef       	ldi	r25, 0xFF	; 255
    4624:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    4628:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Buzzer(1,8600);
    462c:	68 e9       	ldi	r22, 0x98	; 152
    462e:	71 e2       	ldi	r23, 0x21	; 33
    4630:	81 e0       	ldi	r24, 0x01	; 1
    4632:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4636:	2f ef       	ldi	r18, 0xFF	; 255
    4638:	82 e5       	ldi	r24, 0x52	; 82
    463a:	97 e0       	ldi	r25, 0x07	; 7
    463c:	21 50       	subi	r18, 0x01	; 1
    463e:	80 40       	sbci	r24, 0x00	; 0
    4640:	90 40       	sbci	r25, 0x00	; 0
    4642:	e1 f7       	brne	.-8      	; 0x463c <Counter_down+0xaa>
    4644:	00 c0       	rjmp	.+0      	; 0x4646 <Counter_down+0xb4>
    4646:	00 00       	nop
			_delay_ms(300);
			Buzzer(0,0);
    4648:	60 e0       	ldi	r22, 0x00	; 0
    464a:	70 e0       	ldi	r23, 0x00	; 0
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
		if (Button_Key)
    4652:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Button_Key>
    4656:	81 11       	cpse	r24, r1
		Buttons_Score();
    4658:	0e 94 75 22 	call	0x44ea	; 0x44ea <Buttons_Score>
		if (key==play)
    465c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    4660:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    4664:	8d 97       	sbiw	r24, 0x2d	; 45
    4666:	11 f4       	brne	.+4      	; 0x466c <Counter_down+0xda>
		Change_Timer();
    4668:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <Change_Timer>
		timer[0]= eeprom_read_byte((uint8_t*)Countdown2_eep);
		timer[1]= eeprom_read_byte((uint8_t*)Countdown2_eep+1);
		timer[2]= eeprom_read_byte((uint8_t*)Countdown2_eep+2);
	}	
	timer_display();
	while (user_instruction!=0)
    466c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    4670:	81 11       	cpse	r24, r1
    4672:	c6 cf       	rjmp	.-116    	; 0x4600 <Counter_down+0x6e>
		if (Button_Key)
		Buttons_Score();
		if (key==play)
		Change_Timer();
	}
	TCCR2B = 0;
    4674:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Buzzer(1,18600);
    4678:	68 ea       	ldi	r22, 0xA8	; 168
    467a:	78 e4       	ldi	r23, 0x48	; 72
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4682:	2f ef       	ldi	r18, 0xFF	; 255
    4684:	82 e5       	ldi	r24, 0x52	; 82
    4686:	97 e0       	ldi	r25, 0x07	; 7
    4688:	21 50       	subi	r18, 0x01	; 1
    468a:	80 40       	sbci	r24, 0x00	; 0
    468c:	90 40       	sbci	r25, 0x00	; 0
    468e:	e1 f7       	brne	.-8      	; 0x4688 <Counter_down+0xf6>
    4690:	00 c0       	rjmp	.+0      	; 0x4692 <Counter_down+0x100>
    4692:	00 00       	nop
	_delay_ms(300);
	Buzzer(0,0);
    4694:	60 e0       	ldi	r22, 0x00	; 0
    4696:	70 e0       	ldi	r23, 0x00	; 0
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
}
    469e:	df 91       	pop	r29
    46a0:	cf 91       	pop	r28
    46a2:	08 95       	ret

000046a4 <Up_counter>:

void Up_counter(void)
{
	key=-1;
    46a4:	8f ef       	ldi	r24, 0xFF	; 255
    46a6:	9f ef       	ldi	r25, 0xFF	; 255
    46a8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    46ac:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
	TCNT2 = 0;
    46b0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	timer[0]=0;timer[1]=0;timer[2]=0;
    46b4:	e6 e7       	ldi	r30, 0x76	; 118
    46b6:	f4 e0       	ldi	r31, 0x04	; 4
    46b8:	10 82       	st	Z, r1
    46ba:	11 82       	std	Z+1, r1	; 0x01
    46bc:	12 82       	std	Z+2, r1	; 0x02
	Timer_blink_on=0x80;
    46be:	80 e8       	ldi	r24, 0x80	; 128
    46c0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <Timer_blink_on>
	timer_display();
    46c4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer_display>
	while (user_instruction!=0)
    46c8:	36 c0       	rjmp	.+108    	; 0x4736 <Up_counter+0x92>
	{
		if (key==ok)
    46ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    46ce:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    46d2:	47 97       	sbiw	r24, 0x17	; 23
    46d4:	19 f5       	brne	.+70     	; 0x471c <Up_counter+0x78>
		{
			if (TCCR2B==0){
    46d6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    46da:	81 11       	cpse	r24, r1
    46dc:	04 c0       	rjmp	.+8      	; 0x46e6 <Up_counter+0x42>
				TCCR2B = 0b00000101; //start timer for seconds
    46de:	85 e0       	ldi	r24, 0x05	; 5
    46e0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    46e4:	02 c0       	rjmp	.+4      	; 0x46ea <Up_counter+0x46>
				//key=-1;		
			}else{
				TCCR2B = 0;
    46e6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
			}	
			key=-1;
    46ea:	8f ef       	ldi	r24, 0xFF	; 255
    46ec:	9f ef       	ldi	r25, 0xFF	; 255
    46ee:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <key+0x1>
    46f2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <key>
			Buzzer(1,8600);
    46f6:	68 e9       	ldi	r22, 0x98	; 152
    46f8:	71 e2       	ldi	r23, 0x21	; 33
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4700:	2f ef       	ldi	r18, 0xFF	; 255
    4702:	82 e5       	ldi	r24, 0x52	; 82
    4704:	97 e0       	ldi	r25, 0x07	; 7
    4706:	21 50       	subi	r18, 0x01	; 1
    4708:	80 40       	sbci	r24, 0x00	; 0
    470a:	90 40       	sbci	r25, 0x00	; 0
    470c:	e1 f7       	brne	.-8      	; 0x4706 <Up_counter+0x62>
    470e:	00 c0       	rjmp	.+0      	; 0x4710 <Up_counter+0x6c>
    4710:	00 00       	nop
			_delay_ms(300);
			Buzzer(0,0);
    4712:	60 e0       	ldi	r22, 0x00	; 0
    4714:	70 e0       	ldi	r23, 0x00	; 0
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
		}
		if (Button_Key)
    471c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Button_Key>
    4720:	81 11       	cpse	r24, r1
		Buttons_Score();
    4722:	0e 94 75 22 	call	0x44ea	; 0x44ea <Buttons_Score>
		if (key==play)
    4726:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <key>
    472a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <key+0x1>
    472e:	8d 97       	sbiw	r24, 0x2d	; 45
    4730:	11 f4       	brne	.+4      	; 0x4736 <Up_counter+0x92>
		Change_Timer();
    4732:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <Change_Timer>
	key=-1;
	TCNT2 = 0;
	timer[0]=0;timer[1]=0;timer[2]=0;
	Timer_blink_on=0x80;
	timer_display();
	while (user_instruction!=0)
    4736:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    473a:	81 11       	cpse	r24, r1
    473c:	c6 cf       	rjmp	.-116    	; 0x46ca <Up_counter+0x26>
		if (Button_Key)
		Buttons_Score();
		if (key==play)
		Change_Timer();
	}
	TCCR2B = 0;
    473e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	Buzzer(1,18600);
    4742:	68 ea       	ldi	r22, 0xA8	; 168
    4744:	78 e4       	ldi	r23, 0x48	; 72
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    474c:	2f ef       	ldi	r18, 0xFF	; 255
    474e:	82 e5       	ldi	r24, 0x52	; 82
    4750:	97 e0       	ldi	r25, 0x07	; 7
    4752:	21 50       	subi	r18, 0x01	; 1
    4754:	80 40       	sbci	r24, 0x00	; 0
    4756:	90 40       	sbci	r25, 0x00	; 0
    4758:	e1 f7       	brne	.-8      	; 0x4752 <Up_counter+0xae>
    475a:	00 c0       	rjmp	.+0      	; 0x475c <Up_counter+0xb8>
    475c:	00 00       	nop
	_delay_ms(300);
	Buzzer(0,0);
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4768:	08 95       	ret

0000476a <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    476a:	99 e2       	ldi	r25, 0x29	; 41
    476c:	88 e1       	ldi	r24, 0x18	; 24
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	f8 94       	cli
    4772:	a8 95       	wdr
    4774:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
	chek_timer_alarms();
}

int main() {
	wdt_enable(WDTO_8S);
	DDRE = 0b01000011;
    477e:	83 e4       	ldi	r24, 0x43	; 67
    4780:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000010;
    4782:	82 e0       	ldi	r24, 0x02	; 2
    4784:	8e b9       	out	0x0e, r24	; 14
	PORTB = 0B10010001;
    4786:	81 e9       	ldi	r24, 0x91	; 145
    4788:	85 b9       	out	0x05, r24	; 5
	DDRB = 0b01101001;
    478a:	89 e6       	ldi	r24, 0x69	; 105
    478c:	84 b9       	out	0x04, r24	; 4
	PORTD = 0B11110000;
    478e:	80 ef       	ldi	r24, 0xF0	; 240
    4790:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0b00000000;
    4792:	1a b8       	out	0x0a, r1	; 10
	ADMUX = 0b01100110;
    4794:	86 e6       	ldi	r24, 0x66	; 102
    4796:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11100000;
    479a:	80 ee       	ldi	r24, 0xE0	; 224
    479c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000100;
    47a0:	84 e0       	ldi	r24, 0x04	; 4
    47a2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b10111111;
    47a6:	8f eb       	ldi	r24, 0xBF	; 191
    47a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	Digits_disp= eeprom_read_byte((uint8_t*)FAV_eep + DISPLAY_DIGITS);
    47ac:	88 e0       	ldi	r24, 0x08	; 8
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	0e 94 19 28 	call	0x5032	; 0x5032 <eeprom_read_byte>
    47b4:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
	if (Digits_disp<2 || Digits_disp>MAX_DISPLAY_DIGITS)
    47b8:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    47bc:	82 30       	cpi	r24, 0x02	; 2
    47be:	24 f0       	brlt	.+8      	; 0x47c8 <main+0x5e>
    47c0:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <Digits_disp>
    47c4:	85 31       	cpi	r24, 0x15	; 21
    47c6:	1c f0       	brlt	.+6      	; 0x47ce <main+0x64>
	Digits_disp=4;
    47c8:	84 e0       	ldi	r24, 0x04	; 4
    47ca:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <Digits_disp>
	Init_MBI();
    47ce:	0e 94 23 02 	call	0x446	; 0x446 <Init_MBI>
	Init_RF();
    47d2:	0e 94 66 09 	call	0x12cc	; 0x12cc <Init_RF>
	uart0_init(BAUD_PRESCALE);
    47d6:	83 e3       	ldi	r24, 0x33	; 51
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	0e 94 fb 07 	call	0xff6	; 0xff6 <uart0_init>
	cli();
    47de:	f8 94       	cli
	photo_sample();
    47e0:	0e 94 38 0c 	call	0x1870	; 0x1870 <photo_sample>
	DISPLAY_ON();
    47e4:	82 b1       	in	r24, 0x02	; 2
    47e6:	8b 7f       	andi	r24, 0xFB	; 251
    47e8:	82 b9       	out	0x02, r24	; 2
	DoLEDtest();
    47ea:	0e 94 45 02 	call	0x48a	; 0x48a <DoLEDtest>
	RC5_Init();
    47ee:	0e 94 2e 03 	call	0x65c	; 0x65c <RC5_Init>
	ds1302_init();
    47f2:	0e 94 2b 06 	call	0xc56	; 0xc56 <ds1302_init>
	DDRE |= RED_LED;
    47f6:	8d b1       	in	r24, 0x0d	; 13
    47f8:	84 60       	ori	r24, 0x04	; 4
    47fa:	8d b9       	out	0x0d, r24	; 13
	TCCR0B = 0b00000010;
    47fc:	82 e0       	ldi	r24, 0x02	; 2
    47fe:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1;
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TIMSK2 = 1;
    4806:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	ASSR |= 1<<AS2;
    480a:	e6 eb       	ldi	r30, 0xB6	; 182
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	80 62       	ori	r24, 0x20	; 32
    4812:	80 83       	st	Z, r24
	TCCR3A = 0b01000000;
    4814:	80 e4       	ldi	r24, 0x40	; 64
    4816:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	Buzzer(1,16000);
    481a:	60 e8       	ldi	r22, 0x80	; 128
    481c:	7e e3       	ldi	r23, 0x3E	; 62
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
    4824:	2f e7       	ldi	r18, 0x7F	; 127
    4826:	88 e3       	ldi	r24, 0x38	; 56
    4828:	91 e0       	ldi	r25, 0x01	; 1
    482a:	21 50       	subi	r18, 0x01	; 1
    482c:	80 40       	sbci	r24, 0x00	; 0
    482e:	90 40       	sbci	r25, 0x00	; 0
    4830:	e1 f7       	brne	.-8      	; 0x482a <main+0xc0>
    4832:	00 c0       	rjmp	.+0      	; 0x4834 <main+0xca>
    4834:	00 00       	nop
	_delay_ms(50);
	Buzzer(0,0);
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	70 e0       	ldi	r23, 0x00	; 0
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	0e 94 83 0b 	call	0x1706	; 0x1706 <Buzzer>
	user_instruction = 0;
    4840:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <user_instruction>
	display_init(1);
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <display_init>
	uart0_putc('T');
	uart0_putc('E');
	uart0_putc('S');
	uart0_putc('T');
	*/
	update_score_display();
    484a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
	sei();
    484e:	78 94       	sei
	Display_Out();	
    4850:	0e 94 6d 09 	call	0x12da	; 0x12da <Display_Out>
	
	//---------------------------------------------------------------------------
	for (;;) {
		Game_on=0;
    4854:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <Game_on>
		while (user_instruction != 0)
    4858:	50 c0       	rjmp	.+160    	; 0x48fa <main+0x190>
		switch (user_instruction) {
    485a:	e0 91 30 04 	lds	r30, 0x0430	; 0x800430 <user_instruction>
    485e:	8e 2f       	mov	r24, r30
    4860:	ee 0f       	add	r30, r30
    4862:	99 0b       	sbc	r25, r25
    4864:	aa 0b       	sbc	r26, r26
    4866:	bb 0b       	sbc	r27, r27
    4868:	fc 01       	movw	r30, r24
    486a:	e1 54       	subi	r30, 0x41	; 65
    486c:	f1 09       	sbc	r31, r1
    486e:	e5 31       	cpi	r30, 0x15	; 21
    4870:	f1 05       	cpc	r31, r1
    4872:	08 f0       	brcs	.+2      	; 0x4876 <main+0x10c>
    4874:	42 c0       	rjmp	.+132    	; 0x48fa <main+0x190>
    4876:	e3 5a       	subi	r30, 0xA3	; 163
    4878:	fe 4f       	sbci	r31, 0xFE	; 254
    487a:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__tablejump2__>
			case ('A'):
				Game_on=1;//Score_home=0;Score_guest=0;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Game_on>
				//display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
				update_score_display();
    4884:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				Counter_down(1);
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0e 94 c9 22 	call	0x4592	; 0x4592 <Counter_down>
				break;
    4890:	34 c0       	rjmp	.+104    	; 0x48fa <main+0x190>
			case ('B'):
				Game_on=1;//Score_home=0;Score_guest=0;
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Game_on>
				//display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
				update_score_display();
    4898:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				Counter_down(2);
    489c:	82 e0       	ldi	r24, 0x02	; 2
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 c9 22 	call	0x4592	; 0x4592 <Counter_down>
				break;
    48a4:	2a c0       	rjmp	.+84     	; 0x48fa <main+0x190>
			case ('U'):
				Game_on=1;//Score_home=0;Score_guest=0;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <Game_on>
				//display_out_buf[8]=0;display_out_buf[9]=0;display_out_buf[10]=0;
				update_score_display();
    48ac:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <update_score_display>
				Up_counter();
    48b0:	0e 94 52 23 	call	0x46a4	; 0x46a4 <Up_counter>
				break;
    48b4:	22 c0       	rjmp	.+68     	; 0x48fa <main+0x190>
			case ('S'):
				Set_clock();
    48b6:	0e 94 19 14 	call	0x2832	; 0x2832 <Set_clock>
				break;
    48ba:	1f c0       	rjmp	.+62     	; 0x48fa <main+0x190>
			case ('D'):
				Set_date();
    48bc:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Set_date>
				break;
    48c0:	1c c0       	rjmp	.+56     	; 0x48fa <main+0x190>
			case ('O'):
				show_brightness();
    48c2:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <show_brightness>
				break;
    48c6:	19 c0       	rjmp	.+50     	; 0x48fa <main+0x190>
			case ('F'):
				F_menu();
    48c8:	0e 94 1d 10 	call	0x203a	; 0x203a <F_menu>
				break;
    48cc:	16 c0       	rjmp	.+44     	; 0x48fa <main+0x190>
			case ('E'):
				FAV_menu();
    48ce:	0e 94 53 12 	call	0x24a6	; 0x24a6 <FAV_menu>
				break;
    48d2:	13 c0       	rjmp	.+38     	; 0x48fa <main+0x190>
			case ('C'):
				Set_countdown(Set_countdown_bank);
    48d4:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    48d8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <Set_countdown>
				if (Set_countdown_bank==2) {
    48dc:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <Set_countdown_bank>
    48e0:	82 30       	cpi	r24, 0x02	; 2
    48e2:	29 f4       	brne	.+10     	; 0x48ee <main+0x184>
					Set_countdown(Set_countdown_bank);
    48e4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <Set_countdown>
					Set_countdown_bank=0;
    48e8:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
    48ec:	06 c0       	rjmp	.+12     	; 0x48fa <main+0x190>
				}else if (Set_countdown_bank==4)
    48ee:	84 30       	cpi	r24, 0x04	; 4
    48f0:	21 f4       	brne	.+8      	; 0x48fa <main+0x190>
				{
					Set_countdown(Set_countdown_bank);
    48f2:	0e 94 fd 14 	call	0x29fa	; 0x29fa <Set_countdown>
					Set_countdown_bank=0;
    48f6:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <Set_countdown_bank>
	Display_Out();	
	
	//---------------------------------------------------------------------------
	for (;;) {
		Game_on=0;
		while (user_instruction != 0)
    48fa:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <user_instruction>
    48fe:	81 11       	cpse	r24, r1
    4900:	ac cf       	rjmp	.-168    	; 0x485a <main+0xf0>
    4902:	a8 cf       	rjmp	.-176    	; 0x4854 <main+0xea>

00004904 <__floatunsisf>:
    4904:	e8 94       	clt
    4906:	09 c0       	rjmp	.+18     	; 0x491a <__floatsisf+0x12>

00004908 <__floatsisf>:
    4908:	97 fb       	bst	r25, 7
    490a:	3e f4       	brtc	.+14     	; 0x491a <__floatsisf+0x12>
    490c:	90 95       	com	r25
    490e:	80 95       	com	r24
    4910:	70 95       	com	r23
    4912:	61 95       	neg	r22
    4914:	7f 4f       	sbci	r23, 0xFF	; 255
    4916:	8f 4f       	sbci	r24, 0xFF	; 255
    4918:	9f 4f       	sbci	r25, 0xFF	; 255
    491a:	99 23       	and	r25, r25
    491c:	a9 f0       	breq	.+42     	; 0x4948 <__floatsisf+0x40>
    491e:	f9 2f       	mov	r31, r25
    4920:	96 e9       	ldi	r25, 0x96	; 150
    4922:	bb 27       	eor	r27, r27
    4924:	93 95       	inc	r25
    4926:	f6 95       	lsr	r31
    4928:	87 95       	ror	r24
    492a:	77 95       	ror	r23
    492c:	67 95       	ror	r22
    492e:	b7 95       	ror	r27
    4930:	f1 11       	cpse	r31, r1
    4932:	f8 cf       	rjmp	.-16     	; 0x4924 <__floatsisf+0x1c>
    4934:	fa f4       	brpl	.+62     	; 0x4974 <__floatsisf+0x6c>
    4936:	bb 0f       	add	r27, r27
    4938:	11 f4       	brne	.+4      	; 0x493e <__floatsisf+0x36>
    493a:	60 ff       	sbrs	r22, 0
    493c:	1b c0       	rjmp	.+54     	; 0x4974 <__floatsisf+0x6c>
    493e:	6f 5f       	subi	r22, 0xFF	; 255
    4940:	7f 4f       	sbci	r23, 0xFF	; 255
    4942:	8f 4f       	sbci	r24, 0xFF	; 255
    4944:	9f 4f       	sbci	r25, 0xFF	; 255
    4946:	16 c0       	rjmp	.+44     	; 0x4974 <__floatsisf+0x6c>
    4948:	88 23       	and	r24, r24
    494a:	11 f0       	breq	.+4      	; 0x4950 <__floatsisf+0x48>
    494c:	96 e9       	ldi	r25, 0x96	; 150
    494e:	11 c0       	rjmp	.+34     	; 0x4972 <__floatsisf+0x6a>
    4950:	77 23       	and	r23, r23
    4952:	21 f0       	breq	.+8      	; 0x495c <__floatsisf+0x54>
    4954:	9e e8       	ldi	r25, 0x8E	; 142
    4956:	87 2f       	mov	r24, r23
    4958:	76 2f       	mov	r23, r22
    495a:	05 c0       	rjmp	.+10     	; 0x4966 <__floatsisf+0x5e>
    495c:	66 23       	and	r22, r22
    495e:	71 f0       	breq	.+28     	; 0x497c <__floatsisf+0x74>
    4960:	96 e8       	ldi	r25, 0x86	; 134
    4962:	86 2f       	mov	r24, r22
    4964:	70 e0       	ldi	r23, 0x00	; 0
    4966:	60 e0       	ldi	r22, 0x00	; 0
    4968:	2a f0       	brmi	.+10     	; 0x4974 <__floatsisf+0x6c>
    496a:	9a 95       	dec	r25
    496c:	66 0f       	add	r22, r22
    496e:	77 1f       	adc	r23, r23
    4970:	88 1f       	adc	r24, r24
    4972:	da f7       	brpl	.-10     	; 0x496a <__floatsisf+0x62>
    4974:	88 0f       	add	r24, r24
    4976:	96 95       	lsr	r25
    4978:	87 95       	ror	r24
    497a:	97 f9       	bld	r25, 7
    497c:	08 95       	ret

0000497e <__mulsf3>:
    497e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__mulsf3x>
    4982:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__fp_round>
    4986:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <__fp_pscA>
    498a:	38 f0       	brcs	.+14     	; 0x499a <__mulsf3+0x1c>
    498c:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__fp_pscB>
    4990:	20 f0       	brcs	.+8      	; 0x499a <__mulsf3+0x1c>
    4992:	95 23       	and	r25, r21
    4994:	11 f0       	breq	.+4      	; 0x499a <__mulsf3+0x1c>
    4996:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__fp_inf>
    499a:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__fp_nan>
    499e:	11 24       	eor	r1, r1
    49a0:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__fp_szero>

000049a4 <__mulsf3x>:
    49a4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <__fp_split3>
    49a8:	70 f3       	brcs	.-36     	; 0x4986 <__mulsf3+0x8>

000049aa <__mulsf3_pse>:
    49aa:	95 9f       	mul	r25, r21
    49ac:	c1 f3       	breq	.-16     	; 0x499e <__mulsf3+0x20>
    49ae:	95 0f       	add	r25, r21
    49b0:	50 e0       	ldi	r21, 0x00	; 0
    49b2:	55 1f       	adc	r21, r21
    49b4:	62 9f       	mul	r22, r18
    49b6:	f0 01       	movw	r30, r0
    49b8:	72 9f       	mul	r23, r18
    49ba:	bb 27       	eor	r27, r27
    49bc:	f0 0d       	add	r31, r0
    49be:	b1 1d       	adc	r27, r1
    49c0:	63 9f       	mul	r22, r19
    49c2:	aa 27       	eor	r26, r26
    49c4:	f0 0d       	add	r31, r0
    49c6:	b1 1d       	adc	r27, r1
    49c8:	aa 1f       	adc	r26, r26
    49ca:	64 9f       	mul	r22, r20
    49cc:	66 27       	eor	r22, r22
    49ce:	b0 0d       	add	r27, r0
    49d0:	a1 1d       	adc	r26, r1
    49d2:	66 1f       	adc	r22, r22
    49d4:	82 9f       	mul	r24, r18
    49d6:	22 27       	eor	r18, r18
    49d8:	b0 0d       	add	r27, r0
    49da:	a1 1d       	adc	r26, r1
    49dc:	62 1f       	adc	r22, r18
    49de:	73 9f       	mul	r23, r19
    49e0:	b0 0d       	add	r27, r0
    49e2:	a1 1d       	adc	r26, r1
    49e4:	62 1f       	adc	r22, r18
    49e6:	83 9f       	mul	r24, r19
    49e8:	a0 0d       	add	r26, r0
    49ea:	61 1d       	adc	r22, r1
    49ec:	22 1f       	adc	r18, r18
    49ee:	74 9f       	mul	r23, r20
    49f0:	33 27       	eor	r19, r19
    49f2:	a0 0d       	add	r26, r0
    49f4:	61 1d       	adc	r22, r1
    49f6:	23 1f       	adc	r18, r19
    49f8:	84 9f       	mul	r24, r20
    49fa:	60 0d       	add	r22, r0
    49fc:	21 1d       	adc	r18, r1
    49fe:	82 2f       	mov	r24, r18
    4a00:	76 2f       	mov	r23, r22
    4a02:	6a 2f       	mov	r22, r26
    4a04:	11 24       	eor	r1, r1
    4a06:	9f 57       	subi	r25, 0x7F	; 127
    4a08:	50 40       	sbci	r21, 0x00	; 0
    4a0a:	9a f0       	brmi	.+38     	; 0x4a32 <__mulsf3_pse+0x88>
    4a0c:	f1 f0       	breq	.+60     	; 0x4a4a <__mulsf3_pse+0xa0>
    4a0e:	88 23       	and	r24, r24
    4a10:	4a f0       	brmi	.+18     	; 0x4a24 <__mulsf3_pse+0x7a>
    4a12:	ee 0f       	add	r30, r30
    4a14:	ff 1f       	adc	r31, r31
    4a16:	bb 1f       	adc	r27, r27
    4a18:	66 1f       	adc	r22, r22
    4a1a:	77 1f       	adc	r23, r23
    4a1c:	88 1f       	adc	r24, r24
    4a1e:	91 50       	subi	r25, 0x01	; 1
    4a20:	50 40       	sbci	r21, 0x00	; 0
    4a22:	a9 f7       	brne	.-22     	; 0x4a0e <__mulsf3_pse+0x64>
    4a24:	9e 3f       	cpi	r25, 0xFE	; 254
    4a26:	51 05       	cpc	r21, r1
    4a28:	80 f0       	brcs	.+32     	; 0x4a4a <__mulsf3_pse+0xa0>
    4a2a:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__fp_inf>
    4a2e:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__fp_szero>
    4a32:	5f 3f       	cpi	r21, 0xFF	; 255
    4a34:	e4 f3       	brlt	.-8      	; 0x4a2e <__mulsf3_pse+0x84>
    4a36:	98 3e       	cpi	r25, 0xE8	; 232
    4a38:	d4 f3       	brlt	.-12     	; 0x4a2e <__mulsf3_pse+0x84>
    4a3a:	86 95       	lsr	r24
    4a3c:	77 95       	ror	r23
    4a3e:	67 95       	ror	r22
    4a40:	b7 95       	ror	r27
    4a42:	f7 95       	ror	r31
    4a44:	e7 95       	ror	r30
    4a46:	9f 5f       	subi	r25, 0xFF	; 255
    4a48:	c1 f7       	brne	.-16     	; 0x4a3a <__mulsf3_pse+0x90>
    4a4a:	fe 2b       	or	r31, r30
    4a4c:	88 0f       	add	r24, r24
    4a4e:	91 1d       	adc	r25, r1
    4a50:	96 95       	lsr	r25
    4a52:	87 95       	ror	r24
    4a54:	97 f9       	bld	r25, 7
    4a56:	08 95       	ret

00004a58 <__fp_inf>:
    4a58:	97 f9       	bld	r25, 7
    4a5a:	9f 67       	ori	r25, 0x7F	; 127
    4a5c:	80 e8       	ldi	r24, 0x80	; 128
    4a5e:	70 e0       	ldi	r23, 0x00	; 0
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	08 95       	ret

00004a64 <__fp_nan>:
    4a64:	9f ef       	ldi	r25, 0xFF	; 255
    4a66:	80 ec       	ldi	r24, 0xC0	; 192
    4a68:	08 95       	ret

00004a6a <__fp_pscA>:
    4a6a:	00 24       	eor	r0, r0
    4a6c:	0a 94       	dec	r0
    4a6e:	16 16       	cp	r1, r22
    4a70:	17 06       	cpc	r1, r23
    4a72:	18 06       	cpc	r1, r24
    4a74:	09 06       	cpc	r0, r25
    4a76:	08 95       	ret

00004a78 <__fp_pscB>:
    4a78:	00 24       	eor	r0, r0
    4a7a:	0a 94       	dec	r0
    4a7c:	12 16       	cp	r1, r18
    4a7e:	13 06       	cpc	r1, r19
    4a80:	14 06       	cpc	r1, r20
    4a82:	05 06       	cpc	r0, r21
    4a84:	08 95       	ret

00004a86 <__fp_round>:
    4a86:	09 2e       	mov	r0, r25
    4a88:	03 94       	inc	r0
    4a8a:	00 0c       	add	r0, r0
    4a8c:	11 f4       	brne	.+4      	; 0x4a92 <__fp_round+0xc>
    4a8e:	88 23       	and	r24, r24
    4a90:	52 f0       	brmi	.+20     	; 0x4aa6 <__fp_round+0x20>
    4a92:	bb 0f       	add	r27, r27
    4a94:	40 f4       	brcc	.+16     	; 0x4aa6 <__fp_round+0x20>
    4a96:	bf 2b       	or	r27, r31
    4a98:	11 f4       	brne	.+4      	; 0x4a9e <__fp_round+0x18>
    4a9a:	60 ff       	sbrs	r22, 0
    4a9c:	04 c0       	rjmp	.+8      	; 0x4aa6 <__fp_round+0x20>
    4a9e:	6f 5f       	subi	r22, 0xFF	; 255
    4aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa6:	08 95       	ret

00004aa8 <__fp_split3>:
    4aa8:	57 fd       	sbrc	r21, 7
    4aaa:	90 58       	subi	r25, 0x80	; 128
    4aac:	44 0f       	add	r20, r20
    4aae:	55 1f       	adc	r21, r21
    4ab0:	59 f0       	breq	.+22     	; 0x4ac8 <__fp_splitA+0x10>
    4ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    4ab4:	71 f0       	breq	.+28     	; 0x4ad2 <__fp_splitA+0x1a>
    4ab6:	47 95       	ror	r20

00004ab8 <__fp_splitA>:
    4ab8:	88 0f       	add	r24, r24
    4aba:	97 fb       	bst	r25, 7
    4abc:	99 1f       	adc	r25, r25
    4abe:	61 f0       	breq	.+24     	; 0x4ad8 <__fp_splitA+0x20>
    4ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    4ac2:	79 f0       	breq	.+30     	; 0x4ae2 <__fp_splitA+0x2a>
    4ac4:	87 95       	ror	r24
    4ac6:	08 95       	ret
    4ac8:	12 16       	cp	r1, r18
    4aca:	13 06       	cpc	r1, r19
    4acc:	14 06       	cpc	r1, r20
    4ace:	55 1f       	adc	r21, r21
    4ad0:	f2 cf       	rjmp	.-28     	; 0x4ab6 <__fp_split3+0xe>
    4ad2:	46 95       	lsr	r20
    4ad4:	f1 df       	rcall	.-30     	; 0x4ab8 <__fp_splitA>
    4ad6:	08 c0       	rjmp	.+16     	; 0x4ae8 <__fp_splitA+0x30>
    4ad8:	16 16       	cp	r1, r22
    4ada:	17 06       	cpc	r1, r23
    4adc:	18 06       	cpc	r1, r24
    4ade:	99 1f       	adc	r25, r25
    4ae0:	f1 cf       	rjmp	.-30     	; 0x4ac4 <__fp_splitA+0xc>
    4ae2:	86 95       	lsr	r24
    4ae4:	71 05       	cpc	r23, r1
    4ae6:	61 05       	cpc	r22, r1
    4ae8:	08 94       	sec
    4aea:	08 95       	ret

00004aec <__fp_zero>:
    4aec:	e8 94       	clt

00004aee <__fp_szero>:
    4aee:	bb 27       	eor	r27, r27
    4af0:	66 27       	eor	r22, r22
    4af2:	77 27       	eor	r23, r23
    4af4:	cb 01       	movw	r24, r22
    4af6:	97 f9       	bld	r25, 7
    4af8:	08 95       	ret

00004afa <__tablejump2__>:
    4afa:	ee 0f       	add	r30, r30
    4afc:	ff 1f       	adc	r31, r31
    4afe:	05 90       	lpm	r0, Z+
    4b00:	f4 91       	lpm	r31, Z
    4b02:	e0 2d       	mov	r30, r0
    4b04:	09 94       	ijmp

00004b06 <__umulhisi3>:
    4b06:	a2 9f       	mul	r26, r18
    4b08:	b0 01       	movw	r22, r0
    4b0a:	b3 9f       	mul	r27, r19
    4b0c:	c0 01       	movw	r24, r0
    4b0e:	a3 9f       	mul	r26, r19
    4b10:	70 0d       	add	r23, r0
    4b12:	81 1d       	adc	r24, r1
    4b14:	11 24       	eor	r1, r1
    4b16:	91 1d       	adc	r25, r1
    4b18:	b2 9f       	mul	r27, r18
    4b1a:	70 0d       	add	r23, r0
    4b1c:	81 1d       	adc	r24, r1
    4b1e:	11 24       	eor	r1, r1
    4b20:	91 1d       	adc	r25, r1
    4b22:	08 95       	ret

00004b24 <dtostrf>:
    4b24:	ef 92       	push	r14
    4b26:	0f 93       	push	r16
    4b28:	1f 93       	push	r17
    4b2a:	cf 93       	push	r28
    4b2c:	df 93       	push	r29
    4b2e:	e8 01       	movw	r28, r16
    4b30:	47 fd       	sbrc	r20, 7
    4b32:	02 c0       	rjmp	.+4      	; 0x4b38 <dtostrf+0x14>
    4b34:	34 e0       	ldi	r19, 0x04	; 4
    4b36:	01 c0       	rjmp	.+2      	; 0x4b3a <dtostrf+0x16>
    4b38:	34 e1       	ldi	r19, 0x14	; 20
    4b3a:	04 2e       	mov	r0, r20
    4b3c:	00 0c       	add	r0, r0
    4b3e:	55 0b       	sbc	r21, r21
    4b40:	57 ff       	sbrs	r21, 7
    4b42:	03 c0       	rjmp	.+6      	; 0x4b4a <dtostrf+0x26>
    4b44:	51 95       	neg	r21
    4b46:	41 95       	neg	r20
    4b48:	51 09       	sbc	r21, r1
    4b4a:	e3 2e       	mov	r14, r19
    4b4c:	02 2f       	mov	r16, r18
    4b4e:	24 2f       	mov	r18, r20
    4b50:	ae 01       	movw	r20, r28
    4b52:	0e 94 d7 25 	call	0x4bae	; 0x4bae <dtoa_prf>
    4b56:	ce 01       	movw	r24, r28
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	1f 91       	pop	r17
    4b5e:	0f 91       	pop	r16
    4b60:	ef 90       	pop	r14
    4b62:	08 95       	ret

00004b64 <__itoa_ncheck>:
    4b64:	bb 27       	eor	r27, r27
    4b66:	4a 30       	cpi	r20, 0x0A	; 10
    4b68:	31 f4       	brne	.+12     	; 0x4b76 <__itoa_ncheck+0x12>
    4b6a:	99 23       	and	r25, r25
    4b6c:	22 f4       	brpl	.+8      	; 0x4b76 <__itoa_ncheck+0x12>
    4b6e:	bd e2       	ldi	r27, 0x2D	; 45
    4b70:	90 95       	com	r25
    4b72:	81 95       	neg	r24
    4b74:	9f 4f       	sbci	r25, 0xFF	; 255
    4b76:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <__utoa_common>

00004b7a <__utoa_ncheck>:
    4b7a:	bb 27       	eor	r27, r27

00004b7c <__utoa_common>:
    4b7c:	fb 01       	movw	r30, r22
    4b7e:	55 27       	eor	r21, r21
    4b80:	aa 27       	eor	r26, r26
    4b82:	88 0f       	add	r24, r24
    4b84:	99 1f       	adc	r25, r25
    4b86:	aa 1f       	adc	r26, r26
    4b88:	a4 17       	cp	r26, r20
    4b8a:	10 f0       	brcs	.+4      	; 0x4b90 <__utoa_common+0x14>
    4b8c:	a4 1b       	sub	r26, r20
    4b8e:	83 95       	inc	r24
    4b90:	50 51       	subi	r21, 0x10	; 16
    4b92:	b9 f7       	brne	.-18     	; 0x4b82 <__utoa_common+0x6>
    4b94:	a0 5d       	subi	r26, 0xD0	; 208
    4b96:	aa 33       	cpi	r26, 0x3A	; 58
    4b98:	08 f0       	brcs	.+2      	; 0x4b9c <__utoa_common+0x20>
    4b9a:	a9 5d       	subi	r26, 0xD9	; 217
    4b9c:	a1 93       	st	Z+, r26
    4b9e:	00 97       	sbiw	r24, 0x00	; 0
    4ba0:	79 f7       	brne	.-34     	; 0x4b80 <__utoa_common+0x4>
    4ba2:	b1 11       	cpse	r27, r1
    4ba4:	b1 93       	st	Z+, r27
    4ba6:	11 92       	st	Z+, r1
    4ba8:	cb 01       	movw	r24, r22
    4baa:	0c 94 09 28 	jmp	0x5012	; 0x5012 <strrev>

00004bae <dtoa_prf>:
    4bae:	a9 e0       	ldi	r26, 0x09	; 9
    4bb0:	b0 e0       	ldi	r27, 0x00	; 0
    4bb2:	ed ed       	ldi	r30, 0xDD	; 221
    4bb4:	f5 e2       	ldi	r31, 0x25	; 37
    4bb6:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0xc>
    4bba:	6a 01       	movw	r12, r20
    4bbc:	12 2f       	mov	r17, r18
    4bbe:	b0 2e       	mov	r11, r16
    4bc0:	2b e3       	ldi	r18, 0x3B	; 59
    4bc2:	20 17       	cp	r18, r16
    4bc4:	20 f0       	brcs	.+8      	; 0x4bce <dtoa_prf+0x20>
    4bc6:	ff 24       	eor	r15, r15
    4bc8:	f3 94       	inc	r15
    4bca:	f0 0e       	add	r15, r16
    4bcc:	02 c0       	rjmp	.+4      	; 0x4bd2 <dtoa_prf+0x24>
    4bce:	2c e3       	ldi	r18, 0x3C	; 60
    4bd0:	f2 2e       	mov	r15, r18
    4bd2:	0f 2d       	mov	r16, r15
    4bd4:	27 e0       	ldi	r18, 0x07	; 7
    4bd6:	ae 01       	movw	r20, r28
    4bd8:	4f 5f       	subi	r20, 0xFF	; 255
    4bda:	5f 4f       	sbci	r21, 0xFF	; 255
    4bdc:	0e 94 31 27 	call	0x4e62	; 0x4e62 <__ftoa_engine>
    4be0:	bc 01       	movw	r22, r24
    4be2:	49 81       	ldd	r20, Y+1	; 0x01
    4be4:	84 2f       	mov	r24, r20
    4be6:	89 70       	andi	r24, 0x09	; 9
    4be8:	81 30       	cpi	r24, 0x01	; 1
    4bea:	31 f0       	breq	.+12     	; 0x4bf8 <dtoa_prf+0x4a>
    4bec:	e1 fc       	sbrc	r14, 1
    4bee:	06 c0       	rjmp	.+12     	; 0x4bfc <dtoa_prf+0x4e>
    4bf0:	e0 fe       	sbrs	r14, 0
    4bf2:	06 c0       	rjmp	.+12     	; 0x4c00 <dtoa_prf+0x52>
    4bf4:	90 e2       	ldi	r25, 0x20	; 32
    4bf6:	05 c0       	rjmp	.+10     	; 0x4c02 <dtoa_prf+0x54>
    4bf8:	9d e2       	ldi	r25, 0x2D	; 45
    4bfa:	03 c0       	rjmp	.+6      	; 0x4c02 <dtoa_prf+0x54>
    4bfc:	9b e2       	ldi	r25, 0x2B	; 43
    4bfe:	01 c0       	rjmp	.+2      	; 0x4c02 <dtoa_prf+0x54>
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	5e 2d       	mov	r21, r14
    4c04:	50 71       	andi	r21, 0x10	; 16
    4c06:	43 ff       	sbrs	r20, 3
    4c08:	3c c0       	rjmp	.+120    	; 0x4c82 <dtoa_prf+0xd4>
    4c0a:	91 11       	cpse	r25, r1
    4c0c:	02 c0       	rjmp	.+4      	; 0x4c12 <dtoa_prf+0x64>
    4c0e:	83 e0       	ldi	r24, 0x03	; 3
    4c10:	01 c0       	rjmp	.+2      	; 0x4c14 <dtoa_prf+0x66>
    4c12:	84 e0       	ldi	r24, 0x04	; 4
    4c14:	81 17       	cp	r24, r17
    4c16:	18 f4       	brcc	.+6      	; 0x4c1e <dtoa_prf+0x70>
    4c18:	21 2f       	mov	r18, r17
    4c1a:	28 1b       	sub	r18, r24
    4c1c:	01 c0       	rjmp	.+2      	; 0x4c20 <dtoa_prf+0x72>
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	51 11       	cpse	r21, r1
    4c22:	0b c0       	rjmp	.+22     	; 0x4c3a <dtoa_prf+0x8c>
    4c24:	f6 01       	movw	r30, r12
    4c26:	82 2f       	mov	r24, r18
    4c28:	30 e2       	ldi	r19, 0x20	; 32
    4c2a:	88 23       	and	r24, r24
    4c2c:	19 f0       	breq	.+6      	; 0x4c34 <dtoa_prf+0x86>
    4c2e:	31 93       	st	Z+, r19
    4c30:	81 50       	subi	r24, 0x01	; 1
    4c32:	fb cf       	rjmp	.-10     	; 0x4c2a <dtoa_prf+0x7c>
    4c34:	c2 0e       	add	r12, r18
    4c36:	d1 1c       	adc	r13, r1
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	99 23       	and	r25, r25
    4c3c:	29 f0       	breq	.+10     	; 0x4c48 <dtoa_prf+0x9a>
    4c3e:	d6 01       	movw	r26, r12
    4c40:	9c 93       	st	X, r25
    4c42:	f6 01       	movw	r30, r12
    4c44:	31 96       	adiw	r30, 0x01	; 1
    4c46:	6f 01       	movw	r12, r30
    4c48:	c6 01       	movw	r24, r12
    4c4a:	03 96       	adiw	r24, 0x03	; 3
    4c4c:	e2 fe       	sbrs	r14, 2
    4c4e:	0a c0       	rjmp	.+20     	; 0x4c64 <dtoa_prf+0xb6>
    4c50:	3e e4       	ldi	r19, 0x4E	; 78
    4c52:	d6 01       	movw	r26, r12
    4c54:	3c 93       	st	X, r19
    4c56:	41 e4       	ldi	r20, 0x41	; 65
    4c58:	11 96       	adiw	r26, 0x01	; 1
    4c5a:	4c 93       	st	X, r20
    4c5c:	11 97       	sbiw	r26, 0x01	; 1
    4c5e:	12 96       	adiw	r26, 0x02	; 2
    4c60:	3c 93       	st	X, r19
    4c62:	06 c0       	rjmp	.+12     	; 0x4c70 <dtoa_prf+0xc2>
    4c64:	3e e6       	ldi	r19, 0x6E	; 110
    4c66:	f6 01       	movw	r30, r12
    4c68:	30 83       	st	Z, r19
    4c6a:	41 e6       	ldi	r20, 0x61	; 97
    4c6c:	41 83       	std	Z+1, r20	; 0x01
    4c6e:	32 83       	std	Z+2, r19	; 0x02
    4c70:	fc 01       	movw	r30, r24
    4c72:	32 2f       	mov	r19, r18
    4c74:	40 e2       	ldi	r20, 0x20	; 32
    4c76:	33 23       	and	r19, r19
    4c78:	09 f4       	brne	.+2      	; 0x4c7c <dtoa_prf+0xce>
    4c7a:	42 c0       	rjmp	.+132    	; 0x4d00 <dtoa_prf+0x152>
    4c7c:	41 93       	st	Z+, r20
    4c7e:	31 50       	subi	r19, 0x01	; 1
    4c80:	fa cf       	rjmp	.-12     	; 0x4c76 <dtoa_prf+0xc8>
    4c82:	42 ff       	sbrs	r20, 2
    4c84:	44 c0       	rjmp	.+136    	; 0x4d0e <dtoa_prf+0x160>
    4c86:	91 11       	cpse	r25, r1
    4c88:	02 c0       	rjmp	.+4      	; 0x4c8e <dtoa_prf+0xe0>
    4c8a:	83 e0       	ldi	r24, 0x03	; 3
    4c8c:	01 c0       	rjmp	.+2      	; 0x4c90 <dtoa_prf+0xe2>
    4c8e:	84 e0       	ldi	r24, 0x04	; 4
    4c90:	81 17       	cp	r24, r17
    4c92:	18 f4       	brcc	.+6      	; 0x4c9a <dtoa_prf+0xec>
    4c94:	21 2f       	mov	r18, r17
    4c96:	28 1b       	sub	r18, r24
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <dtoa_prf+0xee>
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	51 11       	cpse	r21, r1
    4c9e:	0b c0       	rjmp	.+22     	; 0x4cb6 <dtoa_prf+0x108>
    4ca0:	f6 01       	movw	r30, r12
    4ca2:	82 2f       	mov	r24, r18
    4ca4:	30 e2       	ldi	r19, 0x20	; 32
    4ca6:	88 23       	and	r24, r24
    4ca8:	19 f0       	breq	.+6      	; 0x4cb0 <dtoa_prf+0x102>
    4caa:	31 93       	st	Z+, r19
    4cac:	81 50       	subi	r24, 0x01	; 1
    4cae:	fb cf       	rjmp	.-10     	; 0x4ca6 <dtoa_prf+0xf8>
    4cb0:	c2 0e       	add	r12, r18
    4cb2:	d1 1c       	adc	r13, r1
    4cb4:	20 e0       	ldi	r18, 0x00	; 0
    4cb6:	99 23       	and	r25, r25
    4cb8:	29 f0       	breq	.+10     	; 0x4cc4 <dtoa_prf+0x116>
    4cba:	d6 01       	movw	r26, r12
    4cbc:	9c 93       	st	X, r25
    4cbe:	f6 01       	movw	r30, r12
    4cc0:	31 96       	adiw	r30, 0x01	; 1
    4cc2:	6f 01       	movw	r12, r30
    4cc4:	c6 01       	movw	r24, r12
    4cc6:	03 96       	adiw	r24, 0x03	; 3
    4cc8:	e2 fe       	sbrs	r14, 2
    4cca:	0b c0       	rjmp	.+22     	; 0x4ce2 <dtoa_prf+0x134>
    4ccc:	39 e4       	ldi	r19, 0x49	; 73
    4cce:	d6 01       	movw	r26, r12
    4cd0:	3c 93       	st	X, r19
    4cd2:	3e e4       	ldi	r19, 0x4E	; 78
    4cd4:	11 96       	adiw	r26, 0x01	; 1
    4cd6:	3c 93       	st	X, r19
    4cd8:	11 97       	sbiw	r26, 0x01	; 1
    4cda:	36 e4       	ldi	r19, 0x46	; 70
    4cdc:	12 96       	adiw	r26, 0x02	; 2
    4cde:	3c 93       	st	X, r19
    4ce0:	07 c0       	rjmp	.+14     	; 0x4cf0 <dtoa_prf+0x142>
    4ce2:	39 e6       	ldi	r19, 0x69	; 105
    4ce4:	f6 01       	movw	r30, r12
    4ce6:	30 83       	st	Z, r19
    4ce8:	3e e6       	ldi	r19, 0x6E	; 110
    4cea:	31 83       	std	Z+1, r19	; 0x01
    4cec:	36 e6       	ldi	r19, 0x66	; 102
    4cee:	32 83       	std	Z+2, r19	; 0x02
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	32 2f       	mov	r19, r18
    4cf4:	40 e2       	ldi	r20, 0x20	; 32
    4cf6:	33 23       	and	r19, r19
    4cf8:	19 f0       	breq	.+6      	; 0x4d00 <dtoa_prf+0x152>
    4cfa:	41 93       	st	Z+, r20
    4cfc:	31 50       	subi	r19, 0x01	; 1
    4cfe:	fb cf       	rjmp	.-10     	; 0x4cf6 <dtoa_prf+0x148>
    4d00:	fc 01       	movw	r30, r24
    4d02:	e2 0f       	add	r30, r18
    4d04:	f1 1d       	adc	r31, r1
    4d06:	10 82       	st	Z, r1
    4d08:	8e ef       	ldi	r24, 0xFE	; 254
    4d0a:	9f ef       	ldi	r25, 0xFF	; 255
    4d0c:	a6 c0       	rjmp	.+332    	; 0x4e5a <dtoa_prf+0x2ac>
    4d0e:	21 e0       	ldi	r18, 0x01	; 1
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	91 11       	cpse	r25, r1
    4d14:	02 c0       	rjmp	.+4      	; 0x4d1a <dtoa_prf+0x16c>
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	16 16       	cp	r1, r22
    4d1c:	17 06       	cpc	r1, r23
    4d1e:	1c f4       	brge	.+6      	; 0x4d26 <dtoa_prf+0x178>
    4d20:	fb 01       	movw	r30, r22
    4d22:	31 96       	adiw	r30, 0x01	; 1
    4d24:	02 c0       	rjmp	.+4      	; 0x4d2a <dtoa_prf+0x17c>
    4d26:	e1 e0       	ldi	r30, 0x01	; 1
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	2e 0f       	add	r18, r30
    4d2c:	3f 1f       	adc	r19, r31
    4d2e:	bb 20       	and	r11, r11
    4d30:	21 f0       	breq	.+8      	; 0x4d3a <dtoa_prf+0x18c>
    4d32:	eb 2d       	mov	r30, r11
    4d34:	f0 e0       	ldi	r31, 0x00	; 0
    4d36:	31 96       	adiw	r30, 0x01	; 1
    4d38:	02 c0       	rjmp	.+4      	; 0x4d3e <dtoa_prf+0x190>
    4d3a:	e0 e0       	ldi	r30, 0x00	; 0
    4d3c:	f0 e0       	ldi	r31, 0x00	; 0
    4d3e:	2e 0f       	add	r18, r30
    4d40:	3f 1f       	adc	r19, r31
    4d42:	e1 2f       	mov	r30, r17
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	2e 17       	cp	r18, r30
    4d48:	3f 07       	cpc	r19, r31
    4d4a:	1c f4       	brge	.+6      	; 0x4d52 <dtoa_prf+0x1a4>
    4d4c:	12 1b       	sub	r17, r18
    4d4e:	21 2f       	mov	r18, r17
    4d50:	01 c0       	rjmp	.+2      	; 0x4d54 <dtoa_prf+0x1a6>
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	8e 2d       	mov	r24, r14
    4d56:	88 71       	andi	r24, 0x18	; 24
    4d58:	59 f4       	brne	.+22     	; 0x4d70 <dtoa_prf+0x1c2>
    4d5a:	f6 01       	movw	r30, r12
    4d5c:	82 2f       	mov	r24, r18
    4d5e:	30 e2       	ldi	r19, 0x20	; 32
    4d60:	88 23       	and	r24, r24
    4d62:	19 f0       	breq	.+6      	; 0x4d6a <dtoa_prf+0x1bc>
    4d64:	31 93       	st	Z+, r19
    4d66:	81 50       	subi	r24, 0x01	; 1
    4d68:	fb cf       	rjmp	.-10     	; 0x4d60 <dtoa_prf+0x1b2>
    4d6a:	c2 0e       	add	r12, r18
    4d6c:	d1 1c       	adc	r13, r1
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	99 23       	and	r25, r25
    4d72:	29 f0       	breq	.+10     	; 0x4d7e <dtoa_prf+0x1d0>
    4d74:	d6 01       	movw	r26, r12
    4d76:	9c 93       	st	X, r25
    4d78:	f6 01       	movw	r30, r12
    4d7a:	31 96       	adiw	r30, 0x01	; 1
    4d7c:	6f 01       	movw	r12, r30
    4d7e:	51 11       	cpse	r21, r1
    4d80:	0b c0       	rjmp	.+22     	; 0x4d98 <dtoa_prf+0x1ea>
    4d82:	f6 01       	movw	r30, r12
    4d84:	82 2f       	mov	r24, r18
    4d86:	90 e3       	ldi	r25, 0x30	; 48
    4d88:	88 23       	and	r24, r24
    4d8a:	19 f0       	breq	.+6      	; 0x4d92 <dtoa_prf+0x1e4>
    4d8c:	91 93       	st	Z+, r25
    4d8e:	81 50       	subi	r24, 0x01	; 1
    4d90:	fb cf       	rjmp	.-10     	; 0x4d88 <dtoa_prf+0x1da>
    4d92:	c2 0e       	add	r12, r18
    4d94:	d1 1c       	adc	r13, r1
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	0f 2d       	mov	r16, r15
    4d9a:	06 0f       	add	r16, r22
    4d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9e:	34 2f       	mov	r19, r20
    4da0:	30 71       	andi	r19, 0x10	; 16
    4da2:	44 ff       	sbrs	r20, 4
    4da4:	03 c0       	rjmp	.+6      	; 0x4dac <dtoa_prf+0x1fe>
    4da6:	91 33       	cpi	r25, 0x31	; 49
    4da8:	09 f4       	brne	.+2      	; 0x4dac <dtoa_prf+0x1fe>
    4daa:	01 50       	subi	r16, 0x01	; 1
    4dac:	10 16       	cp	r1, r16
    4dae:	24 f4       	brge	.+8      	; 0x4db8 <dtoa_prf+0x20a>
    4db0:	09 30       	cpi	r16, 0x09	; 9
    4db2:	18 f0       	brcs	.+6      	; 0x4dba <dtoa_prf+0x20c>
    4db4:	08 e0       	ldi	r16, 0x08	; 8
    4db6:	01 c0       	rjmp	.+2      	; 0x4dba <dtoa_prf+0x20c>
    4db8:	01 e0       	ldi	r16, 0x01	; 1
    4dba:	ab 01       	movw	r20, r22
    4dbc:	77 ff       	sbrs	r23, 7
    4dbe:	02 c0       	rjmp	.+4      	; 0x4dc4 <dtoa_prf+0x216>
    4dc0:	40 e0       	ldi	r20, 0x00	; 0
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	fb 01       	movw	r30, r22
    4dc6:	e4 1b       	sub	r30, r20
    4dc8:	f5 0b       	sbc	r31, r21
    4dca:	a1 e0       	ldi	r26, 0x01	; 1
    4dcc:	b0 e0       	ldi	r27, 0x00	; 0
    4dce:	ac 0f       	add	r26, r28
    4dd0:	bd 1f       	adc	r27, r29
    4dd2:	ea 0f       	add	r30, r26
    4dd4:	fb 1f       	adc	r31, r27
    4dd6:	8e e2       	ldi	r24, 0x2E	; 46
    4dd8:	a8 2e       	mov	r10, r24
    4dda:	4b 01       	movw	r8, r22
    4ddc:	80 1a       	sub	r8, r16
    4dde:	91 08       	sbc	r9, r1
    4de0:	0b 2d       	mov	r16, r11
    4de2:	10 e0       	ldi	r17, 0x00	; 0
    4de4:	11 95       	neg	r17
    4de6:	01 95       	neg	r16
    4de8:	11 09       	sbc	r17, r1
    4dea:	4f 3f       	cpi	r20, 0xFF	; 255
    4dec:	bf ef       	ldi	r27, 0xFF	; 255
    4dee:	5b 07       	cpc	r21, r27
    4df0:	21 f4       	brne	.+8      	; 0x4dfa <dtoa_prf+0x24c>
    4df2:	d6 01       	movw	r26, r12
    4df4:	ac 92       	st	X, r10
    4df6:	11 96       	adiw	r26, 0x01	; 1
    4df8:	6d 01       	movw	r12, r26
    4dfa:	64 17       	cp	r22, r20
    4dfc:	75 07       	cpc	r23, r21
    4dfe:	2c f0       	brlt	.+10     	; 0x4e0a <dtoa_prf+0x25c>
    4e00:	84 16       	cp	r8, r20
    4e02:	95 06       	cpc	r9, r21
    4e04:	14 f4       	brge	.+4      	; 0x4e0a <dtoa_prf+0x25c>
    4e06:	81 81       	ldd	r24, Z+1	; 0x01
    4e08:	01 c0       	rjmp	.+2      	; 0x4e0c <dtoa_prf+0x25e>
    4e0a:	80 e3       	ldi	r24, 0x30	; 48
    4e0c:	41 50       	subi	r20, 0x01	; 1
    4e0e:	51 09       	sbc	r21, r1
    4e10:	31 96       	adiw	r30, 0x01	; 1
    4e12:	d6 01       	movw	r26, r12
    4e14:	11 96       	adiw	r26, 0x01	; 1
    4e16:	7d 01       	movw	r14, r26
    4e18:	40 17       	cp	r20, r16
    4e1a:	51 07       	cpc	r21, r17
    4e1c:	24 f0       	brlt	.+8      	; 0x4e26 <dtoa_prf+0x278>
    4e1e:	d6 01       	movw	r26, r12
    4e20:	8c 93       	st	X, r24
    4e22:	67 01       	movw	r12, r14
    4e24:	e2 cf       	rjmp	.-60     	; 0x4dea <dtoa_prf+0x23c>
    4e26:	64 17       	cp	r22, r20
    4e28:	75 07       	cpc	r23, r21
    4e2a:	39 f4       	brne	.+14     	; 0x4e3a <dtoa_prf+0x28c>
    4e2c:	96 33       	cpi	r25, 0x36	; 54
    4e2e:	20 f4       	brcc	.+8      	; 0x4e38 <dtoa_prf+0x28a>
    4e30:	95 33       	cpi	r25, 0x35	; 53
    4e32:	19 f4       	brne	.+6      	; 0x4e3a <dtoa_prf+0x28c>
    4e34:	31 11       	cpse	r19, r1
    4e36:	01 c0       	rjmp	.+2      	; 0x4e3a <dtoa_prf+0x28c>
    4e38:	81 e3       	ldi	r24, 0x31	; 49
    4e3a:	f6 01       	movw	r30, r12
    4e3c:	80 83       	st	Z, r24
    4e3e:	f7 01       	movw	r30, r14
    4e40:	82 2f       	mov	r24, r18
    4e42:	90 e2       	ldi	r25, 0x20	; 32
    4e44:	88 23       	and	r24, r24
    4e46:	19 f0       	breq	.+6      	; 0x4e4e <dtoa_prf+0x2a0>
    4e48:	91 93       	st	Z+, r25
    4e4a:	81 50       	subi	r24, 0x01	; 1
    4e4c:	fb cf       	rjmp	.-10     	; 0x4e44 <dtoa_prf+0x296>
    4e4e:	f7 01       	movw	r30, r14
    4e50:	e2 0f       	add	r30, r18
    4e52:	f1 1d       	adc	r31, r1
    4e54:	10 82       	st	Z, r1
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	29 96       	adiw	r28, 0x09	; 9
    4e5c:	ec e0       	ldi	r30, 0x0C	; 12
    4e5e:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0xc>

00004e62 <__ftoa_engine>:
    4e62:	28 30       	cpi	r18, 0x08	; 8
    4e64:	08 f0       	brcs	.+2      	; 0x4e68 <__ftoa_engine+0x6>
    4e66:	27 e0       	ldi	r18, 0x07	; 7
    4e68:	33 27       	eor	r19, r19
    4e6a:	da 01       	movw	r26, r20
    4e6c:	99 0f       	add	r25, r25
    4e6e:	31 1d       	adc	r19, r1
    4e70:	87 fd       	sbrc	r24, 7
    4e72:	91 60       	ori	r25, 0x01	; 1
    4e74:	00 96       	adiw	r24, 0x00	; 0
    4e76:	61 05       	cpc	r22, r1
    4e78:	71 05       	cpc	r23, r1
    4e7a:	39 f4       	brne	.+14     	; 0x4e8a <__ftoa_engine+0x28>
    4e7c:	32 60       	ori	r19, 0x02	; 2
    4e7e:	2e 5f       	subi	r18, 0xFE	; 254
    4e80:	3d 93       	st	X+, r19
    4e82:	30 e3       	ldi	r19, 0x30	; 48
    4e84:	2a 95       	dec	r18
    4e86:	e1 f7       	brne	.-8      	; 0x4e80 <__ftoa_engine+0x1e>
    4e88:	08 95       	ret
    4e8a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e8c:	30 f0       	brcs	.+12     	; 0x4e9a <__ftoa_engine+0x38>
    4e8e:	80 38       	cpi	r24, 0x80	; 128
    4e90:	71 05       	cpc	r23, r1
    4e92:	61 05       	cpc	r22, r1
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <__ftoa_engine+0x36>
    4e96:	3c 5f       	subi	r19, 0xFC	; 252
    4e98:	3c 5f       	subi	r19, 0xFC	; 252
    4e9a:	3d 93       	st	X+, r19
    4e9c:	91 30       	cpi	r25, 0x01	; 1
    4e9e:	08 f0       	brcs	.+2      	; 0x4ea2 <__ftoa_engine+0x40>
    4ea0:	80 68       	ori	r24, 0x80	; 128
    4ea2:	91 1d       	adc	r25, r1
    4ea4:	df 93       	push	r29
    4ea6:	cf 93       	push	r28
    4ea8:	1f 93       	push	r17
    4eaa:	0f 93       	push	r16
    4eac:	ff 92       	push	r15
    4eae:	ef 92       	push	r14
    4eb0:	19 2f       	mov	r17, r25
    4eb2:	98 7f       	andi	r25, 0xF8	; 248
    4eb4:	96 95       	lsr	r25
    4eb6:	e9 2f       	mov	r30, r25
    4eb8:	96 95       	lsr	r25
    4eba:	96 95       	lsr	r25
    4ebc:	e9 0f       	add	r30, r25
    4ebe:	ff 27       	eor	r31, r31
    4ec0:	e2 5c       	subi	r30, 0xC2	; 194
    4ec2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ec4:	99 27       	eor	r25, r25
    4ec6:	33 27       	eor	r19, r19
    4ec8:	ee 24       	eor	r14, r14
    4eca:	ff 24       	eor	r15, r15
    4ecc:	a7 01       	movw	r20, r14
    4ece:	e7 01       	movw	r28, r14
    4ed0:	05 90       	lpm	r0, Z+
    4ed2:	08 94       	sec
    4ed4:	07 94       	ror	r0
    4ed6:	28 f4       	brcc	.+10     	; 0x4ee2 <__ftoa_engine+0x80>
    4ed8:	36 0f       	add	r19, r22
    4eda:	e7 1e       	adc	r14, r23
    4edc:	f8 1e       	adc	r15, r24
    4ede:	49 1f       	adc	r20, r25
    4ee0:	51 1d       	adc	r21, r1
    4ee2:	66 0f       	add	r22, r22
    4ee4:	77 1f       	adc	r23, r23
    4ee6:	88 1f       	adc	r24, r24
    4ee8:	99 1f       	adc	r25, r25
    4eea:	06 94       	lsr	r0
    4eec:	a1 f7       	brne	.-24     	; 0x4ed6 <__ftoa_engine+0x74>
    4eee:	05 90       	lpm	r0, Z+
    4ef0:	07 94       	ror	r0
    4ef2:	28 f4       	brcc	.+10     	; 0x4efe <__ftoa_engine+0x9c>
    4ef4:	e7 0e       	add	r14, r23
    4ef6:	f8 1e       	adc	r15, r24
    4ef8:	49 1f       	adc	r20, r25
    4efa:	56 1f       	adc	r21, r22
    4efc:	c1 1d       	adc	r28, r1
    4efe:	77 0f       	add	r23, r23
    4f00:	88 1f       	adc	r24, r24
    4f02:	99 1f       	adc	r25, r25
    4f04:	66 1f       	adc	r22, r22
    4f06:	06 94       	lsr	r0
    4f08:	a1 f7       	brne	.-24     	; 0x4ef2 <__ftoa_engine+0x90>
    4f0a:	05 90       	lpm	r0, Z+
    4f0c:	07 94       	ror	r0
    4f0e:	28 f4       	brcc	.+10     	; 0x4f1a <__ftoa_engine+0xb8>
    4f10:	f8 0e       	add	r15, r24
    4f12:	49 1f       	adc	r20, r25
    4f14:	56 1f       	adc	r21, r22
    4f16:	c7 1f       	adc	r28, r23
    4f18:	d1 1d       	adc	r29, r1
    4f1a:	88 0f       	add	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	66 1f       	adc	r22, r22
    4f20:	77 1f       	adc	r23, r23
    4f22:	06 94       	lsr	r0
    4f24:	a1 f7       	brne	.-24     	; 0x4f0e <__ftoa_engine+0xac>
    4f26:	05 90       	lpm	r0, Z+
    4f28:	07 94       	ror	r0
    4f2a:	20 f4       	brcc	.+8      	; 0x4f34 <__ftoa_engine+0xd2>
    4f2c:	49 0f       	add	r20, r25
    4f2e:	56 1f       	adc	r21, r22
    4f30:	c7 1f       	adc	r28, r23
    4f32:	d8 1f       	adc	r29, r24
    4f34:	99 0f       	add	r25, r25
    4f36:	66 1f       	adc	r22, r22
    4f38:	77 1f       	adc	r23, r23
    4f3a:	88 1f       	adc	r24, r24
    4f3c:	06 94       	lsr	r0
    4f3e:	a9 f7       	brne	.-22     	; 0x4f2a <__ftoa_engine+0xc8>
    4f40:	84 91       	lpm	r24, Z
    4f42:	10 95       	com	r17
    4f44:	17 70       	andi	r17, 0x07	; 7
    4f46:	41 f0       	breq	.+16     	; 0x4f58 <__ftoa_engine+0xf6>
    4f48:	d6 95       	lsr	r29
    4f4a:	c7 95       	ror	r28
    4f4c:	57 95       	ror	r21
    4f4e:	47 95       	ror	r20
    4f50:	f7 94       	ror	r15
    4f52:	e7 94       	ror	r14
    4f54:	1a 95       	dec	r17
    4f56:	c1 f7       	brne	.-16     	; 0x4f48 <__ftoa_engine+0xe6>
    4f58:	e4 ee       	ldi	r30, 0xE4	; 228
    4f5a:	f2 e0       	ldi	r31, 0x02	; 2
    4f5c:	68 94       	set
    4f5e:	15 90       	lpm	r1, Z+
    4f60:	15 91       	lpm	r17, Z+
    4f62:	35 91       	lpm	r19, Z+
    4f64:	65 91       	lpm	r22, Z+
    4f66:	95 91       	lpm	r25, Z+
    4f68:	05 90       	lpm	r0, Z+
    4f6a:	7f e2       	ldi	r23, 0x2F	; 47
    4f6c:	73 95       	inc	r23
    4f6e:	e1 18       	sub	r14, r1
    4f70:	f1 0a       	sbc	r15, r17
    4f72:	43 0b       	sbc	r20, r19
    4f74:	56 0b       	sbc	r21, r22
    4f76:	c9 0b       	sbc	r28, r25
    4f78:	d0 09       	sbc	r29, r0
    4f7a:	c0 f7       	brcc	.-16     	; 0x4f6c <__ftoa_engine+0x10a>
    4f7c:	e1 0c       	add	r14, r1
    4f7e:	f1 1e       	adc	r15, r17
    4f80:	43 1f       	adc	r20, r19
    4f82:	56 1f       	adc	r21, r22
    4f84:	c9 1f       	adc	r28, r25
    4f86:	d0 1d       	adc	r29, r0
    4f88:	7e f4       	brtc	.+30     	; 0x4fa8 <__ftoa_engine+0x146>
    4f8a:	70 33       	cpi	r23, 0x30	; 48
    4f8c:	11 f4       	brne	.+4      	; 0x4f92 <__ftoa_engine+0x130>
    4f8e:	8a 95       	dec	r24
    4f90:	e6 cf       	rjmp	.-52     	; 0x4f5e <__ftoa_engine+0xfc>
    4f92:	e8 94       	clt
    4f94:	01 50       	subi	r16, 0x01	; 1
    4f96:	30 f0       	brcs	.+12     	; 0x4fa4 <__ftoa_engine+0x142>
    4f98:	08 0f       	add	r16, r24
    4f9a:	0a f4       	brpl	.+2      	; 0x4f9e <__ftoa_engine+0x13c>
    4f9c:	00 27       	eor	r16, r16
    4f9e:	02 17       	cp	r16, r18
    4fa0:	08 f4       	brcc	.+2      	; 0x4fa4 <__ftoa_engine+0x142>
    4fa2:	20 2f       	mov	r18, r16
    4fa4:	23 95       	inc	r18
    4fa6:	02 2f       	mov	r16, r18
    4fa8:	7a 33       	cpi	r23, 0x3A	; 58
    4faa:	28 f0       	brcs	.+10     	; 0x4fb6 <__ftoa_engine+0x154>
    4fac:	79 e3       	ldi	r23, 0x39	; 57
    4fae:	7d 93       	st	X+, r23
    4fb0:	2a 95       	dec	r18
    4fb2:	e9 f7       	brne	.-6      	; 0x4fae <__ftoa_engine+0x14c>
    4fb4:	10 c0       	rjmp	.+32     	; 0x4fd6 <__ftoa_engine+0x174>
    4fb6:	7d 93       	st	X+, r23
    4fb8:	2a 95       	dec	r18
    4fba:	89 f6       	brne	.-94     	; 0x4f5e <__ftoa_engine+0xfc>
    4fbc:	06 94       	lsr	r0
    4fbe:	97 95       	ror	r25
    4fc0:	67 95       	ror	r22
    4fc2:	37 95       	ror	r19
    4fc4:	17 95       	ror	r17
    4fc6:	17 94       	ror	r1
    4fc8:	e1 18       	sub	r14, r1
    4fca:	f1 0a       	sbc	r15, r17
    4fcc:	43 0b       	sbc	r20, r19
    4fce:	56 0b       	sbc	r21, r22
    4fd0:	c9 0b       	sbc	r28, r25
    4fd2:	d0 09       	sbc	r29, r0
    4fd4:	98 f0       	brcs	.+38     	; 0x4ffc <__ftoa_engine+0x19a>
    4fd6:	23 95       	inc	r18
    4fd8:	7e 91       	ld	r23, -X
    4fda:	73 95       	inc	r23
    4fdc:	7a 33       	cpi	r23, 0x3A	; 58
    4fde:	08 f0       	brcs	.+2      	; 0x4fe2 <__ftoa_engine+0x180>
    4fe0:	70 e3       	ldi	r23, 0x30	; 48
    4fe2:	7c 93       	st	X, r23
    4fe4:	20 13       	cpse	r18, r16
    4fe6:	b8 f7       	brcc	.-18     	; 0x4fd6 <__ftoa_engine+0x174>
    4fe8:	7e 91       	ld	r23, -X
    4fea:	70 61       	ori	r23, 0x10	; 16
    4fec:	7d 93       	st	X+, r23
    4fee:	30 f0       	brcs	.+12     	; 0x4ffc <__ftoa_engine+0x19a>
    4ff0:	83 95       	inc	r24
    4ff2:	71 e3       	ldi	r23, 0x31	; 49
    4ff4:	7d 93       	st	X+, r23
    4ff6:	70 e3       	ldi	r23, 0x30	; 48
    4ff8:	2a 95       	dec	r18
    4ffa:	e1 f7       	brne	.-8      	; 0x4ff4 <__ftoa_engine+0x192>
    4ffc:	11 24       	eor	r1, r1
    4ffe:	ef 90       	pop	r14
    5000:	ff 90       	pop	r15
    5002:	0f 91       	pop	r16
    5004:	1f 91       	pop	r17
    5006:	cf 91       	pop	r28
    5008:	df 91       	pop	r29
    500a:	99 27       	eor	r25, r25
    500c:	87 fd       	sbrc	r24, 7
    500e:	90 95       	com	r25
    5010:	08 95       	ret

00005012 <strrev>:
    5012:	dc 01       	movw	r26, r24
    5014:	fc 01       	movw	r30, r24
    5016:	67 2f       	mov	r22, r23
    5018:	71 91       	ld	r23, Z+
    501a:	77 23       	and	r23, r23
    501c:	e1 f7       	brne	.-8      	; 0x5016 <strrev+0x4>
    501e:	32 97       	sbiw	r30, 0x02	; 2
    5020:	04 c0       	rjmp	.+8      	; 0x502a <strrev+0x18>
    5022:	7c 91       	ld	r23, X
    5024:	6d 93       	st	X+, r22
    5026:	70 83       	st	Z, r23
    5028:	62 91       	ld	r22, -Z
    502a:	ae 17       	cp	r26, r30
    502c:	bf 07       	cpc	r27, r31
    502e:	c8 f3       	brcs	.-14     	; 0x5022 <strrev+0x10>
    5030:	08 95       	ret

00005032 <eeprom_read_byte>:
    5032:	f9 99       	sbic	0x1f, 1	; 31
    5034:	fe cf       	rjmp	.-4      	; 0x5032 <eeprom_read_byte>
    5036:	92 bd       	out	0x22, r25	; 34
    5038:	81 bd       	out	0x21, r24	; 33
    503a:	f8 9a       	sbi	0x1f, 0	; 31
    503c:	99 27       	eor	r25, r25
    503e:	80 b5       	in	r24, 0x20	; 32
    5040:	08 95       	ret

00005042 <eeprom_write_byte>:
    5042:	26 2f       	mov	r18, r22

00005044 <eeprom_write_r18>:
    5044:	f9 99       	sbic	0x1f, 1	; 31
    5046:	fe cf       	rjmp	.-4      	; 0x5044 <eeprom_write_r18>
    5048:	1f ba       	out	0x1f, r1	; 31
    504a:	92 bd       	out	0x22, r25	; 34
    504c:	81 bd       	out	0x21, r24	; 33
    504e:	20 bd       	out	0x20, r18	; 32
    5050:	0f b6       	in	r0, 0x3f	; 63
    5052:	f8 94       	cli
    5054:	fa 9a       	sbi	0x1f, 2	; 31
    5056:	f9 9a       	sbi	0x1f, 1	; 31
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	01 96       	adiw	r24, 0x01	; 1
    505c:	08 95       	ret

0000505e <__prologue_saves__>:
    505e:	2f 92       	push	r2
    5060:	3f 92       	push	r3
    5062:	4f 92       	push	r4
    5064:	5f 92       	push	r5
    5066:	6f 92       	push	r6
    5068:	7f 92       	push	r7
    506a:	8f 92       	push	r8
    506c:	9f 92       	push	r9
    506e:	af 92       	push	r10
    5070:	bf 92       	push	r11
    5072:	cf 92       	push	r12
    5074:	df 92       	push	r13
    5076:	ef 92       	push	r14
    5078:	ff 92       	push	r15
    507a:	0f 93       	push	r16
    507c:	1f 93       	push	r17
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	cd b7       	in	r28, 0x3d	; 61
    5084:	de b7       	in	r29, 0x3e	; 62
    5086:	ca 1b       	sub	r28, r26
    5088:	db 0b       	sbc	r29, r27
    508a:	0f b6       	in	r0, 0x3f	; 63
    508c:	f8 94       	cli
    508e:	de bf       	out	0x3e, r29	; 62
    5090:	0f be       	out	0x3f, r0	; 63
    5092:	cd bf       	out	0x3d, r28	; 61
    5094:	09 94       	ijmp

00005096 <__epilogue_restores__>:
    5096:	2a 88       	ldd	r2, Y+18	; 0x12
    5098:	39 88       	ldd	r3, Y+17	; 0x11
    509a:	48 88       	ldd	r4, Y+16	; 0x10
    509c:	5f 84       	ldd	r5, Y+15	; 0x0f
    509e:	6e 84       	ldd	r6, Y+14	; 0x0e
    50a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    50a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    50a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    50a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    50a8:	b9 84       	ldd	r11, Y+9	; 0x09
    50aa:	c8 84       	ldd	r12, Y+8	; 0x08
    50ac:	df 80       	ldd	r13, Y+7	; 0x07
    50ae:	ee 80       	ldd	r14, Y+6	; 0x06
    50b0:	fd 80       	ldd	r15, Y+5	; 0x05
    50b2:	0c 81       	ldd	r16, Y+4	; 0x04
    50b4:	1b 81       	ldd	r17, Y+3	; 0x03
    50b6:	aa 81       	ldd	r26, Y+2	; 0x02
    50b8:	b9 81       	ldd	r27, Y+1	; 0x01
    50ba:	ce 0f       	add	r28, r30
    50bc:	d1 1d       	adc	r29, r1
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
    50c2:	de bf       	out	0x3e, r29	; 62
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	cd bf       	out	0x3d, r28	; 61
    50c8:	ed 01       	movw	r28, r26
    50ca:	08 95       	ret

000050cc <_exit>:
    50cc:	f8 94       	cli

000050ce <__stop_program>:
    50ce:	ff cf       	rjmp	.-2      	; 0x50ce <__stop_program>
